#ifndef MOBCONTROL_MODULE
#define MOBCONTROL_MODULE

#include "_utils.fos"
#include "entire.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "_bags.fos"
#include "npc_planes_h.fos"
#include "speed_h.fos"
#include "heal_h.fos"
#include "Fractions.fosh"

import void hotkey_critter_anim( Critter& cr, int param0 ) from "general_unsafe";

void unsafe_useBandage( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		useBandage( IDs );
	}
}

void useBandage( int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;
	}

    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).useBandage();
    }
}

void unsafe_useMeds( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		useMeds( IDs );
	}
}

void useMeds( int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;
	}

    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).useMeds();
    }
}

void unsafe_relaxNPC( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		relaxNPC( IDs );
	}
}

void relaxNPC( int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;		
	}

    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).setHome();
		Mob( IDs[i] ).relax();
    }
}

void unsafe_setControl( Critter& player, int ID, int groupFlag, int p2, string@ p3, int[]@ p4 )
{
	if( isGM( player ) )
	{
		setControl( player, ID, groupFlag );
	}
}

void setControl( Critter& player, int ID, int groupFlag )
{
	Mob( ID ).setControl( player.Id, groupFlag );
}

void unsafe_clearPlans( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		clearPlans( IDs );
	}
}

void clearPlans( int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).clearPlans();
    }
}

void unsafe_stopMob( Critter& player, int x, int y, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		stopMob( x, y, IDs );
	}
}

void stopMob( int x, int y, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).stop( x, y );
    }
}

void unsafe_MobHoldPosition( Critter& player, int x, int y, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		MobHoldPosition( player, x, y, IDs );
	}
}

void MobHoldPosition( Critter& player, int x, int y, int[]@ IDs )
{
	if( !valid( IDs ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Critter@ cr = GetCritter( IDs[i] );
		if( valid( cr ) )
		{
			int value = CLAMP( cr.Param[ CR_HOLD_POSITION ], 0, 1 );
			cr.ParamBase[ CR_HOLD_POSITION ] = 1 - value;
		}
    }
}

void unsafe_moveMob( Critter& player, int x, int y, int runFlag, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		if( FLAG( player.ParamBase[ CR_SINF_MODE ], SINF_FORMATION ) )
		{
			moveMobFormation( x, y, runFlag, IDs );
		}
		else
		{
			moveMob( x, y, runFlag, IDs );			
		}
	}
}

void moveMob( int x, int y, int runFlag, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
	for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).move( x, y, ( runFlag != 0 ) );
    }
}

void moveMobFormation( int x, int y, int runFlag, int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
	int x0 = 0;
	int	y0 = 0;
	getGroupCenterCords( x0, y0, IDs );
	
	for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).moveRelative( x, y, x0, y0, ( runFlag != 0 ) );
    }
}

void getGroupCenterCords( int& x, int& y, int[]@ IDs )
{
	x = 0; y = 0;
	uint count = IDs.length();
	for( uint i = 0; i < count; i++ )
	{
		Critter@ mob = GetCritter( IDs[i] );
		if( !valid( mob ) ) continue;
		
		x += mob.HexX;
		y += mob.HexY;
    }
	
	x /= count;
	y /= count;
}

void unsafe_attackMob( Critter& player, int target_id, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) || player.Param[ CR_SELECT_PET_TARGET ] == MSG_PET_ATTACK_MESSAGE )
	{
		attackMob( target_id, IDs );
	}
}

void attackMob( int target_id, int[]@ IDs )
{
    Critter@ target = GetCritter( target_id );
	
	if( !valid( IDs ) || !valid( target ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).attack( target );
    }
}

void unsafe_addEnemy( Critter& player, int target_id, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		addEnemy( target_id, IDs );
	}
}

void addEnemy( int target_id, int[]@ IDs )
{
    Critter@ target = GetCritter( target_id );
	
	if( !valid( IDs ) || !valid( target ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).addEnemy( target );
    }
}

void unsafe_assaultMob( Critter& player, int p0, int p1, int p2, string@ p3, int[] @ vals )
{
	if( isGM( player ) )
	{
		assaultMob( player, vals );
	}
}

void assaultMob( Critter& player, int[] @ IDs )
{
 	if( !valid( IDs ) ) 
	{
		return;
	}
	
	Critter@[] players;
    Map@ map = player.GetMap();
	if( !valid( map ) || map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) == 1 ) //ignore self
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).assault( players );
    }
}

void unsafe_deleteMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		deleteMob( IDs );
	}
}

void deleteMob( int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).delete();
    }
}

void unsafe_FreeMobById( Critter& player, int ID, int groupFlag, int, string@, int[]@ )
{
	Mob( ID ).free( groupFlag );
}

void unsafe_HomeMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GM_ZH_COMMAND );
		HomeMob( IDs );
	}
}

void HomeMob( int[]@ IDs )
{
	if( !valid( IDs ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).setHome();
    }
}

void unsafe_chaseMob( Critter& player, int ID, int p1, int p2, string@ p3, int[] @ IDs )
{
	if( isGM( player ) )
	{
		chaseMob( ID, IDs );
	}
}

void chaseMob( int ID, int[] @ IDs )
{
    Critter@ target = GetCritter( ID );
	
	if( !valid( IDs ) || !valid( target ) ) 
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		Mob( IDs[i] ).chase( target );
    }
}

void unsafe_GatherMob( Critter& player, int p0, int p1, int p2, string@ p3, int[]@ IDs )
{
	if( isGM( player ) )
	{
		GatherMob( player, IDs );
	}
}

void GatherMob( Critter& player, int[]@ IDs )
{
	if( !valid( IDs ) || !valid( player.GetMap() ) )
	{
		return;
	}
	
    for( uint i = 0, l = IDs.length(); i < l; i++ )
    {
		GatherMob( IDs[i], player );
    }
}

bool GatherMob( uint id, Critter& player )
{
	return GatherMob( GetCritter( id ), player );
}

bool GatherMob( Critter@ cr, Critter& player )
{
	Map@ map = player.GetMap();
	
	if( !valid( cr ) || !valid( map ) )
	{
		return false;
	}

	if( cr.IsPlayer() && cr.Param[ QST_GAMEMODE ] == GAME_START )
	{
		player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GM_ZG_COMMAND, "$name" + crInfo( cr ) );
		return false;
	}

	Location@ loc = map.GetLocation();
	if( !valid(loc) )
	{		
		return false;
	}

	uint8 temp_dir = player.Dir;
	for( uint j = 0; j < 6; j++ )
	{
		uint16 hexX = player.HexX, hexY = player.HexY;
		map.MoveHexByDir( hexX, hexY, ( temp_dir + j ) % 6, 2 );
		
		if( !map.IsHexPassed( hexX, hexY ) )
		{
			continue;
		}			
		
		cr.SetWorldPos( loc.WorldX, loc.WorldY );
		cr.TransitToMap( map.Id, hexX, hexY, 0 );
		
		break;
	}
	
	return true;
}

uint follow( Critter& cr, int master, uint& rate )//TODO: rework
{
    cr.ClearEnemyStack();
    Critter@ daddy = GetCritter( cr.Stat[ ST_FOLLOW_CRIT ] );

	if( !valid( daddy ) )
	{
		//cr.ModeBase[ MODE_NO_HOME ] = 0;
        return REAL_SECOND( 30 );
	}

	Map@ daddymap = daddy.GetMap();
    Map@ crmap = cr.GetMap();
    uint8 dir = daddy.Dir;
	
    cr.ErasePlane( -1, true );

    if( ( !valid( daddymap ) ) && ( valid( crmap ) ) )
    {
        cr.TransitToGlobalGroup( daddy.Id );
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( daddymap.Id == crmap.Id ) )
    {
		bool runFlag = false;
		if( GetDistantion( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ) > 3 )
		{
			runFlag = true;
		}
		
        AddWalkPlane( cr, 0, daddy.HexX, daddy.HexY, GetDirection( cr.HexX, cr.HexY, daddy.HexX, daddy.HexY ), runFlag, 2 );
		
		cr.SetHomePos( daddy.HexX, daddy.HexY, dir );
		cr.ModeBase[MODE_NO_HOME] = 1;		
    }
    else if( ( valid( daddymap ) ) && ( valid( crmap ) ) && ( crmap.Id != daddymap.Id ) )
    {
        uint8 findPos = 1;
        while( findPos <= 5 )
        {
			uint pos_x = daddy.HexX;
			uint pos_y = daddy.HexY;
			
			switch( dir )
			{
				case( 0 ):
					pos_x -= findPos;
					pos_y -= findPos;
					break;
				case( 1 ):
					pos_x -= findPos;
					pos_y += findPos;
					break;
				case( 2 ):
					pos_y += findPos;
					break;
				case( 3 ):
					pos_x += findPos;
					pos_y += findPos;
					break;
				case( 4 ):
					pos_x += findPos;
					pos_y -= findPos;
					break;
				case( 5 ):
					pos_y -= findPos;
					break;
				default:
					break;
			}
			
			//Log( "daddy.HexX " + daddy.HexX +  " daddy.HexY " + daddy.HexY + " dir "+ dir + " pos_x " + pos_x + " pos_y " + pos_y );
			
            if( daddymap.IsHexPassed( pos_x, pos_y ) )
            {
                cr.TransitToMap( daddymap.Id, pos_x, pos_y, dir );
                break;
            }
			
            findPos++;
        }
    }
	
    return REAL_SECOND( 1 );
}

class Mob
{
	Critter@ cr;
	
	Mob( int id )
	{
		@cr = GetCritter( id );
	}
	
	Mob( Critter@ cr )
	{
		@this.cr = cr;
	}
	
	bool validNPC()
	{
		if( !valid( cr ) || cr.IsPlayer() )
		{			
			return false;
		}
		
		return true;
	}
	
	void clearPlans()
	{
		cr.ErasePlane( -1, true );
		cr.ClearEnemyStack();
	}
	
	bool stop( int x, int y )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		clearPlans();
		cr.EraseTimeEvents( CTE_ROTTEN );
		cr.SetDir( GetDirection( cr.HexX, cr.HexY, x, y ) );
		return true;
	}
	
	bool move( int x, int y, bool runFlag )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		cr.ModeBase[ MODE_NO_HOME ] = 1;
		clearPlans();
		AddWalkPlane( cr, 1, x, y, GetDirection( cr.HexX, cr.HexY, x, y ), runFlag, 0 );
		return true;
	}
	
	bool moveRelative( int x, int y, int x0, int y0, bool runFlag )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		int dx = cr.HexX - x0;
		int dy = cr.HexY - y0;
		
		return move( x + dx, y + dy, runFlag );
	}	
	
	bool attack( Critter@ target )
	{
		if( !validNPC() || !valid( target ) )
		{
			return false;
		}
		
		cr.ModeBase[ MODE_NO_HOME ] = 1;
		clearPlans();
		AddAttackPlane( cr, 0, target, __RunOnCombat );
		cr.AddEnemyInStack( target.Id );
		
		return true;
	}
	
	bool addEnemy( Critter@ target )
	{
		if( !validNPC() || !valid( target ) )
		{
			return false;
		}
		
		if( cr.Stat[ ST_TEAM_ID ] == target.Stat[ ST_TEAM_ID ] )
		{
			return false;
		}
		
		Fraction@ fraction = GetFraction( cr );
		if( valid( fraction ) && GetFractionRelation( fraction, target ).Value == Relation_Ally )
		{
			return false;
		}
		
		AddAttackPlane( cr, 0, target, __RunOnCombat );
		cr.AddEnemyInStack( target.Id );
		
		return true;
	}	

	bool assault( Critter@[] targets )
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		for( uint i = 0, l = targets.length(); i < l; i++ )
		{
			AddAttackPlane( cr, 0, targets[i], __RunOnCombat );
			cr.AddEnemyInStack( targets[i].Id );
		}
		
		return true;
	}
	
	bool delete()
	{
		if( !validNPC() || cr.Stat[ ST_DIALOG_ID ] != 0 )
		{
			return false;
		}
		
		DeleteNpc( cr );	
		
		return true;
	}
	
	bool setHome()
	{
		if( !validNPC() ) 
		{			
			return false;
		}
		
		cr.SetHomePos( cr.HexX, cr.HexY, cr.Dir );
		cr.ModeBase[ MODE_NO_HOME ] = 0;
		
		return true;
	}
	
	bool free( int groupFlag )
	{
		if( !valid( cr ) ) 
		{			
			return false;
		}
		
		cr.ParamBase[ CR_CONTROLLED_GROUP ] &= ~( 1 << groupFlag );
		if( groupFlag != 0 || cr.ParamBase[ CR_CONTROLLED_GROUP ] == 0 )
		{
			//cr.ModeBase[ MODE_NO_HOME ] = 0;
			cr.ParamBase[ MERC_MASTER_ID ] = 0;
		}
		
		return true;
	}
	
	bool chase( Critter@ target )
	{
		if( !validNPC() || !valid( target ) )
		{
			return false;
		}
		
		clearPlans();

		if( cr.StatBase[ ST_FOLLOW_CRIT ] == int( target.Id ) )
		{
			cr.EraseTimeEvents( CTE_ROTTEN );
			cr.StatBase[ ST_FOLLOW_CRIT ] = 0;
			//cr.ModeBase[ MODE_NO_HOME ] = 0;
		}
		else
		{
			cr.ModeBase[ MODE_NO_HOME ] = 1;
			cr.StatBase[ ST_FOLLOW_CRIT ] = target.Id;
			cr.AddTimeEvent( "mobcontrol@follow", REAL_SECOND( 1 ), CTE_ROTTEN );
		}

		return true;
	}

	bool setControl( int ownerId, uint groupFlag ) 
	{
		if( !valid( cr ) )
		{
			return false;
		}
		
		if( cr.ParamBase[ MERC_MASTER_ID ] != ownerId )
		{
			if( cr.ParamBase[ MERC_MASTER_ID ] != 0 )
			{
				Critter@ lastOwner = GetCritter( cr.ParamBase[ MERC_MASTER_ID ] );
				if( valid( lastOwner ) )
				{
					lastOwner.RunClientScript( "client_gui@_LostCritterControl", cr.Id, 0, 0, null, null );
				}
			}
			
			cr.ParamBase[ CR_CONTROLLED_GROUP ] = 0;
		}
		
		cr.ParamBase[ CR_CONTROLLED_GROUP ] |= 1 << groupFlag;
		cr.ParamBase[ MERC_MASTER_ID ] = ownerId;
		
		return true;
	}
	
	bool relax()
	{
		if( !valid( cr ) )
		{
			return false;
		}
		
		hotkey_critter_anim( cr, cr.Param[ CR_IS_RELAXING ] == 0 ? 5 : 0 );
		return true;
	}
	
	bool useMeds()
	{
		if( !validNPC() )
		{
			return false;
		}		
		
		return UseBestHealingItemAvailable( cr );
	}
	
	bool useBandage()
	{
		if( !validNPC() )
		{
			return false;
		}		
		
		return AttemptBandaging( cr );
	}
}

#endif //MOBCONTROL_MODULE