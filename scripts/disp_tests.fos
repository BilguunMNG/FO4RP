class Color
{
	int r;
	int g;
	int b;
	
	bool inherited;
	
	Color() { init(); }
	Color( int r, int g, int b ) { init( r, g, b, false ); }
	Color( int r, int g, int b, bool inherited ) { init( r, g, b, inherited ); }
	
	void init( int r = 255, int g = 255, int b = 255, bool inherited = true )
	{
		this.r = r;
		this.g = g;
		this.b = b;
		
		this.inherited = inherited;
	}
	
	uint rgb()
	{
		return COLOR_RGB( r, g, b );
	}
}

class Dot
{
	Color@ color;
	int x;
	int y;
	
	Dot( int x, int y ) { init( x, y ); }
	Dot( int x, int y, Color@ color ){ init( x, y, color ); }
	
	void init( int x, int y, Color@ color = null )
	{
		if( !valid( color ) )
			@this.color = Color();
		
		this.x = x;
		this.y = y;
	}
}

class Line
{
	Dot@[] list;
	Color@ color;
	
	Line( Color@ color ) { @this.color = color; }
	
	Line@ add( Dot@ dot )
	{
		list.insertLast( dot );
		return this;
	}
	
	Line@ add( int x, int y )
	{
		list.insertLast( Dot( x, y ) );
		
		return this;
	}
	
	void clear() { list.resize( 0 ); }
	
	bool draw( int x0, int y0, bool looped = false )
	{
		if( !valid( list ) || list.length() < 1 )
			return false; 

		int[] drawData;
		
		for( uint i = 0, l = list.length(); i <= l; i++ )
		{
			if( !looped && i == l ) break;
			
			Dot@ dot = list[i%l];

			drawData.insertLast( x0 + dot.x );
			drawData.insertLast( y0 + dot.y );
		
			drawData.insertLast( dot.color.inherited ? this.color.rgb() : dot.color.rgb() );
		}
		DrawPrimitive( DRAW_PRIMITIVE_LINESTRIP, drawData );
		
		return true;
	}
}

Line@ test_line;

int linear( int input ) { return input * 0.1; }
int square( int input ) 
{
	float data = input * 0.1;
	return data * data; 
}
int random( int input ) { return Random( 0, input * 0.1 ); }

int mu = 80;
int disp = 40;
float e_const = 2.72;
float pi_const = 3.14;

int foo( int input ) 
{
	float x = input;
	float grade = - ( x - mu ) * ( x - mu ) / ( 2 * disp * disp );
	float result = pow( e_const, grade ) / disp * sqrt( 2 * pi_const );
	return result * 500;
}

bool line_generated = false;
funcdef int Processor( int input );
bool generateLine( int min, int max, Processor@ f )
{
	if( !valid( f ) ) return false;
	if( line_generated ) return true;
	
	if( !valid( test_line ) )
		@test_line = Line( Color( 0, 255, 0 ) );
	
	for( int x = 0; x < max; x++ )
		test_line.add( x, f(x) );
	
	line_generated = true;
	return true;
}

void Draw_Test_Line( int x0, int y0 )
{
	if( !valid( test_line ) ) return;
	test_line.draw( x0, y0 );
}

void clearLine()
{
	if( !valid( test_line ) ) return;
	
	test_line.clear();
	line_generated = false;
}