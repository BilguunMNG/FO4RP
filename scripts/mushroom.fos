#include "_macros.fos"
import void DIALOG_MENU( Critter& cr, string[] data ) from "gm";

#define TIME_EVENT		Val0
#define GROW_STAGE		Val1
#define SELECTION		Val2
#define PLANT_TYPE		Val3
#define WATERING		Val4
#define FERTILITY		Val5
#define PLANT_GAIN		Val6

void go( Critter& cr, int p0, int p1, int p2 )
{
	cr.Say( SAY_NORM, "Грибной сезон открыт!" );
	cr.AddItem( PID_MUSHBED_EMPTY, 2 );
	
	for(int i = 2, len = mushrooms.list.length(); i < len; i+=3 )
		cr.AddItem( mushrooms.list[i].PID, 5 );
}

MushroomList mushrooms;
 
void _Init( Item& item, bool firstTime )
	{
		Log( "TODO: #" + item.Id + " PID " + item.GetProtoId() + " " + ( firstTime ? "" : "!" ) + "firstTime." );
	}
 
class MushroomList{
	Mushroom[] list;
	MushroomList(){
		this.add(Mushroom("Проросший Геккогриб", PID_SEEDLING_TONGUE_GECKO))
			.add(Mushroom("Растущий Геккогриб", PID_RISING_TONGUE_GECKO))
			.add(Mushroom("Геккогриб", PID_TONGUE_GECKO))
			
			.add(Mushroom("Проросший Муравьиный нектар", PID_SEEDLING_MURAVNIKTAR))
			.add(Mushroom("Растущий Муравьиный нектар", PID_RISING_MURAVNIKTAR))
			.add(Mushroom("Муравьиный нектар", PID_MURAVNIKTAR))
			
			.add(Mushroom("Проросший Черногриб", PID_SEEDLING_BLACK_MUSHROOMS))
			.add(Mushroom("Растущий Черногриб", PID_RISING_BLACK_MUSHROOMS))
			.add(Mushroom("Черногриб", PID_BLACK_MUSHROOMS))
			
			.add(Mushroom("Проросший Бледногриб", PID_SEEDLING_PALE_MUSHROOM))
			.add(Mushroom("Растущий Бледногриб", PID_RISING_PALE_MUSHROOM))
			.add(Mushroom("Бледногриб", PID_PALE_MUSHROOM))
			
			.add(Mushroom("Проросший Мутогриб", PID_SEEDLING_MUTMUSH))
			.add(Mushroom("Растущий Мутогриб", PID_PID_RISING_MUTMUSH))
			.add(Mushroom("Мутогриб", PID_MUTMUSH))
		;
	 }
	 
	MushroomList@ add(Mushroom@ mushroom){
		list.insertLast(mushroom);
		return this;
	}

	Mushroom@ get(Item@ item)
	{
		if( !valid( item ) ) return null;
		
		uint pid = item.GetProtoId();
		
		for( uint i = 0, len = list.length(); i < len; i++ )
			if( list[i].check( pid ) )
				return list[i];
		
		return null;
	}

	string SayAll()
	{
		string str = "";
		for( uint i = 0, len = list.length(); i < len; i++ )
			str+= "\n array[" + i + "] = " + list[i].Say();		
		return str;
	}
}

class Mushroom{
	uint PID;
	string name;
	
	Mushroom(string name, uint PID ){
		this.name = name;
		this.PID = PID;
	}
	
	string Say(){
		return this.name;
	}
	
	bool check(uint PID){
		if (this.PID != PID) return false;
		return true;
	}
	
}

class MushroomBedList{
	MushroomBed[] list;
	MushroomBedList(){
		this.add(MushroomBed("грядка с Бледногрибом", 			PID_MUSHBED_BG1, PID_MUSHBED_BG2, PID_MUSHBED_BG3))
			.add(MushroomBed("грядка с Черногрибом", 			PID_MUSHBED_CG1, PID_MUSHBED_CG2, PID_MUSHBED_CG3))
			.add(MushroomBed("грядка с Геккогрибом", 			PID_MUSHBED_GG1, PID_MUSHBED_GG2, PID_MUSHBED_GG3))
			
			.add(MushroomBed("грядка с Муравьиным нектаром", 	PID_MUSHBED_MOCH1, PID_MUSHBED_MOCH2, PID_MUSHBED_MOCH3))
			.add(MushroomBed("грядка с Мутогрибом", 			PID_MUSHBED_MUTM1, PID_MUSHBED_MUTM2, PID_MUSHBED_MUTM3))
		;		
		
	}
	 
	MushroomBedList@ add(MushroomBed@ mushroomBed){
		list.insertLast(mushroomBed);
		return this;
	}	 
}


class MushroomBed{
	uint PID_young;
	uint PID_growing;
	uint PID_adult;
	uint time;
	string name;
	
	MushroomBed(string name, uint PID_young,  uint PID_growing, uint PID_adult ){
		this.name = name;
		this.PID_young = PID_young;
		this.PID_growing = PID_growing;
		this.PID_adult = PID_adult;	
	}
	
	
}

uint e_ProcessPlant( uint[] @ values ){
	return 0;
}