#include "_macros.fos"

import void AffectRadiation( Critter& cr, int value ) from "radiation";
import void AffectPoison( Critter& cr, int value ) from "poison";

import bool CheckGard( Map& map, uint16 hexX, uint16 hexY ) from "farm";

import void DIALOG_MENU( Critter& cr, string[] data ) from "gm";

#define PLANT_RADCVET     ( 0 )
#define PLANT_CABBAGE     ( 1 )
#define PLANT_CORN        ( 2 )
#define PLANT_MAX         ( 3 )

#define PID_RADCVET       ( 1600 )
#define PID_CABBAGE       ( 1610 )
#define PID_CORN          ( 1620 )

#define GROW_STAGE_TIME		REAL_SECOND( 10 )

#define TIME_EVENT		Val0
#define GROW_STAGE		Val1
#define SELECTION		Val2
#define PLANT_TYPE		Val3
#define WATERING		Val4
#define FERTILITY		Val5
#define PLANT_GAIN		Val6

void _InitPlant( Item& item, bool firstTime )
{
    if( firstTime )
    {
        uint16 proto = item.GetProtoId();
        if( item.GetType() != ITEM_TYPE_PLANT )
            return;

        uint8 hashNum = item.PLANT_TYPE;
        item.SELECTION = 1;

        CPlant @ plant;

        switch( proto )
        {
			//Добавить коноплю
			case PID_RADCVET:
				@plant = CRadCvet();
				break;
			case PID_CABBAGE:
				@plant = CCabbage();
				break;
			case PID_CORN:
				@plant = CCorn();
				break;
			default:
				break;
        }

        if( valid( plant ) )
        {
            hashNum = plant.PlantType;
        }

        item.PLANT_TYPE = hashNum;

        item.Update();
    }

	//Херня какая-то.
    if( item.GROW_STAGE == 0 )
    {
        item.SetEvent( ITEM_EVENT_DROP, "_DropPlant" );
        if( item.Accessory == ACCESSORY_HEX && item.TIME_EVENT != 0 )
            item.SetEvent( ITEM_EVENT_SKILL, "_SkillPlant" );
    } else {
    	item.SetEvent( ITEM_EVENT_SKILL, "_SkillPlant" );
    	//item.SetEvent( ITEM_EVENT_WALK, "_WalkPlant" );
    	item.SetEvent (ITEM_EVENT_USE_ON_ME, "_OnMePlant");
	}

	//Нахера?
    if( item.GROW_STAGE == 0 || item.GROW_STAGE == 3 )
    {
        SETFLAG( item.Flags, ITEM_CAN_USE );
    }
    else
        UNSETFLAG( item.Flags, ITEM_CAN_USE );
        
    item.SetEvent( ITEM_EVENT_USE, "_UsePlant" );
	item.Update();
}

bool _UsePlant( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    CPlant @ plant = GetCPlant( item.PLANT_TYPE );
    if( valid( onCritter ) || valid( onItem ) || valid( onScenery ) || !valid( plant ) )
        return false;

    if( item.GROW_STAGE == 0 )
    {
        AffectRadiation( cr, 1 );
        AffectPoison( cr, 1 );

        int heal = cr.Param[ ST_MAX_LIFE ] - cr.Param[ ST_CURRENT_HP ],
            good = item.SELECTION;
        if( good > heal )
            good = heal;
        if( good > 5 )
            good = 5;
        cr.ParamBase[ ST_CURRENT_HP ] += good;
        DeleteItem( item );
    }
    else
        return false;

    return true;
}

void _DropPlant( Item& item, Critter& cr )
{
    Map@ map = cr.GetMap();
    if( map is null )
        return;

    if( item.GROW_STAGE != 0 )
        return;

    if( map.GetItems( cr.HexX, cr.HexY, null ) > 1 )
    {
        if( cr.IsLife() )
            cr.Say( SAY_NETMSG, "Это тут не прорастет." );
        return;
    }

    uint time = 0;
    if( CheckGard( map, cr.HexX, cr.HexY ) )
    {
        time = GROW_STAGE_TIME;
        if( cr.IsLife() )
            cr.Say( SAY_NETMSG, "Плод посажен." );
    }
    else
    {
        if( cr.IsLife() )
            cr.Say( SAY_NETMSG, "Это тут не прорастет." );
		return;
    }

    item.SetEvent( ITEM_EVENT_SKILL, "_SkillPlant" );
    //item.SetEvent( ITEM_EVENT_WALK, "_WalkPlant" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_OnMePlant" );

    item.TIME_EVENT = CreateTimeEvent( __FullSecond + time, "e_ProcessPlant", item.Id, true );
}

bool AskRemove( Critter& cr, uint targetId ) //exported
{
	cr.ParamBase[CR_VAL0] = targetId;
	cr.ShowScreen( SCREEN_DIALOGBOX, 1, "plant@answer_REMOVE" );
	cr.Say( SAY_DIALOGBOX_TEXT, "Вы уверены, что хотите вырвать это растение? Оно умрет!" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "да" );
	return true;
}

void answer_REMOVE( Critter& cr, uint answerI, string& answerS )
{
	Item@ item = GetItem( cr.ParamBase[CR_VAL0] );
	if( !valid( item ) ) return;
	
	item.SetEvent( ITEM_EVENT_SKILL, null );
	item.SetEvent( ITEM_EVENT_USE_ON_ME, null );
	item.SetEvent( ITEM_EVENT_USE, null );
	item.SetEvent( ITEM_EVENT_DROP, null );
	
	if( item.TIME_EVENT != 0 )
	{
		EraseTimeEvent( item.TIME_EVENT );
		item.TIME_EVENT = 0;
	}

	CPlant @ plant = GetCPlant( item.PLANT_TYPE );
	plant.Kill( item );
}

void answer_CHECKOUT( Critter& cr, uint answerI, string& answerS )
{
	//do nothing yet
}

bool _SkillPlant( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
		CPlant @ plant = GetCPlant( item.PLANT_TYPE );
		if( plant is null )
			return true;

		if( item.GROW_STAGE == plant.SeedCycle )
		{
			for( uint i = 0, len = item.PLANT_GAIN * 2; i < len; i++ )
			{
				Item@ pl = cr.AddItem( plant.BasePid, 1 );
				pl.SELECTION = item.SELECTION + Random( 0, 1 );
				pl.PLANT_TYPE = item.PLANT_TYPE;
				pl.SetScript( "plant@_InitPlant" ); //Оно ж итак должно инициилизироваться!
			}
			DeleteItem( item );
			cr.Say( SAY_NETMSG, "Вы собрали семена." );
			return true;
		}
		
		if( item.GROW_STAGE == plant.SeedCycle + 1 )
		{
			if( item.PLANT_GAIN > 0 )
			{
				cr.AddItem( plant.BasePid + plant.MaxCycle + 1, item.PLANT_GAIN );
				cr.Say( SAY_NETMSG, "Вы собрали семена." );
			}
			else
			{
				cr.Say( SAY_NETMSG, "Вы не нашли ни одного нормального плода." );
			}
			DeleteItem( item );
			return true;
		}
			
		return AskRemove( cr, item.Id );
    }
	if( skill == SK_SCIENCE )
	{
		if( cr.Skill[SK_OUTDOORSMAN] + cr.Skill[SK_SCIENCE] >= 200 )
		{
			CPlant@ plant = GetCPlant( item.PLANT_TYPE );
			if( plant is null )
				return true;
			
			string[] stage_names = { "Семечка", "Побег", "Росток" };
			string stage = "";

			if( item.GROW_STAGE == plant.SeedCycle )
				stage = "Семяносная";

			if( item.GROW_STAGE == plant.SeedCycle + 1 && item.GROW_STAGE != plant.MaxCycle )
				stage = "Плодоносная";
			
			if( item.GROW_STAGE == plant.MaxCycle )
				stage = "Перегной";
			
			if( stage.length() == 0 && item.GROW_STAGE < stage_names.length() )
				stage = stage_names[item.GROW_STAGE];
			
			string[] data = { 
				"plant@answer_CHECKOUT", "Информация о растении:\n" + "\nСтадия роста: " + stage + "\nСелекция: " + item.SELECTION, 
					"Поли" + ( item.WATERING < 1 ? "ть" : "то" ),
					"Удобр" + ( item.FERTILITY < 1 ? "ить" : "ено" ) };
			DIALOG_MENU( cr, data );
		}
		else
			cr.Say(SAY_NETMSG, "Вы недостаточно образованы, что бы понять что к чему.");

		return true;
    }
    return false;
}

//Отключено, следует переработать.
void _WalkPlant( Item& item, Critter& cr, bool entered, uint8 dir )
{
    if( entered && item.GROW_STAGE > 1 )
    {
        if( Random( 1, 95 ) > 5 )
        {
            CPlant @ plant = GetCPlant( item.PLANT_TYPE );
            plant.Kill( item );
        }
    }
}

bool _OnMePlant( Item& item, Critter& cr, Item@ usedItem )
{
	cr.Say (SAY_EMOTE, "Возится с растением");
    if( usedItem is null )
        return true;
    if( item.GROW_STAGE == 0 )
        return true;

	//Нужно достать вменяемую ф-ю "полива", разделив на: проверку бутылки, трату бутылки, получение результата
    uint16 pid = usedItem.GetProtoId();
    if( pid == PID_NUKA_COLA
	 || pid == PID_BEER
     || pid == PID_BOOZE
	 || pid == PID_GLASS_BOTTLE_FULL
	 ||	pid == PID_BOTTLE_FULL )
    {
		cr.Say (SAY_NETMSG, "Вы полили растение.");
        item.WATERING += 1;
    }
    
	if( pid == PID_SHIT_SMALL )
    {
    	cr.Say (SAY_NETMSG, "Вы удобрили растение.");
        item.FERTILITY += 1;
    }

    return false;
}

CPlant@ GetCPlant( uint8 plantNum )
{
    if( plantNum < 0 || plantNum > PLANT_MAX )
        return null;

    CPlant@ tempPlant;

    switch( plantNum )
    {
		//переработать логику ветвления
    case PLANT_RADCVET:
        @tempPlant = CRadCvet();
        break;
    case PLANT_CABBAGE:
        @tempPlant = CCabbage();
        break;
    case PLANT_CORN:
        @tempPlant = CCorn();
        break;
    default:
        break;
    }

    return tempPlant;
}

class CRadCvet  : CPlant
{
    CRadCvet()
    {
        MaxCycle = 4;
        SeedCycle = 3;
        BasePid = PID_RADCVET;
        PlantType = PLANT_RADCVET;
    }

    uint Cycle1( Item& item )
    {
        SETFLAG( item.Flags, ITEM_HIDDEN );
        item.ChangeProto( PID_RADCVET + 1 );
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle2( Item& item )
    {
        UNSETFLAG( item.Flags, ITEM_CAN_USE );
        UNSETFLAG( item.Flags, ITEM_HIDDEN );
        item.ChangeProto( PID_RADCVET + 2 );
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle3( Item& item )
    {
        SETFLAG( item.Flags, ITEM_CAN_USE );
        item.ChangeProto( PID_RADCVET + 3 );
        item.TIME_EVENT = 0;
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle4( Item& item )
    {
        item.ChangeProto( PID_RADCVET + 4 );
        item.Update();
        return GROW_STAGE_TIME;
    }
}

class CCabbage  : CPlant
{
    CCabbage()
    {
        MaxCycle = 4;
        SeedCycle = 2;
        BasePid = PID_CABBAGE;
        PlantType = PLANT_CABBAGE;
    }

    uint Cycle1( Item& item )
    {
        SETFLAG( item.Flags, ITEM_HIDDEN );
        item.ChangeProto( PID_CABBAGE + 1 );
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle2( Item& item )
    {
        item.ChangeProto( PID_CABBAGE + 2 );
        SETFLAG( item.Flags, ITEM_CAN_USE );
        UNSETFLAG( item.Flags, ITEM_HIDDEN );
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle3( Item& item )
    {
        item.ChangeProto( PID_CABBAGE + 3 );
        SETFLAG( item.Flags, ITEM_CAN_USE );
        item.TIME_EVENT = 0;
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle4( Item& item )
    {
        item.ChangeProto( PID_CABBAGE + 4 );
        item.Update();
        return GROW_STAGE_TIME * 2;
    }
}

class CCorn : CPlant
{
    CCorn()
    {
        MaxCycle = 5;
        SeedCycle = 4;
        BasePid = PID_CORN;
        PlantType = PLANT_CORN;
    }

    uint Cycle1( Item& item )
    {
        SETFLAG( item.Flags, ITEM_HIDDEN );
        item.ChangeProto( PID_CORN + 1 );
        item.Update();

        return GROW_STAGE_TIME;
    }

    uint Cycle2( Item& item )
    {
        item.ChangeProto( PID_CORN + 2 );
        UNSETFLAG( item.Flags, ITEM_CAN_USE );
        UNSETFLAG( item.Flags, ITEM_HIDDEN );
        item.Update();

        IncreaseFruits( item );
        return GROW_STAGE_TIME;
    }

    uint Cycle3( Item& item )
    {
        item.ChangeProto( PID_CORN + 3 );
        SETFLAG( item.Flags, ITEM_CAN_USE );
        item.Update();

		if( item.FERTILITY > 0 && Random( 0, 1 ) == 0 )
			IncreaseFruits( item );

        return GROW_STAGE_TIME;
    }

    uint Cycle4( Item& item )
    {
        item.ChangeProto( PID_CORN + 4 );
        SETFLAG( item.Flags, ITEM_CAN_USE );
        
        item.TIME_EVENT = 0;//нахрена?
        item.Update();
        return GROW_STAGE_TIME;
    }

    uint Cycle5( Item& item )
    {
        item.ChangeProto( PID_CORN + 5 );
        item.Update();
        return GROW_STAGE_TIME * 2;
    }
}

class CPlant
{
    uint8 PlantType;
    uint8 MaxCycle;
    uint8 SeedCycle;
    uint8[] ToWater;
    uint8[] ToShit;
    uint16 BasePid;
    uint16 CollectPid;
	
    CPlant()
    {
        PlantType = 0;
        MaxCycle = 0;
        BasePid = 0;
    }

    CPlant( uint8 maxCycle )
    {
        MaxCycle = maxCycle;
    }

    uint Release( Item& item )
    {
        uint8 hashNum = item.PLANT_TYPE;
        uint  time = 0;

        switch( item.GROW_STAGE )
        {
        case 1:
            time = Cycle1( item );
            break;
        case 2:
            time = Cycle2( item );
            break;
        case 3:
            time = Cycle3( item );
            break;
        case 4:
            time = Cycle4( item );
            break;
        case 5:
            time = Cycle5( item );
            break;
        default:
            time = 0;
        }

        return time;
    }

    bool CheckWater( Item& item )
    {
    	Map@ currentMap = GetMap( item.MapId );
    	int rain = currentMap.GetRain();
		if( rain > 0 )
			item.WATERING++;
		
        if( item.GROW_STAGE > 1 && ( item.WATERING < 1 ) )
        {
			Kill( item );
			return false;
        }
        return true;
    }

    bool Kill( Item& item )
    {
        CPlant@ plant = GetCPlant( item.PLANT_TYPE );
        if( plant is null )
            return false;

		UNSETFLAG( item.Flags, ITEM_HIDDEN );
        item.ChangeProto( plant.BasePid + plant.MaxCycle );
        item.Update();

		item.FERTILITY = 0;
		item.PLANT_GAIN = 0;
		item.GROW_STAGE = plant.MaxCycle;
        return true;
    }

    uint MakeShit( Item& item )
    {
        UNSETFLAG( item.Flags, ITEM_HIDDEN );
        item.ChangeProto( PID_SHIT_SMALL );
        item.Update();
        return 0;
    }

    void IncreaseFruits( Item& item )
    {
        item.PLANT_GAIN += 1;
    }

    uint CycleDead( Item& item )
    {
        return 0;
    }

    uint Cycle1( Item& item )
    {
        return 0;
    }

    uint Cycle2( Item& item )
    {
        return 0;
    }

    uint Cycle3( Item& item )
    {
        return 0;
    }

    uint Cycle4( Item& item )
    {
        return 0;
    }

    uint Cycle5( Item& item )
    {
        return 0;
    }
}

uint e_ProcessPlant( uint[] @ values )
{
    if( values is null || values.length() != 1 )
        return 0;

    Item@ item = GetItem( values[ 0 ] );

    if( item is null )
        return 0;

    uint16 pid = item.GetProtoId();
    if( item.GetType() != ITEM_TYPE_PLANT )
        return 0;

    uint8 hashNum = item.PLANT_TYPE;
    CPlant @ plant = GetCPlant( hashNum );

    if( item.GROW_STAGE == 0 )
        item.SetEvent( ITEM_EVENT_DROP, null );
    else if( item.GROW_STAGE >= plant.MaxCycle )
        return plant.MakeShit( item );

    if( item.GROW_STAGE > 0 )
    {
        if( !plant.CheckWater( item ) )
            return GROW_STAGE_TIME * 2;

        if( Random( 1, 95 ) == 5 )
        {
            Map @ map = GetMap( item.MapId );
            if( !(map is null) )
            {
				//больше разных мобов
                map.AddNpc( 16, item.HexX, item.HexY, 0, null, null, "mob@_MobInit" );
                DeleteItem( item );
                return 0;
            }
        }
    }

    item.GROW_STAGE++;

    if( item.SELECTION <= 2 )
        item.SELECTION += Random( 0, 1 );
    else
        item.SELECTION += Random( -2, 2 );

    return plant.Release( item );
}

void _InitShit(Item& item, bool firstTime)
{
	//lolwhat?
}