#include "_utils.fos"
#include "_ltp.fos"

import void AffectRadiation( Critter& cr, int value ) from "radiation";
import void AffectPoison( Critter& cr, int value ) from "poison";
import void GenerateFire( Map@ map, int x, int y, int r ) from "combat";
import bool CheckGard( Map& map, uint16 hexX, uint16 hexY ) from "farm";

#define PLANT_RADCVET     ( 0 )
#define PLANT_CABBAGE     ( 1 )
#define PLANT_CORN        ( 2 )
#define PLANT_MAX         ( 3 )

#define TIME_EVENT		Val0
#define GROW_STAGE		Val1
#define SELECTION		Val2
#define PLANT_TYPE		Val3
#define WATERING		Val4
#define FERTILITY		Val5
#define PLANT_GAIN		Val6

#define isSEED			#(item)		( item.GROW_STAGE == 0 )

string debugInfo( Item@ item )
{
	if( !valid( item ) ) return "[null]";
	
	return 
		"\n#" + item.Id + " / " + item.GetProtoId() + " x" + item.GetCount() +
		"\n TIME_EVENT " + item.TIME_EVENT +
		"\n GROW_STAGE " + item.GROW_STAGE +
		"\n SELECTION " + item.SELECTION +
		"\n PLANT_TYPE " + item.PLANT_TYPE +
		"\n WATERING " + item.WATERING +
		"\n PLANT_GAIN " + item.PLANT_GAIN
		;
}

//~run gm speedupPlants value 0 0
///Можно использовать команду для тестов - ускорения роста. 
///Где value - количество секунд на каждую стадию роста.
//import uint getStageTime() from "plant";
uint getStageTime() //exported
{
	GameVar@ speedUpPlants = GetGlobalVar( GVAR_speedUpPlants );		
	if( !valid( speedUpPlants ) || speedUpPlants.GetValue() == 0 )
		return REAL_HOUR( 1 ); //Анури, вот твоё дефолтное время, остальное не трожь! Поздно, Бро, я начал кодить - Анури
	
	return( REAL_SECOND( speedUpPlants.GetValue() ) );
}

//~run plant go 0 0 0
void go( Critter& cr, int, int, int )
{
	Item@[] loot;
	cr.GetItems( -1, loot );
	DeleteItems( loot );
	
	cr.Say( SAY_EMOTE, "Одевает соломенную шляпу" );
	
	cr.AddItem( PID_RADCVET_SEED, 5 );
	cr.AddItem( PID_CABBAGE_SEED, 5 );
	cr.AddItem( PID_CORN_SEED, 	  5 );
	cr.AddItem( PID_SHOVEL, 1 );
	cr.AddItem( PID_GLASS_BOTTLE_FULL, 20 );
	cr.AddItem( PID_SHIT_SMALL, 20 );
	
	cr.ChangeCrType( CRTYPE_FARMER_UGLY );
}

void _InitShit(Item& item, bool firstTime)
{
	item.SetEvent( ITEM_EVENT_WALK, "ShitWalk");
}

#ifndef __PLANT_BEHAVIOR
	#define __PLANT_BEHAVIOR
	
	void _InitPlant( Item& item, bool firstTime )
	{
		UNSETFLAG( item.Flags, ITEM_FLAT );
		SETFLAG( item.Flags, ITEM_CAN_USE );
		
		if( firstTime )
		{
			
			uint proto = item.GetProtoId();
			
			if( item.GetType() != ITEM_TYPE_PLANT )
			{
				Log( "Not a plant #" + proto + " id " + item.Id + " [" + item.GetType() + "]" );
				return;
			}

			uint hashNum = item.PLANT_TYPE;
			CPlant@ plant = CheckCPlant( item );
			if( valid( plant ) )
				hashNum = plant.PlantType;
			else
			{
				item.GROW_STAGE = -1;
				/*
				cleanScripts( item );
				UNSETFLAG( item.Flags, ITEM_HIDDEN );
				item.ChangeProto( PID_SHIT_SMALL );
				item.Update();
				*/
			}
			item.PLANT_TYPE = hashNum;

			item.Update();
		}

		if( isSEED(item) )
			item.SetEvent( ITEM_EVENT_USE, "_PlantSeeds" );
		else
			item.SetEvent( ITEM_EVENT_USE, "_UsePlant" );

		item.SetEvent( ITEM_EVENT_SKILL, "_SkillPlant" );
		item.SetEvent( ITEM_EVENT_USE_ON_ME, "_OnMePlant" );

		item.Update();
	}
	
	bool CleanUpPlant( Critter& cr, Item& item )
	{
		CPlant @ plant = GetCPlant( item.PLANT_TYPE );
		if( !valid( plant ) )
			return inform( cr, "Растение мутировало, либо у вас не хватает навыков опознать его.\n\nКиньте скриншот в канал дискорда #баги. Информация:" + debugInfo( item ) );

		if( item.GROW_STAGE == int( plant.DeathCycle ) )
			return inform( cr, "Тут нет ничего ценного, остаётся пустить на перегной." );
		
		if( item.GROW_STAGE == int( plant.SeedCycle ) )
		{
			cr.AddItem( plant.BasePid, 2 );
			_SubItem( item, 1 );
			
			return action( cr, "Собирает семена" );
		}
		
		if( item.GROW_STAGE == int( plant.GainCycle ) )
		{
			cr.AddItem( plant.CollectPid, 1 );
			_SubItem( item, 1 );
			
			return action( cr, "Собирает плоды" );
		}
		
		return inform( cr, "Вы не знаете, что с этим делать."  );
	}
	
	bool _UsePlant(Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)
	{
		if( ( valid( onCritter ) && onCritter.Id != cr.Id ) || valid( onItem ) || valid( onScenery ) )
			return inform( cr, "\"Используйте\" объект в инвентаре или на себя." );

		return CleanUpPlant( cr, item );
	}
	
	bool _PlantSeeds(Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)
	{
		if( ( valid( onCritter ) && onCritter.Id != cr.Id ) || valid( onItem ) || valid( onScenery ) )
			return inform( cr, "\"Используйте\" объект в инвентаре или на себя." );
		
		Map@ map = cr.GetMap();
		if( !valid( map ) )
			return inform( cr, "На глобале нельзя." );

		if( !isSEED(item) )
			return inform( cr, "С семечком что-то не так, его уже не посадить." );

		Item@[] items;
		if( map.GetItems( cr.HexX, cr.HexY, items ) > 0 )
		{
			for( uint i = 0, l = items.length(); i < l; i++ )
				if( items[i].GetProtoId() != PID_SHADOW )
					return inform( cr, "Сначала очистите место, семечке нужно больше пространства для роста." );
		}

		uint time = 0;
		if( !CheckGard( map, cr.HexX, cr.HexY ) )
			return inform( cr, "Семечка сможет прорасти лишь на грядке." );
		
		_SubItem( item, 1 );

		Item@ seed = map.AddItem( cr.HexX, cr.HexY, item.GetProtoId(), 1 );
		seed.TIME_EVENT = CreateTimeEvent( __FullSecond + getStageTime(), "e_ProcessPlant", seed.Id, true );
		
		return action( cr, "Сеет" );
	}

	bool _OnMePlant( Item& plant, Critter& cr, Item@ usedItem )
	{
		if( !valid( usedItem ) )
			return inform( cr, "Киньте скриншот в канал дискорда #баги, указав что за предмет вы использовали на растении." );

		if( Fertilize( cr, plant, usedItem, false ) )
			return true;
		
		if( Watering( cr, plant, usedItem, false ) )
			return true;
		
		return inform( cr, "Вы не смогли сделать ничего толкового с растением." );
	}

	bool _SkillPlant( Item& item, Critter& cr, int skill )
	{
		if( skill == SKILL_PICK_ON_GROUND )
		{
			CPlant @ plant = GetCPlant( item.PLANT_TYPE );
			if( !valid( plant ) )
				return inform( cr, "Растение мутировало, либо у вас не хватает навыков опознать его.\n\nКиньте скриншот в канал дискорда #баги. Информация:" + debugInfo( item ) );

			if( item.GROW_STAGE == int( plant.DeathCycle ) )
			{
				cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 2 );
				cleanScripts( item );
				
				//CPlant@ plant = GetCPlant( item.PLANT_TYPE );
				//	if( valid( plant ) )
					plant.Kill( item );
				
				MoveItem( item, item.GetCount(), cr );
				
				return action( cr, "Собирает" );
			}
			
			if( item.GetProtoId() == PID_SHIT_SMALL )
			{
				cr.ParamBase[ CR_DIRTINESS ] += Random( 1, 4 );
				cleanScripts( item );
				MoveItem( item, item.GetCount(), cr );
				
				return action( cr, "Убирает перегной" );
			}			
				
			return AskCheckout( cr, item );
		}
		
		if( skill == SK_SCIENCE )
		{
			Watering( cr, item, null );
			return true;
		}

		if( skill == SK_REPAIR )
		{
			Fertilize( cr, item );
			return true;
		}
		
		if( skill == SK_TRAPS )
		{
			PlantPickup( cr, item );
			return true;
		}

		return false;
	}
	
#endif

#ifndef __PLANT_SUBFUNCTIONS
	#define __PLANT_SUBFUNCTIONS
	
	void cleanScripts( Item@ item )
	{
		if( !valid( item ) ) return;
		
		item.SetEvent( ITEM_EVENT_SKILL, null );
		item.SetEvent( ITEM_EVENT_USE_ON_ME, null );
		item.SetEvent( ITEM_EVENT_USE, null );
		item.SetEvent( ITEM_EVENT_DROP, null );
		
		if( item.TIME_EVENT != 0 )
		{
			EraseTimeEvent( item.TIME_EVENT );
			item.TIME_EVENT = 0;
		}
		if( isSEED( item) )
		{
			_InitPlant( item , true );
			return;
		}
		
	}

	bool AskCheckout( Critter& cr, Item@ item )
	{
		if( !valid( item ) ) 
			return inform( cr, "Киньте скриншот в канал дискорда #баги, указав что вы сделали перед появлением сообщения." );
		
		string stage = "Мутант";
		string[] stage_names = { "Семечка", "Побег", "Росток" };
		if( item.GROW_STAGE < int( stage_names.length() ) )
			stage = stage_names[item.GROW_STAGE];

		if( cr.Skill[SK_OUTDOORSMAN] + cr.Skill[SK_SCIENCE] < 200 )
			stage = "Вы недостаточно образованы, что бы понять что к чему.";
		else
		{
			CPlant@ plant = GetCPlant( item.PLANT_TYPE );
			if( !valid( plant ) )
				return inform( cr, "Растение мутировало, либо у вас не хватает навыков опознать его.\n\nКиньте скриншот в канал дискорда #баги. Информация:" + debugInfo( item ) );

			if( isSEED( item) )
				stage = "Семечка";

			if( item.GROW_STAGE == int( plant.SeedCycle ) )
				stage = "Семяносная";

			if( item.GROW_STAGE == int( plant.GainCycle ) && item.GROW_STAGE != int( plant.DeathCycle ) )
				stage = "Плодоносная";
			
			if( item.GROW_STAGE == int( plant.DeathCycle ) )
				stage = "Перегной";
		}
		
		cr.ParamBase[CR_VAL0] = int( item.Id );
		
		string[] data = { 
			"plant@answer_CHECKOUT", 
			"Информация о растении:\n" 
			+ "\nСтадия роста: " + stage
			+ "\nУрожайность: " + item.PLANT_GAIN
			+ "\nПолито: " + ( item.WATERING < 5 ? "нет" : "да" )
			+ "\nУдобрено: " + ( item.FERTILITY < 1 ? "нет" : "да" ), 
				"Поли" + ( item.WATERING < 5 ? "ть" : "то" ),
				"Удобр" + ( item.FERTILITY < 1 ? "ить" : "ено" ),
				"Собрать" };
		DIALOG_MENU( cr, data );
		
		return true;
	}

	void answer_CHECKOUT( Critter& cr, uint answerI, string& answerS )
	{
		Item@ plant = GetItem( cr.ParamBase[CR_VAL0] );
		if( !valid( plant ) ) 
		{
			inform( cr, "Киньте скриншот в канал дискорда #баги, указав что конкретно вы сделали перед появлением этого сообщения." );
			return;
		}
		
		switch( answerI )
		{
			case( 0 ): Watering( cr, plant, null ); return;
			case( 1 ): Fertilize( cr, plant );		break;
			case( 2 ): AskRemove( cr, plant.Id ); 	return;
			default: break;
		}
		
		AskCheckout( cr, plant );
	}

	bool AskRemove( Critter& cr, uint targetId )
	{
		cr.ParamBase[CR_VAL0] = targetId;
		cr.ShowScreen( SCREEN_DIALOGBOX, 1, "plant@answer_REMOVE" );
		cr.Say( SAY_DIALOGBOX_TEXT, "Вы уверены?" );
		cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "да" );
		return true;
	}

	void answer_REMOVE( Critter& cr, uint answerI, string& answerS )
	{
		PlantPickup( cr, GetItem( cr.ParamBase[CR_VAL0] ) );
	}

	bool PlantPickup( Critter& cr, Item@ plant )
	{
		if( !valid( plant ) )
			return inform( cr, "Киньте скриншот в канал дискорда #баги, указав что за растение вы попытались собрать." );

		cr.Animate( 0, ANIM2_PICKUP, null, false, true );
		cleanScripts( plant );//TODO: Проверить - не генерило-ли это баг с потерей поведения.
		
		if( isSEED(plant) )
		{
			cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 1 );
			cr.Say( SAY_EMOTE_ON_HEAD, "Выковыривает семена из земли" );
		}
		else
		{
			cr.Say( SAY_EMOTE_ON_HEAD, "Собирает" );
			plant.SetEvent( ITEM_EVENT_USE, "_UsePlant" );
			
			if( plant.PLANT_GAIN > 1 )
			{
				Item@ item = cr.AddItem( plant.GetProtoId(), plant.PLANT_GAIN );
				if( valid( item ) ) {
					item.PLANT_TYPE = plant.PLANT_TYPE;
					item.GROW_STAGE = plant.GROW_STAGE;
					item.SetEvent( ITEM_EVENT_USE, "_UsePlant" );
				}
				
				DeleteItem( plant );
				return true;
			}
		}
		
		MoveItem( plant, plant.GetCount(), cr );
		return true;
	}

#endif

#ifndef __PLANT_WATERING
	#define __PLANT_WATERING
	
	bool ltp_install_inited = false;
	void ltp_install_init()
	{
		LTPREG( LTP_WATERING, process_watering )
		ltp_install_inited = true;
	}

	bool start_watering( Critter& cr, Item& plant, Item@ usedItem, bool TMI = true )
	{
		if(!ltp_install_inited) {
			ltp_install_init();
		}
		int used_id = valid( usedItem ) ? usedItem.Id : 0;
		StartProcess( cr, LTP_WATERING, 0, used_id, plant.Id, 250 );//TODO: передать отсюда ещё и TMI
		
		///NOTE: Анури - звуки сюда.
		// uint[] values = { cr.Id };
		// CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ConsumptionSound", values, true);
		return true;
	}

	uint process_watering( Critter@ cr, int& param0, int& param1, int& param2 )
	{
		LTPROCESS( cr, param0, LTP_WATERING )
		
		Item@ plant = GetItem( param2 );
		Item@ usedItem = param1 != 0 ? GetItem( param1 ) : null;

		param0--;
			
		if( param0 < 0 )
		{
			bool TMI = true;//TODO: передать сюда ещё и TMI
			if( !watering_iteration( cr, plant, usedItem, TMI ) ) {
				return 0;
			}
			param1 = 0; //Что бы стакаемые закупоренные ёмкости не тратились одна-за-одной.
			param0 = Random( 0, 2 ) + Random( 0, 2 );
		}

		return 250;
	}
	
	bool watering_iteration( Critter& cr, Item& plant, Item@ usedItem, bool TMI = true )
	{		
		if( !valid( usedItem ) )
		{
			Item@[] open_bottles = getItems( cr, glass_bottles[2] );
			@usedItem = open_bottles.length() > 0 ? open_bottles[0] : null;
			if( !valid( usedItem ) )
			{
				Item@[] closed_bottles = getItems( cr, glass_bottles[1] );
				@usedItem = closed_bottles.length() > 0 ? closed_bottles[0] : null;
			}
			if( !valid( usedItem ) ) {
				return inform( cr, "Вам нечем полить растение.", false, TMI );
			}
		}

		if( plant.WATERING >= 5 ) {
			return inform( cr, "Растение полито.", false, TMI );
		}
		if( !SpillOut( usedItem, 1 ) ) {
			return inform( cr, "Вы не смогли нормально полить растение. " + itemDesc( usedItem ), false, TMI );		
		}
		plant.WATERING++;
		
		Map@ map = cr.GetMap();	
		map.PlaySound( "homebrew_pouring.ogg", cr.HexX, cr.HexY, 3 );
		
		return action( cr, "Поливает растение" );
	}
	
	bool Watering( Critter& cr, Item& plant, Item@ usedItem, bool TMI = true )
	{
		return start_watering( cr, plant, usedItem, TMI );
	}
#endif

bool Fertilize( Critter& cr, Item& plant )
{
	if( cr.CountItem( PID_SHIT_SMALL ) > 0 ) {
		return Fertilize( cr, plant, cr.GetItem( PID_SHIT_SMALL, -1 ) );
	}
	if( cr.CountItem( PID_SHIT_BIG ) > 0 ) {
		return Fertilize( cr, plant, cr.GetItem( PID_SHIT_BIG, -1 ) );
	}
	if( cr.CountItem( PID_SHIT_HUGE ) > 0 ) {
		return Fertilize( cr, plant, cr.GetItem( PID_SHIT_HUGE, -1 ) );
		}
	return inform( cr, "У вас нет удобрений.", false );
}

bool Fertilize( Critter& cr, Item& plant, Item@ usedItem, bool TMI = true )
{
	if( !valid( usedItem ) ) {
		return inform( cr, "Ваши удобрения не подходят.", false, TMI );
	}
	uint pid = usedItem.GetProtoId();
	
	if( pid != PID_SHIT_SMALL && pid != PID_SHIT_BIG && pid != PID_SHIT_HUGE ) {
		return inform( cr, "Вы не смогли удобрить растение.", false, TMI );
	}
	cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 3 );
	cr.DeleteItem( pid, 1 );
	plant.FERTILITY += 1;

	Map@ map = cr.GetMap();	
	map.PlaySound( "ROBE.ACM", cr.HexX, cr.HexY, 2 );	
	return action( cr, "Удобряет растение" );
}

#ifndef __PLANT_CLASSES
	#define __PLANT_CLASSES
	
	int CheckStage( uint pid )
	{
		switch( pid )
		{
			case( PID_RADCVET_SEED ): 	
			case( PID_CABBAGE_SEED ):
			case( PID_CORN_SEED ): 	
				return 0;
			case( PID_RADCVET_SMALL ): 
			case( PID_CABBAGE_TINY ):
			case( PID_CORN_TINY ): 
				return 1;
			case( PID_RADCVET_RIPE): 
			case( PID_CABBAGE_SMALL):
			case( PID_CORN_SMALL): 
				return 2;
			case( PID_DEAD_RADCVET ): 
			case( PID_CABBAGE_RIPE ):
			case( PID_CORN_YOUNG): 
				return 3;
			case( PID_DEAD_CABBAGE ):
			case( PID_CORN_RIPE ): 
				return 4;
			case( PID_DEAD_CORN ):
				return 5;
		}
		return -1;
	}

	int CheckType( uint pid )
	{
		switch( pid )
		{
			case( PID_RADCVET_SEED ): 	
			case( PID_RADCVET_SMALL): 
			case( PID_RADCVET_RIPE ): 
			case( PID_DEAD_RADCVET ):
				return PID_RADCVET_SEED;
				
			case( PID_CABBAGE_SEED ):
			case( PID_CABBAGE_TINY ):
			case( PID_CABBAGE_SMALL):
			case( PID_CABBAGE_RIPE ):
			case( PID_DEAD_CABBAGE ):
				return PID_CABBAGE_SEED;
				
			case( PID_CORN_SEED ): 	
			case( PID_CORN_TINY ): 
			case( PID_CORN_SMALL): 
			case( PID_CORN_YOUNG): 
			case( PID_CORN_RIPE ): 
			case( PID_DEAD_CORN ):
				return PID_CORN_SEED;
		}
		
		return 0;
	}

	CPlant@ CheckCPlant( Item& item )
	{
		uint pid = item.GetProtoId();
		
		item.GROW_STAGE = CheckStage( pid );
		item.PLANT_TYPE = CheckType( pid );

		return GetCPlant( item.PLANT_TYPE );
	}
	
	
	CPlant@ GetCPlant( uint plantNum )
	{
		switch( plantNum )
		{
			case( PID_RADCVET_SEED ): 	return CPlant( PID_RADCVET_SEED, 	2, 3, 4, PID_RADCVET_SEED, 	PID_RADCVET		 );
			case( PID_CABBAGE_SEED ): 	return CPlant( PID_CABBAGE_SEED, 	2, 3, 4, PID_CABBAGE_SEED, 	PID_CABBAGE 	 );
			case( PID_CORN_SEED ): 		return CPlant( PID_CORN_SEED, 		3, 4, 5, PID_CORN_SEED, 	PID_CORN 		 );
		}
		return null;
	}

	class CPlant
	{
		uint PlantType;
		
		uint DeathCycle;
		uint SeedCycle;
		uint GainCycle;
		
		uint BasePid;
		uint CollectPid;

		CPlant( uint PlantType, uint SeedCycle, uint GainCycle, uint DeathCycle, uint BasePid, uint CollectPid )
		{
			this.PlantType = PlantType;
			
			this.DeathCycle = DeathCycle;
			this.SeedCycle = SeedCycle;
			this.GainCycle = GainCycle;
			
			this.BasePid = BasePid;
			this.CollectPid = CollectPid;
		}

		uint Release( Item& item )
		{
			ChangePic( item );

			switch( item.GROW_STAGE )
			{
				case 1: return Cycle1( item );
				case 2: return Cycle2( item );
				case 3: return Cycle3( item );
				case 4: return Cycle4( item );
				case 5: return Cycle5( item );
			}
			return 0;
		}

		bool CheckWater( Item& item )
		{
			Map@ currentMap = GetMap( item.MapId );
			int rain = currentMap.GetRain();
			if( rain > 0 )
				item.WATERING = 5;
			
			if( item.GROW_STAGE > 1 && ( item.WATERING < 1 ) )
			{
				Kill( item );
				return false;
			}
			return true;
		}

		bool Kill( Item& item )
		{
			CPlant@ plant = GetCPlant( item.PLANT_TYPE );
			if( !valid( plant ) ) return false;

			UNSETFLAG( item.Flags, ITEM_HIDDEN );

			item.FERTILITY = 0;
			item.PLANT_GAIN = 0;
			item.GROW_STAGE = plant.DeathCycle;
			ChangePic( item );
			
			return true;
		}

		uint MakeShit( Item& item )
		{
			Kill( item );
			
			UNSETFLAG( item.Flags, ITEM_HIDDEN );
			item.ChangeProto( PID_SHIT_SMALL );
			item.Update();
			return 0;
		}

		void IncreaseFruits( Item& item )
		{
			item.PLANT_GAIN += 1;
		}

		void ChangePic( Item& item )
		{
			item.ChangeProto( BasePid + item.GROW_STAGE );
			item.Update();
		}
		
		uint CycleDead( Item& item )
		{
			return getStageTime();
		}

		uint Cycle1( Item& item ) //Семечка становится невидимой.
		{
			SETFLAG( item.Flags, ITEM_HIDDEN );
			item.Update();

			return getStageTime();
		}

		uint Cycle2( Item& item ) //Пробивается молодой побег.
		{
			IncreaseFruits( item );
			
			UNSETFLAG( item.Flags, ITEM_HIDDEN );
			item.Update();

			return getStageTime();
		}

		uint Cycle3( Item& item ) //Побег становится крупней.
		{
			if( item.FERTILITY > 0 && Random( 0, 1 ) == 0 )
				IncreaseFruits( item );

			item.Update();

			return getStageTime();
		}

		uint Cycle4( Item& item ) //Крупные побеги всходят, маленькие - стареют.
		{
			return getStageTime();
		}

		uint Cycle5( Item& item ) //Растение умирает и гниёт.
		{
			return getStageTime();
		}
	}

	uint e_ProcessPlant( uint[] @ values )
	{
		if( !valid( values ) || values.length() != 1 ) {
			return 0;
		}
		Item@ item = GetItem( values[ 0 ] );
		if( !valid( item ) ) { return 0;
		}
		if( item.GetType() != ITEM_TYPE_PLANT ) { return 0;
		}
		CPlant@ plant = GetCPlant( item.PLANT_TYPE );
		if( !valid( plant ) ) { return 0;
		}
		if( isSEED( item ) ) {
			item.SetEvent( ITEM_EVENT_DROP, null );
		} else if( item.GROW_STAGE >= int( plant.DeathCycle ) ) {
			return plant.MakeShit( item );
		}
		if( item.GROW_STAGE > 0 )
		{
			if( !plant.CheckWater( item ) ) {
				return getStageTime();
			}
			if( Random( 1, 95 ) == 5 )
			{
				Map @ map = GetMap( item.MapId );
				if( valid(map) )
				{
					uint[] mobs = { 2200, 2201, 2202, 2203, 2204, 2217 };
					map.AddNpc( mobs[ Random( 0, mobs.length() - 1 ) ], item.HexX, item.HexY, 0, null, null, "mob@_MobInit" );
					DeleteItem( item );
					return 0;
				}
			}
		}

		item.GROW_STAGE++;

		return plant.Release( item );
	}

#endif

// shit_walk_event
void ShitWalk( Item& item, Critter& cr, bool entered, uint8 dir )
{
	if( entered 
		&& ( cr.Param[ ST_GENDER ] == 0 || cr.Param[ ST_GENDER ] == 1 ) 
		&& cr.Stat[ ST_LOCOMOTION_TYPE ] != LOCOMOTION_FLY 
		&& ( Random( 1,100 ) > ( cr.ParamBase[ST_LUCK] * 10 - 5 ) ) )
    {
		if( Random( 0,1 ) == 1 ) {
			cr.MoveToDir( cr.Dir );
		}
		
		if( !cr.IsKnockout() && cr.Stat[ST_CURRENT_AP] > 0 )
		{
			cr.Say(SAY_EMOTE, "Поскользнулся на чем-то гадком");
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 100, cr.HexX, cr.HexY );
		}
		
		cr.ParamBase[ CR_DIRTINESS ] += Random( 5, 10 );
		uint roll = Random( 1, 100 );
		uint chance = ( cr.ParamBase[ST_AGILITY] * 10 ) - 5;
		if( roll > chance )
		{
			Item@[] droppedItemsHand;
			Item@[] droppedItemsMisc;
			uint itemscount = cr.GetItems( SLOT_HAND1, droppedItemsHand );
			uint itemscount1 = cr.GetItems( SLOT_MISC, droppedItemsMisc );
			
			string warning = "Вы выронили: ";
			
			if( itemscount > 0 )
			{	
				cr.MoveItem( droppedItemsHand[ 0 ].Id, itemscount, SLOT_GROUND );
				uint droppedItemsHandPid = droppedItemsHand[ 0 ].GetProtoId();
				warning += "|0xFFFF00 " + GetMsgStr( 0, TEXTMSG_ITEM, droppedItemsHandPid * 100 );
				cr.Say(SAY_NETMSG, "" + warning + " |0x3CF800 из рук.");
				Item@ lampCheck = droppedItemsHand[ 0 ];
				if( lampCheck.GetProtoId() == PID_OIL_LAMP && lampCheck.Val0 > 0 )
				{
					uint x = lampCheck.HexX, y = lampCheck.HexY;
					Map@ map = cr.GetMap();
					GenerateFire( map, x, y, 1 );
					_SubItem( lampCheck , 1 );
				}
			}
			if( itemscount1 > 0 )
			{	
				Item@ lampCheck = droppedItemsMisc[ 0 ];
				if( lampCheck.GetProtoId() == PID_OIL_LAMP && lampCheck.Val0 > 0 )
				{
					cr.MoveItem( droppedItemsMisc[ 0 ].Id, itemscount1, SLOT_GROUND );
					uint droppedItemPid = droppedItemsMisc[ 0 ].GetProtoId();
					warning += "" + GetMsgStr( 0, TEXTMSG_ITEM, droppedItemPid * 100 );
					cr.Say(SAY_NETMSG, "" + warning );
					uint x = lampCheck.HexX, y = lampCheck.HexY;
					Map@ map = cr.GetMap();
					GenerateFire( map, x, y, 1 );
					_SubItem( lampCheck , 1 );
				}
			}
		}			
	}
}
