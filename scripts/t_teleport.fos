#ifndef T_TELEPORT
#define T_TELEPORT

#include "_utils.fos"
#include "effects_h.fos"
#include "outposts_h.fos"

void t_EnterTeleport( Critter& cr, Scenery& trigger, bool entered, uint8 dir, int mapPid, int entranceNum, int dir2 )
{
    if( cr.Timeout[ TO_TRANSFER ] > 0 )
	{
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_TRANSFER_WAIT );
        return;
    }

	Map@ map = GetMapByPid( mapPid, 0 );
	Location@ loc = null;
	
	if( entered )
	{
		if( mapPid == MAP_TLJ_PLAYER_ROOM )
		{
			Map@ currMap = cr.GetMap();
			Location@ currLoc = valid(currMap) ? currMap.GetLocation() : null;
			if( valid(currLoc) && currLoc.GetProtoId() == LOCATION_PLAYER_ROOM )
			{
				@map = LeaveOutpost(cr);
			}
			else
			{
				@map = GetMyOutpostMap(cr);
			}
		}
		else if( mapPid == MAP_RAIDERS_CAVE || mapPid == MAP_HIDEOUT )
		{				
			if( cr.KarmaBase[ KARMA_MAN_WRIGHT ] != 1 && !cr.IsKnockout() && !cr.IsDead() )
			{
				return;
			}
		}

		if( !valid( map ) )
		{
			return;
		}
				
		FlushScreen( cr, true, 3000 );
		cr.TransitToMap( map.Id, entranceNum );
		cr.ParamBase[ CR_GRID_TRANSFER_X ] = cr.HexX;
		cr.ParamBase[ CR_GRID_TRANSFER_Y ] = cr.HexY;
		cr.SetDir( dir2 );
		
		@ loc = map.GetLocation();
		cr.SetWorldPos( loc.WorldX, loc.WorldY );
	}
}

#endif //T_TELEPORT