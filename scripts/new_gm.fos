class MenuGMCritter: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritter( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "Modes" ) )
		{
			MenuGMCritterNPCFlags@ menu_modes = MenuGMCritterNPCFlags( crId );
			menu_modes.level = level + 1;
			return menu.OpenChild( "Level " + menu_modes.level, menu_modes );
		}
		if( menu.Button( "Parameters" ) )
		{

		}
		if( menu.Button( "NPC Flags" ) )
		{

		}
		if( menu.Button( "Inventory" ) )
		{

		}
		if( menu.Button( "Prone/Get up" ) )
		{
			unsafe_sleep( cr, Random( 0, 1 ), 1, 0, null, null );
			gm.Say( SAY_NETMSG, "Target " + ( cr.ParamBase[ CR_SLEEPING_STATE ] != 0 ? "can't get up" : "will get up soon" ) + "." );
			return true;
		}
		if( menu.ButtonMsg( TEXTMSG_TEXT, STR_GMBTN_SKILL_ROLL ) )
		{
			StartPlayerMenuSkillRolls( player, cr );
		}
		if( menu.Button( "Give item PID" ) )
		{

		}
		if( menu.Button( "Psy-mode" ) )
		{

		}
		if( menu.Button( "Full heal" ) )
		{
			FullHeal( cr );
			unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " healed NPC " + cr.Name + " " + cr.Id, null );
			return true;
		}
		if( menu.Button( "WALK " + cr.StatBase[ST_WALK_TIME] ) )
		{

		}
		if( menu.Button( "RUN " + cr.StatBase[ST_RUN_TIME] ) )
		{

		}
		if( menu.Button( ( cr.ParamBase[ CR_FIXED_SPEED ] != 0 ? "" : "UN" ) + "FIXED SPEED" ) )
		{
			cr.ParamBase[ CR_FIXED_SPEED ] = cr.ParamBase[ CR_FIXED_SPEED ] == 0 ? 1 : 0;
			return true;
		}
		if( menu.Button( "Name NPC" ) )
		{

		}
		if( menu.Button( ( cr.ParamBase[ CR_AFK_MODE ] == 0 ? "Enable " : "Disable " ) + "AFK Mode") )
		{

		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";
		Critter@ cr = GetCritter(crId);

		if(valid(cr))
		{
			string ai_script = "\n|0x3CF800 AI_Script: |0xFFFF00 "; 
			uint script_id = cr.GetScriptId();
			ai_script += script_id > 0 ? GetScriptName( script_id ) : "none!";

			info = "NPC, PID #" + cr.GetProtoId() + ", dialog #" + cr.ParamBase[ ST_DIALOG_ID ] + ".\n" +
					"CRTYPE " + cr.StatBase[ST_BASE_CRTYPE] + " W " + cr.StatBase[ST_WALK_TIME] + " R " + cr.StatBase[ST_RUN_TIME] +
					( cr.ParamBase[ CR_FIXED_SPEED ] != 0 ? " FIXED " : "" ) + "\nTeam Id: |0xFFFF00 " + cr.Stat[ ST_TEAM_ID ] + " |0x3CF800 Aggression: |0xFFFF00 " + ( cr.ParamBase[ CR_IS_AGGRESSIVE ] == 0 ? "Passive" : "Active" )
					+ ai_script;
			
			if( cr.IsDead() )
			{
				info += "\nKilled by critter #" + cr.StatBase[ ST_KILLER_PERSON ];
				if( cr.StatBase[ ST_KILLER_PERSON ] != 0 )
				{
					Critter@ killer = GetCritter( cr.StatBase[ ST_KILLER_PERSON ] );
					if( !valid( killer ) )
					{
						info += " [N/A]";
					}
					else
					{
						if( killer.IsPlayer() )
						{
							info += " [player]:\n\t'" + GetPlayerName( killer.Id ) + "'";
						}
						else
						{
							info += " [mob]\nDLG " + killer.Stat[ST_DIALOG_ID] + " PID " + killer.GetProtoId() + "\nBODYTYPE " + killer.StatBase[ ST_BODY_TYPE ] + " SKIN " + killer.StatBase[ ST_BASE_CRTYPE ];
						}
					}
				}
				if( cr.StatBase[ ST_KILLER_WEAPON ] != 0 )
				{
					info += ", " + GetConstantName(CONSTANTS_ITEM, cr.StatBase[ ST_KILLER_WEAPON ]);
				}
			}
		}
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterNPCFlags: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterNPCFlags( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "" + cr.ModeBase[ MODE_NO_HOME ] + " - MODE_NO_HOME" ) )
		{
			cr.ModeBase[ MODE_NO_HOME ] = (cr.Mode[ MODE_NO_HOME ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_ENEMY_STACK ] + " - MODE_NO_ENEMY_STACK" ) )
		{
			cr.ModeBase[ MODE_NO_ENEMY_STACK ] = (cr.Mode[ MODE_NO_ENEMY_STACK ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_LOOT ] + " - MODE_NO_LOOT" ) )
		{
			cr.ModeBase[ MODE_NO_LOOT ] = (cr.Mode[ MODE_NO_LOOT ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_STEAL ] + " - MODE_NO_STEAL" ) )
		{
			cr.ModeBase[ MODE_NO_STEAL ] = (cr.Mode[ MODE_NO_STEAL ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_PUSH ] + " - MODE_NO_PUSH" ) )
		{
			cr.ModeBase[ MODE_NO_HOME ] = (cr.Mode[ MODE_NO_HOME ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_WALK ] + " - MODE_NO_WALK" ) )
		{
			cr.ModeBase[ MODE_NO_WALK ] = (cr.Mode[ MODE_NO_WALK ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_RUN ] + " - MODE_NO_RUN" ) )
		{
			cr.ModeBase[ MODE_NO_RUN ] = (cr.Mode[ MODE_NO_RUN ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_LOOSE_LIMBS ] + " - MODE_NO_LOOSE_LIMBS" ) )
		{
			cr.ModeBase[ MODE_NO_LOOSE_LIMBS ] = (cr.Mode[ MODE_NO_LOOSE_LIMBS ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_KNOCK ] + " - MODE_NO_KNOCK" ) )
		{
			cr.ModeBase[ MODE_NO_KNOCK ] = (cr.Mode[ MODE_NO_KNOCK ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_BARTER ] + " - MODE_NO_BARTER" ) )
		{
			cr.ModeBase[ MODE_NO_BARTER ] = (cr.Mode[ MODE_NO_BARTER ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_BARTER_ONLY_CASH ] + " - MODE_BARTER_ONLY_CASH" ) )
		{
			cr.ModeBase[ MODE_BARTER_ONLY_CASH ] = ( cr.ModeBase[ MODE_BARTER_ONLY_CASH ] + 1 ) % 3;
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_TALK ] + " - MODE_NO_TALK" ) )
		{
			cr.ModeBase[ MODE_NO_TALK ] = (cr.Mode[ MODE_NO_TALK ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_UNLIMITED_AMMO ] + " - MODE_UNLIMITED_AMMO" ) )
		{
			cr.ModeBase[ MODE_UNLIMITED_AMMO ] = (cr.Mode[ MODE_UNLIMITED_AMMO ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_INVULNERABLE ] + " - MODE_INVULNERABLE" ) )
		{
			cr.ModeBase[ MODE_INVULNERABLE ] = (cr.Mode[ MODE_INVULNERABLE ] == 0 ? 1 : 0);
			return true;
		}
		if( menu.Button( "" + cr.ModeBase[ MODE_QUESTGIVER ] + " - MODE_QUESTGIVER" ) )
		{
			cr.ModeBase[ MODE_QUESTGIVER ] = (cr.Mode[ MODE_QUESTGIVER ] == 0 ? 1 : 0);
			return true;
		}
		if( menu.Button( "" + cr.ModeBase[ MODE_NO_CORPSE_DECAY ] + " - MODE_NO_CORPSE_DECAY" ) )
		{
			cr.ModeBase[ MODE_NO_CORPSE_DECAY ] = (cr.Mode[ MODE_NO_CORPSE_DECAY ] == 0 ? 1 : 0);
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "NPC Flags:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStats: DefaultMenuHandler
{
	uint crId
	uint level;
	
    MenuGMCritterStats( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "SPECIAL" ) )
		{
			MenuGMCritterStatsSPECIAL@ menu_special = MenuGMCritterStatsSPECIAL( crId );
			menu_special.level = level + 1;
			return menu.OpenChild( "Level " + menu_special.level, menu_special );
		}
        if( menu.Button( "SKILLS" ) )
		{
			MenuGMCritterStatsSkills@ menu_skills = MenuGMCritterStatsSkills( crId );
			menu_skills.level = level + 1;
			return menu.OpenChild( "Level " + menu_skills.level, menu_skills );
		}
        if( menu.Button( "Traumas" ) )
		{
			MenuGMCritterStatsTraumas@ menu_traumas = MenuGMCritterStatsTraumas( crId );
			menu_traumas.level = level + 1;
			return menu.OpenChild( "Level " + menu_traumas.level, menu_traumas );
		}
        if( menu.Button( "Modes" ) )
		{
			MenuGMCritterStatsModes@ menu_modes = MenuGMCritterStatsModes( crId );
			menu_modes.level = level + 1;
			return menu.OpenChild( "Level " + menu_modes.level, menu_modes );
		}
        if( menu.Button( "Traits" ) )
		{
			MenuGMCritterStatsTraits@ menu_traits = MenuGMCritterStatsTraits( crId );
			menu_traits.level = level + 1;
			return menu.OpenChild( "Level " + menu_traits.level, menu_traits );
		}
        if( menu.Button( "Skin/bodytype" ) )
		{

		}
        if( menu.ButtonSay( "Faction", "ST_FACTION" ) )
		{
			string factionStr = menu.GetSayValue();
			int factionNum;
			
			if( factionStr == "0" || factionStr == " " )
			{
				factionNum = 0;
			}
			else
			{
				factionNum = GetStrHash( factionStr );
				if( GetName( factionNum ) == "" )
				{
					gm.Say( SAY_NETMSG, "Faction does not exist" );
				}
			}

			GMChangeParam( gm, cr, ST_FACTION, factionNum );
			
			return true;
		}
        if( menu.Button( "Extra Param" ) )
		{

		}
        if( menu.Button( "Lex" ) )
		{

		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";

		Critter@ cr = GetCritter(crId);

		if(valid(cr))
		{
			string[] SPECIAL_names = { "S", "P", "E", "C", "I", "A", "L" };
			info = "param, protoId - " + cr.GetProtoId() + ", dialog - " + cr.ParamBase[ ST_DIALOG_ID ] + "\n";
			for( uint i = 0; i < SPECIAL_names.length(); i++ )
			{
				info += SPECIAL_names[i] + cr.Param[ ST_STRENGTH + i ] + " ";
			}
			info += "\nLVL " + cr.StatBase[ ST_LEVEL ] + 
					" EXP " + cr.StatBase[ ST_EXPERIENCE ] + 
					" SP " + cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] + 
					" PP " + cr.StatBase[ ST_UNSPENT_PERKS ];
		}

		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsSPECIAL: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsSPECIAL( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		if( menu.ButtonSay( "" + cr.ParamBase[ ST_STRENGTH ] + " - strength", "Strength" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_STRENGTH, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ ST_PERCEPTION ] + " - perception", "Perception" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_PERCEPTION, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ ST_ENDURANCE ] + " - endurance", "Endurance" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_ENDURANCE, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ ST_CHARISMA ] + " - charisma", "Charisma" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_CHARISMA, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ ST_INTELLECT ] + " - intellect", "Intellect" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_INTELLECT, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ ST_AGILITY ] + " - agility", "Agility" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_AGILITY, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ ST_LUCK ] + " - luck", "Luck" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_LUCK, num);
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "SPECIAL:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsSkills: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsSkills( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		if( menu.ButtonSay( "" + cr.SkillBase[ SK_SMALL_GUNS ] + " - small guns", "small guns" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_SMALL_GUNS, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_MEDIUM_GUNS ] + " - medium guns", "medium guns" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_BIG_GUNS, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_BIG_GUNS ] + " - big guns", "big guns" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_BIG_GUNS, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_UNARMED ] + " - unarmed", "unarmed" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_UNARMED, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_MELEE_WEAPONS ] + " - melee", "melee" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_MELEE_WEAPONS, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_THROWING ] + " - thrown", "thrown" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_THROWING, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_FIRST_AID ] + " - first aid", "first aid" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_FIRST_AID, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_DOCTOR ] + " - doctor", "doctor" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_DOCTOR, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_SNEAK ] + " - sneak", "sneak" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_SNEAK, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_LOCKPICK ] + " - lockpick", "lockpick" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_LOCKPICK, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_STEAL ] + " - stealing", "stealing" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_STEAL, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_TRAPS ] + " - traps", "traps" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_TRAPS, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_SCIENCE ] + " - science", "science" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_SCIENCE, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_REPAIR ] + " - repair", "repair" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_REPAIR, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_SPEECH ] + " - speach", "speach" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_SPEECH, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_BARTER ] + " - trade", "trade" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_BARTER, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_GAMBLING ] + " - gambling", "gambling" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_GAMBLING, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.SkillBase[ SK_OUTDOORSMAN ] + " - outdorsman", "outdorsman" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, SK_OUTDOORSMAN, num);
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Skills:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsTraumas: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsTraumas( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		string sayStr = "";
		int num = 0;

		if( menu.Button( "" + cr.DamageBase[ DAMAGE_EYE ] + " - Eyes" ) )
		{
			cr.ParamBase[ DAMAGE_EYE ] = (cr.Param[ DAMAGE_EYE ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.DamageBase[ DAMAGE_RIGHT_ARM ] + " - left arm" ) )
		{
			cr.ParamBase[ DAMAGE_RIGHT_ARM ] = (cr.Param[ DAMAGE_RIGHT_ARM ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.DamageBase[ DAMAGE_LEFT_ARM ] + " - right arm" ) )
		{
			cr.ParamBase[ DAMAGE_LEFT_ARM ] = (cr.Param[ DAMAGE_LEFT_ARM ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.DamageBase[ DAMAGE_RIGHT_LEG ] + " - right leg" ) )
		{
			cr.ParamBase[ DAMAGE_RIGHT_LEG ] = (cr.Param[ DAMAGE_RIGHT_LEG ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.DamageBase[ DAMAGE_LEFT_LEG ] + " - left leg" ) )
		{
			cr.ParamBase[ DAMAGE_LEFT_LEG ] = (cr.Param[ DAMAGE_LEFT_LEG ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) + " - bullet wound" ) )
		{
			ChangeStatus( cr, CR_STATUS_BULLET_OVER, 0, !FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) );
			return true;
		}
        if( menu.Button( "" + FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) + " - heavy wound" ) )
		{
			ChangeStatus( cr, CR_STATUS_HEAVY_DMG, 0, !FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) );
			return true;
		}
        if( menu.ButtonSay( "" + cr.StatBase[ ST_BLEED ] + " - bleeding", "bleeding" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, ST_BLEED, num);
			return true;
		}
        if( menu.ButtonSay( "" + cr.ParamBase[ CR_DIRTINESS ] + " - dirt", "dirt" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, CR_DIRTINESS, num);
			return true;
		}
        if( menu.Button( "medical check" ) )
		{
			ProccessDoctorSkill( player, cr, true );
			return false;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Traumas:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsModes: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsModes( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "" + cr.ModeBase[ MODE_NO_PVP ] + " - NO_PVP" ) )
		{
			cr.ModeBase[ MODE_NO_PVP ] = (cr.Mode[ MODE_NO_PVP ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_INVULNERABLE ] + " - INVULNERABLE " ) )
		{
			cr.ModeBase[ MODE_INVULNERABLE ] = (cr.Mode[ MODE_INVULNERABLE ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_LOOT ] + " - NO_LOOT" ) )
		{
			cr.ModeBase[ MODE_NO_LOOT ] = (cr.Mode[ MODE_NO_LOOT ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_STEAL ] + " - NO_STEAL" ) )
		{
			cr.ModeBase[ MODE_NO_STEAL ] = (cr.Mode[ MODE_NO_STEAL ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_PUSH ] + " - NO_PUSH" ) )
		{
			cr.ModeBase[ MODE_NO_PUSH ] = (cr.Mode[ MODE_NO_PUSH ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_WALK ] + " - NO_WALK" ) )
		{
			cr.ModeBase[ MODE_NO_WALK ] = (cr.Mode[ MODE_NO_WALK ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_RUN ] + " - NO_RUN" ) )
		{
			cr.ModeBase[ MODE_NO_RUN ] = (cr.Mode[ MODE_NO_RUN ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_LOOSE_LIMBS ] + " - NO_LOOSE_LIMBS" ) )
		{
			cr.ModeBase[ MODE_NO_LOOSE_LIMBS ] = (cr.Mode[ MODE_NO_LOOSE_LIMBS ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ModeBase[ MODE_NO_KNOCK ] + " - NO_KNOCK" ) )
		{
			cr.ModeBase[ MODE_NO_KNOCK ] = (cr.Mode[ MODE_NO_KNOCK ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.ParamBase[ QST_MEDIUM ] + " - PSY_MODE" ) )
		{
			MenuGMCritterStatsPsy@ menu_psy = MenuGMCritterStatsPsy( crId );
			menu_psy.level = level + 1;
			return menu.OpenChild( "Level " + menu_psy.level, menu_psy );
		}
		if( menu.Button( "" + cr.ModeBase[ MODE_UNLIMITED_AMMO ] + " - UNLIMITED_AMMO" ) )
		{
			cr.ModeBase[ MODE_UNLIMITED_AMMO ] = (cr.Mode[ MODE_UNLIMITED_AMMO ] == 0 ? 1 : 0);
			return true;
		}
		if( menu.Button( "" + cr.ModeBase[ MODE_QUESTGIVER ] + " - QUESTGIVER" ) )
		{
			cr.ModeBase[ MODE_QUESTGIVER ] = (cr.Mode[ MODE_QUESTGIVER ] == 0 ? 1 : 0);
			return true;
		}
		if( menu.Button( "" + cr.ModeBase[ MODE_NO_CORPSE_DECAY ] + " - MODE_NO_CORPSE_DECAY" ) )
		{
			cr.ModeBase[ MODE_NO_CORPSE_DECAY ] = (cr.Mode[ MODE_NO_CORPSE_DECAY ] == 0 ? 1 : 0);
			return true;			
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "Player flags:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsPsy: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsPsy( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "0 - Default" ) )
		{
			GMChangePsyMode(cr, 0);
			return true;
		}
        if( menu.Button( "1 - Beast Master (disabled)" ) )
		{
			GMChangePsyMode(cr, 1);
			return true;
		}
        if( menu.Button( "2 - Faceless" ) )
		{
			GMChangePsyMode(cr, 2);
			return true;
		}
        if( menu.Button( "3 - Voice" ) )
		{
			GMChangePsyMode(cr, 3);
			return true;			
		}
        if( menu.ButtonSay( "4 - Mimic", "ID" ) )
		{
			sayStr = menu.GetSayValue();
			StrToInt(sayStr, num);
			GMPanelChangeParam(gm, cr, QST_MEDIUM, num);
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "";
		Critter@ cr = GetCritter(crId);
		if(valid(cr))
		{
			info = "Psy-mode: " + cr.ParamBase[ QST_MEDIUM ];
		}
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

class MenuGMCritterStatsTraits: DefaultMenuHandler
{
	uint crId;
	uint level;
	
    MenuGMCritterStatsTraits( uint crId )
	{
		this.crId = crId;
		this.level = 1;
    }

    bool MenuUpdate( Critter& gm, iDialogBox& menu )
	{
		Critter@ cr = GetCritter(crId);
		
		if(!valid(cr))
		{
			return false;
		}

		if( menu.Button( "" + cr.TraitBase[ TRAIT_FAST_METABOLISM ] + " - FAST_METABOLISM" ) )
		{
			cr.TraitBase[ TRAIT_FAST_METABOLISM ] = (cr.Trait[ TRAIT_FAST_METABOLISM ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_BRUISER ] + " - BRUISER" ) )
		{
			cr.TraitBase[ TRAIT_BRUISER ] = (cr.Trait[ TRAIT_BRUISER ] == 0 ? 1 : 0);
			return true;			
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_SMALL_FRAME ] + " - SMALL_FRAME" ) )
		{
			cr.TraitBase[ TRAIT_SMALL_FRAME ] = (cr.Trait[ TRAIT_SMALL_FRAME ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_SADIST ] + " - SADIST" ) )
		{
			cr.TraitBase[ TRAIT_SADIST ] = (cr.Trait[ TRAIT_SADIST ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_FINESSE ] + " - FINESSE" ) )
		{
			cr.TraitBase[ TRAIT_FINESSE ] = (cr.Trait[ TRAIT_FINESSE ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_KAMIKAZE ] + " - KAMIKAZE" ) )
		{
			cr.TraitBase[ TRAIT_KAMIKAZE ] = (cr.Trait[ TRAIT_KAMIKAZE ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_HEAVY_HANDED ] + " - HEAVY_HANDED" ) )
		{
			cr.TraitBase[ TRAIT_HEAVY_HANDED ] = (cr.Trait[ TRAIT_HEAVY_HANDED ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_FAST_SHOT ] + " - FAST_SHOT" ) )
		{
			cr.TraitBase[ TRAIT_FAST_SHOT ] = (cr.Trait[ TRAIT_FAST_SHOT ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_BLOODY_MESS ] + " - BLOODY MESS" ) )
		{
			cr.TraitBase[ TRAIT_BLOODY_MESS ] = (cr.Trait[ TRAIT_BLOODY_MESS ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_NERD ] + " - NERD" ) )
		{
			cr.TraitBase[ TRAIT_NERD ] = (cr.Trait[ TRAIT_NERD ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_SURE_FOOTED ] + " - SURE FOOTED" ) )
		{
			cr.TraitBase[ TRAIT_SURE_FOOTED ] = (cr.Trait[ TRAIT_SURE_FOOTED ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_CHEM_RELIANT ] + " - CHEM_RELIANT" ) )
		{
			cr.TraitBase[ TRAIT_CHEM_RELIANT ] = (cr.Trait[ TRAIT_CHEM_RELIANT ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_CHEM_RESISTANT ] + " - CHEM_RESISTANT" ) )
		{
			cr.TraitBase[ TRAIT_CHEM_RESISTANT ] = (cr.Trait[ TRAIT_CHEM_RESISTANT ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_SEX_APPEAL ] + " - SEXUALITY" ) )
		{
			cr.TraitBase[ TRAIT_SEX_APPEAL ] = (cr.Trait[ TRAIT_SEX_APPEAL ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_SKILLED ] + " - SKILLED" ) )
		{
			cr.TraitBase[ TRAIT_SKILLED ] = (cr.Trait[ TRAIT_SKILLED ] == 0 ? 1 : 0);
			return true;
		}
        if( menu.Button( "" + cr.TraitBase[ TRAIT_NIGHT_PERSON ] + " - NIGHT_PERSON" ) )
		{
			cr.TraitBase[ TRAIT_NIGHT_PERSON ] = (cr.Trait[ TRAIT_NIGHT_PERSON ] == 0 ? 1 : 0);
			return true;			
		}
		
		if( menu.Button( "Return" ) )
		{
			return false;
		}
		return true;
    }

    string@ Description( Critter& gm )
	{	
		string info = "TRAITS:";
		return info;
	}
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

void GMChangeParam( Critter& gm, Critter& target, uint param, int val )
{
    if( !valid( target ) || !valid(gm) || !isGm(gm) )
	{
        return;
    }
	
	int last_value_base = target.ParamBase[ param ];
	int last_value = target.Param[ param ];
	
	target.ParamBase[ param ] = val;
	
	string text = "param " + param 
					+ " from " + last_value_base + "/" + last_value 
					+ " to " + val + " ( " + target.ParamBase[ param ] + "/" + target.Param[ param ] + " ) " 
					+ " for critter: " + target.Id + ".";
	
	gm.Say( SAY_NETMSG, "You have changed " + text );
	unsafe_log_2( gm, 0, 0, 0, gm.Name + " " + gm.Id + " changed " + text, null );
	
	if( param == ST_BLEED )
	{
		ChangeStatus( target, CR_STATUS_BLEED, 0, val > 0 );
	}
	
	if( param == QST_INVIS )
	{
		target.RefreshVisible();
	}
	
	if( param == QST_MEDIUM )
	{
		Critter@[] source = { target };
		Critter@[] crits;
		
		target.GetMap().GetCrittersSeeing( source, true, FIND_ALL | FIND_ONLY_PLAYERS, crits );

		for( int i = 0, j = crits.length(); i < j; i++ )
		{
			crits[i].RunClientScript( "client_names@_updateNick", target.Id, 0, 0, null, null );
		}
	}

	ChangeCritterSpeed(target);
}

void GMChangePsyMode(Critter& cr, uint mode)
{
	if(!valid(cr)) return;

	cr.ParamBase[ QST_MEDIUM ] = mode;
	if( mode == 2 )
	{
		cr.ParamBase[ QST_MEDIUM ] = -2;
	}
	
	Map@ map = cr.GetMap();

	if(!valid(map)) return;

	Critter@[] source = { cr };
	Critter@[] crits;
	map.GetCrittersSeeing( source, true, FIND_ALL | FIND_ONLY_PLAYERS, crits );

	for( int i = 0, j = crits.length(); i < j; i++ )
	{
		Critter@ crit = crits[ i ];
		if( crit.IsPlayer() )
		{
			crit.RunClientScript( "client_names@_updateNick", cr.Id, 0, 0, null, null );
		}
	}
}