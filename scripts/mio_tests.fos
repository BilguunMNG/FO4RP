#include "_macros.fos"

void go( Critter& cr, int p0, int p1, int p2 )
{
	int_bytelength(cr);
}

#ifndef __TESTING_BYTEWORKS
	#define __TESTING_BYTEWORKS
	bool uint_vs_int( uint a, int b, string@ info = null )
	{
		if( valid( info ) )
			info += a + ( ( a == b ) ? " == " : " != " ) + b;

		return ( a == b );
	}

	void int_bytelength( Critter& cr )
	{
		
		uint t1 = -1; int t2 = t1 >> 1; int t3 = t2 + 1;
		string result = "Max UINT32 = " + t1 + "\nMin INT32 = " + t3 + "\nMax INT32 = " + t2 ;
		
		int index = 0;
		while( t1 > 0 )
		{
			t1 = t1 >> 1;
			index++;
		}
		result += "\nIt's really 2^" + index;
		
		t1 = -1; t2 = ( t2 << 1 ) + 1;
		result += "\nAlso, ";
		uint_vs_int( t1, t2, result );
		
		cr.Say( SAY_NORM, result );
	}
#endif

#ifndef __TESTING_FOR_CYCLE
	#define __TESTING_FOR_CYCLE

	void init( int& a, int& b )
	{
		a = 0;
		b = 10;
	}

	bool check( int& a, int& b )
	{
		return a < b;
	}

	void action( int& a, int& b )
	{
		a++;
		b--;
	}

	void forTest( Critter& cr )
	{
		int a = 100, b = 10;
		for( init(a,b); check(a,b); action(a,b) )
		{
			cr.Say( SAY_NORM, a + "/" + b );
		}
	}
#endif

#ifndef __TESTING_CLASS_INHERITANCE
	#define __TESTING_CLASS_INHERITANCE
	void runTest( Critter& cr )
	{
		//Данная запись позволяет избежать бессмысленного создания переменной для хранения указателя на объект класса:
		//Animal@ a = Animal(); a.test(cr);
		TestAnimal( cr, Animal() );
		TestAnimal( cr, Dog() );
		TestAnimal( cr, Cat() );
		TestAnimal( cr, Lion() );
		TestAnimal( cr, Kitten() );
		TestAnimal( cr, Human() );
	}

	void TestAnimal( Critter& cr, Animal@ subject )
	{
		subject.test(cr);
	}

	class Animal
	{
		string name;

		Animal( )
		{
			init( "Животне" );
		}
		
		Animal( string name )
		{
			init( name );
		}
		
		void init( string name )
		{
			this.name = name;
		}
		
		string say() //override
		{
			return "нихуя себе!";
		} 
		
		void test( Critter& cr )
		{
			cr.Say( SAY_NORM, this.name + " говорит: '" + this.say() + "'" );
		}
	}

	class Dog : Animal
	{
		Dog( )
		{
			super( "Собака сутулая" );
		}
		
		Dog( string name )
		{
			super( name );
		}
		
		string say() override
		{
			return "Гафк!";
		}
	}

	class Cat : Animal
	{
		Cat( )
		{
			super( "Дикий кац" );
		}
		
		Cat( string name )
		{
			super( name );
		}
		
		string say() override
		{
			return "Мурк!";
		}
	}

	class Lion : Cat
	{
		Lion( )
		{
			super( "Лёва" );
		}
		
		Lion( string name )
		{
			super( name );
		}
		
		string say() override
		{
			return "Рооар!";
		}
	}

	class Kitten : Cat
	{
		Kitten( )
		{
			super( "Домашний каджит" );
		}
		
		Kitten( string name )
		{
			super( name );
		}
		
		string say() override
		{
			return "Скуума!";
		}
	}

	class Human : Animal
	{
		Human( )
		{
			super( "Френк Кост" );
		}
		
		Human( string name )
		{
			super( name );
		}
		
		string say() override
		{
			return "Вы кто такие? Я вас не звал, идите нахуй!";
		}
	}
#endif