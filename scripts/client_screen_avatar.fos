// FOS Client

#include "_macros.fos"
#include "_client_defines.fos"
#include "client_gui_h.fos"

const uint AvatarCount = 3;

funcdef void WindowsExplorer_OpenFileFuncdef( string file ); // placeholder
void WindowsExplorer_OpenFile( string file, WindowsExplorer_OpenFileFuncdef@ func ){} // placeholder

class AvaScreen : IGUIScreenCallbackShow
{	
	void OnShow( int critterId, int p1, int p2 )
	{
		CritterId = uint( critterId );
	}
	
	bool IsChosen()
	{
		CritterCl@ chosen = GetChosen();
		return valid( chosen ) ? chosen.Id == CritterId : false;
	}
	
	uint CritterId;
}

mixin class MutualAvaButton
{
	uint Index;
	AvaScreen@ Screen;
	IGUIElementOpt@ ElementOption;
	
	void construct( uint index, AvaScreen@ screen )
	{
		Index = index;
		@Screen = screen;
	}
	
	void OnMouseClick( int click ) override
	{
		if( click == MOUSE_CLICK_LEFT )
		{
			Button();
		}
	}
}

class AvaActivate : IGUIElementCallbackMouseClick, MutualAvaButton
{	
	AvaActivate( uint index, AvaScreen@ screen )
	{
		construct( index, screen );
	}
	
	void Button( )
	{

	}
}

class AvaUpload : IGUIElementCallbackMouseClick, MutualAvaButton
{
	AvaUpload( uint index, AvaScreen@ screen )
	{
		construct( index, screen );
	}
	
	void Button( )
	{
		WindowsExplorer_OpenFile( "Avatar Files (*.png)\0*.png", AvatarUpload );
	}
	
	WindowsExplorer_OpenFileFuncdef@ get_AvatarUpload()
	{
		if( Screen.IsChosen() )
			return WindowsExplorer_OpenFileFuncdef( @this.AvatarUpload_Chosen );
		else return WindowsExplorer_OpenFileFuncdef( @this.AvatarUpload_OtherCritter );
	}
	
	void AvatarUpload_Chosen( string file )
	{
		CritterCl@ chosen = GetChosen();
		if( !valid( chosen ) )
			return;
			
		AddFileToServerCollection( file, 1, chosen.Id, Index, func: FileCollectionUploadFuncdef( @this.FileCollectionUpload ) );
	}
	
	void AvatarUpload_OtherCritter( string file )
	{
		AddFileToServerCollection( file, 1, Screen.CritterId, Index, func: FileCollectionUploadFuncdef( @this.FileCollectionUpload ) );
	}
	
	void FileCollectionUpload( int result, uint fileid, string& filePath, int type, int p0, int p1, int p2 )
	{
		switch( result )
		{
			case ( -1 ): // Error
				break;
		
			case ( 1 ): // Success
			{
				// copy file to cache, new file name == fileid.png
				
			} break;
			
			default: break;
		}
	}
}

void GUIInit( )
{
	AvaScreen screen();
	
	GUI_CreateScreenIni( CLIENT_SCREEN_AVATAR, "AvaMainPic" )
		.CallbackShow( screen );
	
	string pref = "";
	for( uint i = 0; i < AvatarCount; i++ )
	{
		AvaActivate activate( i, screen );
		AvaUpload upload( i, screen );
	
		pref = "Ava" + ( i + 1 );
		GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, pref + "Pic", 0, 0 );
		@activate.ElementOption = GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, pref + "Activate", 0, 0 )
			.CallbackMouseClick( activate );
		
		GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, pref + "ActivateDn", 0, 0 );
		@upload.ElementOption = GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, pref + "Upload", 0, 0 )
			.CallbackMouseClick( upload );
			
		GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, pref + "UploadDn", 0, 0 );
	}
	
	GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, "AvaExitBut", 0, 0 );
	GUI_AddScreenElementIni( CLIENT_SCREEN_AVATAR, "AvaExitButDn", 0, 0 );
}
