// CIMP - Class Interactive Map P - wtf?! Y P?
// powermagic

#include "_macros.fos"
#include "_defines.fos"
#include "_itempid.fos"

// #include "_global_events.fos"

// import uint GetTile(Map& map, uint16 hexX, uint16 hexY, uint8 layer) from "qmap";

#define MAX_LO_COUNT           ( 100 )
#define MAX_RECH_LEVEL         ( 1000 )

#define GROUP_LENGTH           ( 11 )
#define GROUP_MUSHROOM         ( 0 )
#define GROUP_ANIMAL_CORPSE    ( 1 )
#define GROUP_SMALL_TRASH      ( 2 )
#define GROUP_TRASH            ( 3 )
#define GROUP_SLEEPER          ( 4 )
#define GROUP_BOX              ( 5 )
#define GROUP_METAL_TRASH      ( 6 )
#define GROUP_NEWSP_MACHINE    ( 7 )
#define GROUP_BOTTLE_BOX       ( 8 )
#define GROUP_PLANT            ( 9 )
#define GROUP_CORPSE           ( 10 )
#define GROUP_EVILMINDS        ( 100 )

#define MAP_SIZE               ( 150 )

#define TILE_PATH              ( "art/tiles/" )
#define TILE_FRM               ( ".frm" )
#define TILE_PNG               ( ".png" )

// use it TileGroup
#define TILE_GROUP_ROAD        ( 1 ) // 0x00000001
#define TILE_GROUP_SAND        ( 2 ) // 0x00000002
#define TILE_GROUP_SIDEWALK    ( 3 ) // 0x00000004
#define TILE_GROUP_BRICK       ( 4 ) // 0x00000008
#define TILE_GROUP_CAVE        ( 5 ) // 0x00000010
#define TILE_GROUP_GROUND      ( 6 ) // 0x00000020
#define TILE_GROUP_GRID        ( 7 ) // 0x00000040
#define TILE_GROUP_COUNT       ( 8 )

class CIMP
{
    bool   Destroible;

    uint16 TileGroup;

    uint16 HexX;
    uint16 HexY;
    uint   Hash;

    Item@  Object;

    CIMP()
    {
        @Object = null;

        HexX = 0;
        HexY = 0;
        Hash = 0;

        Destroible = false;
    }

    CIMP( uint hash, Item & item, bool destroible )
    {
        Hash = hash;
        @Object = item;

        Destroible = destroible;

        if( SetPic() )
        {
            HexX = Object.HexX;
            HexY = Object.HexY;
        }
    }

    CIMP( uint hash, Map & map )
    {
        Spawn( map );
        SetPic( hash );
    }

    bool Spawn( Map& map )
    {
        uint16 hexX = 0, hexY = 0, tempX = 0, tempY = 0;
        uint   hash = 0;

        map.GetEntireCoords( 255, 0, hexX, hexY );

        tempX = hexX;
        tempY = hexY;

        uint count = 0;
        bool condition = false;

        if( !tileInited )
        {
            InitTiles();
        }

        do
        {
            hexX = Random( tempX + 1, tempX + MAP_SIZE - 1 );
            hexY = Random( tempY + 1, tempY + MAP_SIZE - 1 );

            hash = map.GetTile( THX( hexX ), THX( hexY ) );       // GetTile(map, hexX, hexY, 0);//
            // Log("map hash "+hash);
            for( uint i = 1; i <= 32; ++i )
            {
                if( FLAG( TileGroup, pow( 2, i ) ) )
                {
                    condition = IsTileAvalible( hash, i );                   // TILE_GROUP_ROAD
                    if( condition )
                    {
                        //Log( "cond" );
                        break;
                    }
                }
            }

            count++;

            // Log("cond "+condition+":"+count);

        }
        while( !map.IsHexPassed( hexX, hexY ) /*IsTileGround(hash)*/ );

        @Object = map.AddItem( hexX, hexY, PID_LO_CONTAINER, 1 );

        if( !(Object is null) && Destroible )
        {
            Object.SetEvent( ITEM_EVENT_SKILL, "cimp@e_SkillImp" );
        }

        HexX = hexX;
        HexY = hexY;

        return ( !(Object is null) );
    }

    private bool SetMapPic( uint hash )
    {
        if( Object is null )
            return false;

        Object.PicInv = hash;
		Object.PicMap = hash;
        Object.Update();
        return true;
    }

    bool SetPic()
    {
        return SetMapPic( Hash );
    }

    bool SetPic( uint hash )
    {
        return SetMapPic( hash );

    }

    Item@ GetObject()
    {
        return @ Object;
    }

}

bool e_SkillImp( Item& item, Critter& cr, int skill )
{
	Item@[] items;
	item.GetItems( uint( -1 ), items );
	if( items.length() == 0 )
	{
		DeleteItem( item );
		return true;
	}
	
	return false;
}

class CLO : CIMP
{

    int                 RechLevel;
    uint16              GroupType;

    RespawnedItemGroup@ Group;

    CLO()
    {
        Destroible = true;
        RechLevel = 0;
        GroupType = uint16( -1 );
        @Group = null;
    }

    CLO( uint16 groupType, int rechLvl, bool destroible )
    {
        Destroible = false;
        RechLevel = rechLvl;
        GroupType = groupType;

        @Group = GetItemGroup( GroupType );
        if( Group is null )
            Log( "Didn't found GroupType[" + GroupType + "] for " + rechLvl + "." );
		else
		{
			TileGroup = Group.TileGroup;
			Destroible = destroible;
		}
    }

    bool SpawnInto()
    {
        if( Group is null || Object is null )
        {
            Log( "Not valid Group or Object." );
            return false;
        }

        Map @ map = GetMap( Object.MapId );
        if( map is null )
        {
            return false;
        }
        else
        {
            if( Group.MapProtos.find( map.GetProtoId() ) == -1 )
            {
                Log( "карта не подходит " + map.GetProtoId() );
                DeleteItem( Object );
                return false;
            }
        }

            uint16 index = Random( 0, Group.Length() - 1 );

            if( Group.RespItems[ index ].Chance < Random( 0, 95 ) )
                return true;

            uint8  count = 0;
            uint16 pid = 0;

            Group.GetItem( index, pid, count );

            if( GetObject() is null )
            {
                Log( "NULL!!OBJ" );
                return false;
            }
			
            Object.AddItem( pid, count, 0 );

        return true;
    }

    bool SpawnMap( Map& map )
    {
        return Spawn( map );

    }

    bool Add( Map& map )
    {
        return Spawn( map ) && SetPic( GetLOHash( GroupType ) ) && SpawnInto();
    }
}

class RespawnedItem
{
    uint16 Pid;
    uint8  Chance;
    uint8  Count;

    RespawnedItem()
    {
        Pid = 0;
        Chance = 0;
        Count = 0;
    }

    RespawnedItem( uint16 pid, uint8 chance, uint8 count )
    {
        Pid = pid;
        Chance = chance;
        Count = count;
    }
}

class RespawnedItemGroup
{
    RespawnedItem[] RespItems;
    uint[] MapProtos;
    uint TileGroup;

    RespawnedItemGroup()
    {
        RespItems.resize( 0 );
    }

    uint16 Length()
    {
        return RespItems.length();
    }

    bool GetItem( uint16 index, uint16& pid, uint8& count )
    {
        if( index >= RespItems.length() )
            return false;

        pid = RespItems[ index ].Pid;
        count = RespItems[ index ].Count;

        return true;
    }
}

class GroupAnimalCorpse : RespawnedItemGroup
{
    GroupAnimalCorpse()
    {

        RespItems.insertLast( RespawnedItem( PID_MEAT, 20, 2 ) );
        RespItems.insertLast( RespawnedItem( PID_RAD_MEAT, 80, 3 ) );
        RespItems.insertLast( RespawnedItem( PID_BRAHMIN_SKIN, 20, 1 ) );

        uint[] tempPids = { 107, 109, 111, 113, 115, 123, 126, 128, 130, 133, 135}; // Все карты ривердейла
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_GRID;
    }
}

class GroupSmallTrash   : RespawnedItemGroup
{
    GroupSmallTrash()
    {

        RespItems.insertLast( RespawnedItem( PID_CRAFT_L_LINT, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_CRAFT_M_JUNK, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_BOTTLE_EMPTY, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_BOTTLE_GLASS, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_REAL_BOTTLE_CAPS, 10, 10 ) );
        RespItems.insertLast( RespawnedItem( PID_PART_OF_ROPE, 20, 1 ) );
        
        uint[] tempPids = { 107, 109, 111, 113, 126, 128, 130, 133, 135}; // Все карты ривердейла кроме пещер
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_GRID;

    }
}

class GroupTrash        : RespawnedItemGroup
{
    GroupTrash()
    {

        RespItems.insertLast( RespawnedItem( PID_CRAFT_L_LINT, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_CRAFT_M_JUNK, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_BOTTLE_EMPTY, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_BOTTLE_GLASS, 20, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_REAL_BOTTLE_CAPS, 10, 10 ) );
        RespItems.insertLast( RespawnedItem( PID_PART_OF_ROPE, 20, 1 ) );

        uint[] tempPids = { 107, 109, 111, 113, 126, 128, 130, 133, 135}; // Все карты ривердейла кроме пещер
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_GRID;

    }
}


class GroupSleeper      : RespawnedItemGroup
{
    GroupSleeper()
    {

        RespItems.insertLast( RespawnedItem( PID_CRAFT_L_RAGS, 50, 3 ) );
        RespItems.insertLast( RespawnedItem( PID_BLUE_CONDOM, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_GREEN_CONDOM, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_RED_CONDOM, 10, 1 ) );

        uint[] tempPids = {130, 133, 135}; // руины ривердейла
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_SAND;

    }
}

class GroupBox  : RespawnedItemGroup
{
    GroupBox()
    {
        RespItems.insertLast( RespawnedItem( PID_FLARE, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_CRAFT_M_JUNK, 25, 1 ) );

        uint[] tempPids = {130, 133, 135}; // руины ривердейла
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_SAND;
    }
}



class GroupMetalTrash   : RespawnedItemGroup
{
    GroupMetalTrash()
    {
        RespItems.insertLast( RespawnedItem( PID_IRON_ROD, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_HLAM2_MEH, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_DETAL_MEH, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_BANKA_MEH, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_SPIKE_MEH, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_HLAM_MEH, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_METAL_LIST_MEH, 15, 1 ) );
		RespItems.insertLast( RespawnedItem( PID_NAILS, 10, 5 ) );
		RespItems.insertLast( RespawnedItem( PID_WATER_TUBE, 10, 1 ) ); 
		
        uint[] tempPids = { 126, 128, 130, 133, 135}; // руины ривердейла, две карты перед руинами
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_GRID;
    }
}

class GroupNewspMachine : RespawnedItemGroup
{
    GroupNewspMachine()
    {

        RespItems.insertLast( RespawnedItem( PID_BOTTLE_CAPS, 25, 5 ) );

        uint[] tempPids = {130, 133, 135}; // руины ривердейла
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_BRICK;
    }
}

class GroupBottleBox    : RespawnedItemGroup
{
    GroupBottleBox()
    {

        RespItems.insertLast( RespawnedItem( PID_BOTTLE_EMPTY, 25, 3 ) );
        RespItems.insertLast( RespawnedItem( PID_BOTTLE_GLASS, 25, 3 ) );

        uint[] tempPids = {130, 133, 135}; // руины ривердейла
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_GRID;

    }
}

class GroupMushroom     :RespawnedItemGroup
{
	GroupMushroom(){
		RespItems.insertLast( RespawnedItem(PID_MUSH_LOW, 15, 1) );

		uint[] tempPids = {107, 109}; // лесная зона ривердейла
		MapProtos = tempPids;
			
		TileGroup = TILE_GROUP_SAND;
	}
}

class GroupCorpse       : RespawnedItemGroup
{
    GroupCorpse()
    {

        RespItems.insertLast( RespawnedItem( PID_KNIFE, 10, 1 ) );
        RespItems.insertLast( RespawnedItem( PID_BOTTLE_EMPTY, 20, 1 ) );

        uint[] tempPids = { 107, 109, 111, 113, 115, 123, 126, 128, 130, 133, 135}; // Все карты ривердейла
        MapProtos = tempPids;

        TileGroup = TILE_GROUP_GRID;

    }
}

uint GetLOHash( uint16 groupType )
{
    string temp = "art\\scenery\\";
    string[] tempAdd;
    switch( groupType )
    {
	case GROUP_MUSHROOM:	
        tempAdd.insertLast( "swamp\\swamp_grass_A.fofrm" );
        tempAdd.insertLast( "swamp\\swamp_grass_B.fofrm" );
        tempAdd.insertLast( "swamp\\swamp_grass_C.fofrm" );
        tempAdd.insertLast( "swamp\\swamp_grass_C_sym.fofrm" );
		break;

   case GROUP_EVILMINDS:
        tempAdd.insertLast( "locker5.frm" );
        break;

    case GROUP_CORPSE:
        tempAdd.insertLast( "dead01.frm" );
        tempAdd.insertLast( "dead02.frm" );
        tempAdd.insertLast( "dead03.frm" );
        tempAdd.insertLast( "dead04.frm" );
        tempAdd.insertLast( "v13bones.frm" );
        tempAdd.insertLast( "bone01.frm" );
        tempAdd.insertLast( "bone03.frm" );
        break;

    case GROUP_BOTTLE_BOX:
        tempAdd.insertLast( "crate01.frm" );
        tempAdd.insertLast( "crate02.frm" );
        tempAdd.insertLast( "crate03.frm" );
        break;

    case GROUP_NEWSP_MACHINE:
        tempAdd.insertLast( "mailbx.frm" );
        tempAdd.insertLast( "newsp1.frm" );
        tempAdd.insertLast( "newsp2.frm" );
        tempAdd.insertLast( "newsp3.frm" );
        tempAdd.insertLast( "newsp4.frm" );
        tempAdd.insertLast( "newsp5.frm" );
        tempAdd.insertLast( "newsp6.frm" );
        tempAdd.insertLast( "novbud1.frm" );
        tempAdd.insertLast( "novbud2.frm" );
        break;

    case GROUP_METAL_TRASH:
        tempAdd.insertLast( "junk1.frm" );
        tempAdd.insertLast( "junk2.frm" );
        tempAdd.insertLast( "junk3.frm" );
        tempAdd.insertLast( "junk4.frm" );
        tempAdd.insertLast( "junk5.frm" );
        break;

    case GROUP_BOX:
        tempAdd.insertLast( "boxes1.frm" );
        tempAdd.insertLast( "boxes2.frm" );
        tempAdd.insertLast( "boxes3.frm" );
        tempAdd.insertLast( "boxes4.frm" );
        tempAdd.insertLast( "njunk5.frm" );
        tempAdd.insertLast( "njunk6.frm" );
        tempAdd.insertLast( "boxes02.frm" );
        tempAdd.insertLast( "boxes03.frm" );
        tempAdd.insertLast( "boxes04.frm" );
        break;

    case GROUP_SLEEPER:
        tempAdd.insertLast( "bed1.frm" );
        tempAdd.insertLast( "bed2.frm" );
        tempAdd.insertLast( "bed3.frm" );
        tempAdd.insertLast( "bed4.frm" );
        tempAdd.insertLast( "bed5.frm" );
        tempAdd.insertLast( "bed6.frm" );
        tempAdd.insertLast( "bed7.frm" );
        tempAdd.insertLast( "bed8.frm" );
        break;

    case GROUP_TRASH:
        tempAdd.insertLast( "trashcn.frm" );
        tempAdd.insertLast( "kont1.frm" );
        tempAdd.insertLast( "kontsmet.frm" );
        tempAdd.insertLast( "weed05.frm" );
        break;

    case GROUP_SMALL_TRASH:
        tempAdd.insertLast( "weed06.frm" );
        tempAdd.insertLast( "weed07.frm" );
        tempAdd.insertLast( "weed08.frm" );
        tempAdd.insertLast( "weed09.frm" );
        tempAdd.insertLast( "weed15.frm" );
        tempAdd.insertLast( "weed16.frm" );
        tempAdd.insertLast( "weed17.frm" );
        tempAdd.insertLast( "trash1.frm" );
        tempAdd.insertLast( "trash2.frm" );
        tempAdd.insertLast( "trash3.frm" );
        break;

    case GROUP_ANIMAL_CORPSE:
        tempAdd.insertLast( "bone05.frm" );
        tempAdd.insertLast( "bone04.frm" );
        tempAdd.insertLast( "bone02.frm" );
        break;

    default:
        break;
    }

    temp += tempAdd[ Random( 0, tempAdd.length() - 1 ) ];

    // Log("hash "+temp);
    return GetStrHash( temp );
}

//import uint[] getAvailableGroups( Map@ map ) from "cimp";
uint[] getAvailableGroups( Map@ map )
{
	uint[] result = {};
	
	if( !valid( map ) )
		return result;
	
	uint PID = map.GetProtoId();

	RespawnedItemGroup@ Group;
	for( uint i = 0; i < GROUP_LENGTH; i++ )
	{
		@Group = GetItemGroup( i, false );
		if( valid( Group ) && Group.MapProtos.find( PID ) != -1 )
			result.insertLast( i );
	}
	
	return result;
}

RespawnedItemGroup@ GetItemGroup( uint16 groupType, bool Logging = true )
{
    RespawnedItemGroup@ temp;
    switch( groupType )
    {
	case GROUP_MUSHROOM:      @temp = GroupMushroom();     break;
    case GROUP_CORPSE:        @temp = GroupCorpse();       break;
    case GROUP_BOTTLE_BOX: 	  @temp = GroupBottleBox();    break;
    case GROUP_NEWSP_MACHINE: @temp = GroupNewspMachine(); break;
    case GROUP_METAL_TRASH:   @temp = GroupMetalTrash();   break;
    case GROUP_BOX:           @temp = GroupBox();          break;
    case GROUP_SLEEPER:       @temp = GroupSleeper();      break;
    case GROUP_TRASH:         @temp = GroupTrash();        break;
    case GROUP_SMALL_TRASH:   @temp = GroupSmallTrash();   break;
    case GROUP_ANIMAL_CORPSE: @temp = GroupAnimalCorpse(); break;
    default:                  @temp = null;                break;
    }

    if( Logging && !valid( temp ) )
        Log( "!valid groupType[" + groupType + "]" );

    return @temp;
}

bool tileInited = false;

uint[][] tileGroups( TILE_GROUP_COUNT );

void InitTiles()
{
    uint[] @ data = tileGroups[ TILE_GROUP_ROAD ];

    data.resize( 0 );

    for( uint8 i = 1; i <= 9; ++i )
    {
        string temp = TILE_PATH + "road0" + i + TILE_FRM;
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 10; i <= 43; ++i )             // i=10?
    {
        string temp = TILE_PATH + "road" + i + TILE_FRM;
        data.insertLast( GetStrHash( temp ) );
    }

    @data = tileGroups[ TILE_GROUP_SIDEWALK ];           // тротуар
    data.resize( 0 );

    for( uint8 i = 1; i <= 9; ++i )
    {
        string temp = TILE_PATH + "curb0" + i + TILE_FRM;
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 1; i <= 5; ++i )
    {
        string temp = TILE_PATH + "road0" + i + TILE_FRM;
        data.insertLast( GetStrHash( temp ) );
    }

    @data = tileGroups[ TILE_GROUP_SAND ];
    data.resize( 0 );

    for( uint8 i = 0; i <= 3; ++i )
    {
        string temp = TILE_PATH + "edg100" + i + TILE_FRM;              // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 3; ++i )
    {
        string temp = TILE_PATH + "edg200" + i + TILE_FRM;              // edg2**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 1; ++i )
    {
        string temp = TILE_PATH + "edg300" + i + TILE_FRM;              // edg3**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 8; ++i )
    {
        string temp = TILE_PATH + "edg400" + i + TILE_FRM;              // edg4**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 8; ++i )
    {
        string temp = TILE_PATH + "edg500" + i + TILE_FRM;              // edg5**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 9; ++i )
    {
        string temp = TILE_PATH + "edg600" + i + TILE_FRM;              // edg6**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 1; ++i )
    {
        string temp = TILE_PATH + "edg601" + i + TILE_FRM;              // edg6** continue
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 3; ++i )
    {
        string temp = TILE_PATH + "edg700" + i + TILE_FRM;              // edg7**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 4; ++i )
    {
        string temp = TILE_PATH + "eds00" + i + TILE_FRM;                       // eds
        data.insertLast( GetStrHash( temp ) );
    }

    @data = tileGroups[ TILE_GROUP_GROUND ];
    data.resize( 0 );

    data.insertLast( GetStrHash( TILE_PATH + "cav4008" + TILE_FRM ) );
    data.insertLast( GetStrHash( TILE_PATH + "cav4009" + TILE_FRM ) );
    data.insertLast( GetStrHash( TILE_PATH + "cav4010" + TILE_FRM ) );
    data.insertLast( GetStrHash( TILE_PATH + "cav4011" + TILE_FRM ) );

    @data = tileGroups[ TILE_GROUP_GRID ];
    data.resize( 0 );

    for( uint8 i = 1; i <= 6; ++i )
    {
        for( uint8 j = 1; j <= 7; ++j )
        {
            string temp = TILE_PATH + "bld_floor_" + i + "_" + j + TILE_PNG;                    // eds
            data.insertLast( GetStrHash( temp ) );
        }
    }

    for( uint8 i = 1; i <= 5; ++i )
    {
        string temp = TILE_PATH + "bld_floor_7_" + i + TILE_PNG;
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 3; i <= 5; ++i )
    {
        string temp = TILE_PATH + "bld_floor_8_" + i + TILE_PNG;
        data.insertLast( GetStrHash( temp ) );
    }

    @data = tileGroups[ TILE_GROUP_CAVE ];
    data.resize( 0 );

    for( uint8 i = 0; i <= 9; ++i )
    {
        string temp = TILE_PATH + "cav100" + i + TILE_FRM;              // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 3; ++i )
    {
        string temp = TILE_PATH + "cav200" + i + TILE_FRM;              // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 5; ++i )
    {
        string temp = TILE_PATH + "cav300" + i + TILE_FRM;              // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 0; i <= 7; ++i )
    {
        string temp = TILE_PATH + "cav400" + i + TILE_FRM;              // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    @data = tileGroups[ TILE_GROUP_BRICK ];
    data.resize( 0 );

    for( uint8 i = 1; i <= 9; ++i )
    {
        string temp = TILE_PATH + "brick0" + i + TILE_FRM;              // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    for( uint8 i = 10; i <= 13; ++i )
    {
        string temp = TILE_PATH + "brick" + i + TILE_FRM;               // edg1**
        data.insertLast( GetStrHash( temp ) );
    }

    tileInited = true;
}

bool IsTileAvalible( uint hash, uint8 group )
{
    if( group >= tileGroups.length() )
		return false;
	
	uint[] @data = tileGroups[ group ];
    // Log("tileGroups "+group+" len "+data.length());
    for( uint16 i = 0, j = data.length(); i < j; ++i )
    {

        if( data[ i ] == hash )
        {
            //Log( "hash " + data[ i ] + ":" + hash );
            return true;
        }
    }

    return false;
}

bool IsTileGround( uint hash )
{
    return IsTileAvalible( hash, TILE_GROUP_GROUND );
}