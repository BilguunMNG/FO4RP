#ifndef CLIENT_KARMA
#define CLIENT_KARMA

#include "_utils.fos"
#include "client_karma_h.fos"

class CKarmaEntry
{
	uint Id;
	uint Color;
	bool IsInited = false;

	CKarmaEntry(uint id, uint color)
	{
		this.Id = id;
		this.Color = color;
		this.IsInited = true;
	}

	string Serialize()
	{
		string result = "";
		result += "Id = " + Id + "\n";
		result += "Color = " + Color + "\n";
		result += "\n";

		return result;
	}
}

class CKarmaArray
{
	CKarmaEntry@[] List;
	uint ListLen;

	bool Save()
	{
		if( ListLen == 0 )
		{
			return true;
		}
		
		filesystem file_system;
		file file_data;
		file_system.deleteFile( KARMA_FILENAME + ".bak" );
		file_system.move( KARMA_FILENAME, KARMA_FILENAME + ".bak" );

		if( file_data.open( KARMA_FILENAME, "w" ) !=0 )
		{
			return false;
		}

		for( uint i = 0; i < ListLen; i++ )
		{
			file_data.writeString( "[Critter]\n" );
			file_data.writeString( List[i].Serialize() + "\n" );
		}

		file_data.close();

		return true;
	}

	void Load()
	{
		clear();
		uint start = GetTick();
		LoadKarma( LoadFile( KARMA_FILENAME ) );
		Log( "Loaded " + ListLen + " Critters Colorize in " + ( GetTick() - start ) + " milliseconds." );
	}

	uint GetCritterColor( CritterCl@ cr )
	{
		if( !valid( cr ) )
		{
			return 0;
		}

		return GetCritterColor( cr.Id );
	}

	uint GetCritterColor( uint id )
	{
		for( uint i = 0; i < ListLen; i++ )
		{
			CKarmaEntry@ currEntry = List[i];
			if( currEntry.Id == id )
			{
				return currEntry.Color;
			}
		}

		return 0;
	}

	CKarmaEntry@ GetCritterEntry( uint id )
	{
		for( uint i = 0; i < ListLen; i++ )
		{
			CKarmaEntry@ currEntry = List[i];
			if( currEntry.Id == id )
			{
				return currEntry;
			}
		}

		return null;
	}

	void SetCritterColor( uint id, uint color)
	{
		CKarmaEntry@ entry = GetCritterEntry(id);
		if(valid(entry))
		{
			entry.Color = color;
		}
		else
		{
			this.Create(id, color);
		}
	}

	private void LoadKarma( string@ txt )
	{
		if( !valid(txt) )
		{
			return;
		}

		string@[] lines = splitEx( txt, "\n" );
		string@ currentLine = null;
		string@[]@ data = null, check = null;
		CKarmaEntry@ entry = null;
		int tempi = -1;
		uint tempu = 0, countLine = lines.length();
		
		for( uint i = 0; i < countLine; i++ )
		{
			@currentLine = lines[i];
			if( !valid(currentLine) || currentLine.length() == 0  )
			{
				continue;
			}

			if( currentLine[0] == '#' )
			{
				continue;
			}
			
			@data = splitEx( currentLine, "#" );
			uint dlen = data.length();
			if( dlen > 1 )
			{
				@currentLine = data[0];
			}

			data = splitEx( currentLine, "=" );

			if( dlen == 1)
			{
				if( data[0] == "[Critter]" )
				{
					set( entry );
					@entry = CKarmaEntry();
				}
			}
			else if( dlen == 2 )
			{
				if( !valid( entry ) )
				{
					Log( "Error parse critter colorize file, critter colorize not valid <line:N." + i + ":#" + currentLine + ">" );
				}
				else if( data[0] == "Id" )
				{
					StrToInt( data[1], tempi );
					entry.Id = tempi;
				}
				else if( data[0] == "Color" )
				{
					StrToInt( data[1], tempi );
					entry.Color = tempi;
				}
			}
		}

		set( entry );
	}

	private void set( CKarmaEntry@ karma )
	{
		if( valid( karma ) )
		{
			Message("ID: " + karma.Id + " COLOR: " + karma.Color);
			List.insertLast( karma );
			karma.IsInited = true;
			ListLen++;
		}
	}
	
	void Create( uint id, uint color)
	{
		set( CKarmaEntry( id, color ) );
	}

	private string@ LoadFile( string@ fileName )
	{
		file file_data;
		if( file_data.open( fileName, "r" ) != -1 )
		{
			string txt = "";
			file_data.readString( file_data.getSize(), txt ); 
			file_data.close();
			return @txt;
		}
		
		Log( "Error loading critter colorize! Can't open file." );
		
		return null;
	}

	private void clear()
	{
		List.resize(0);
		ListLen = 0;
	}
}

CKarmaArray karmaManager;

bool SaveKarma()
{
	return karmaManager.Save();
}

void LoadKarma()
{
	karmaManager.Load();
}

uint GetCritterColor( CritterCl@ cr )
{
	return karmaManager.GetCritterColor( cr );
}

uint GetCritterColor( uint id )
{
	return karmaManager.GetCritterColor( id );
}

#endif //CLIENT_KARMA