#define LVAR_TYPE	0
#define UVAR_TYPE	1

/**
	Возвращает LVAR или UVAR по индексу "таймаутов".
*/
GameVar@ getGameVar( Critter& player, Critter@ npc, int type, int id )
{
    if( !valid( npc ) )
	{
		testInfo( player, "НПЦ не найден." );
		return null; 
	}
        
	uint[][] vars = {
		//TYPE 0 : LVAR
		{ LVAR_timeout, LVAR_timeout1, LVAR_timeout2, LVAR_timeout3, LVAR_timeout4, LVAR_timeout5, LVAR_timeout6, LVAR_timeout7, LVAR_timeout8 },
		//TYPE 1 : UVAR
		{ UVAR_uniq_timeout, UVAR_uniq_timeout1, UVAR_uniq_timeout2, UVAR_uniq_timeout3, UVAR_uniq_timeout4, UVAR_uniq_timeout5, UVAR_uniq_timeout6, UVAR_uniq_timeout7, UVAR_uniq_timeout8, UVAR_uniq_timeout9 }
	};

	if( type < 0 || uint(type) >= vars.length() )
	{
		testInfo( player, "Type '" + type + "' out of bounds(" + vars.length() + ")." );
		return null; 
	}

	if( id < 0 || uint(id) >= vars[type].length() )
	{
		testInfo( player, "Index '" + id + "' out of bounds(" + vars[type].length() + ")." );
		return null; 
	}
	
	switch( type )
	{
		case( LVAR_TYPE ): return GetLocalVar( vars[type][id], npc.Id );
		case( UVAR_TYPE ): return GetUnicumVar( vars[type][id], player.Id, npc.Id );
	}
	
	return null;
}

/**
	Установка таймаута LVAR.
*/
void r_TimeoutSet_min( Critter& player, Critter@ npc, int n, int value ) { r_TimeoutSet( player, npc, n, value * 60 ); }
void r_TimeoutSet( Critter& player, Critter@ npc, int n, int value ) { TimeoutSet( player, npc, n, value ); }
bool TimeoutSet( Critter& player, Critter@ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, LVAR_TYPE, n );
	if( !valid( var ) )
		return testInfo( player, "TimeoutSet: !valid var #" + n + "." );
	
    var = __FullSecond + REAL_SECOND( value );
	return true;
}


/**
	Проверка на то, что таймаут НПЦ (LVAR) уже ЗАКОНЧИТСЯ через value секунд.
*/
bool d_NotTimeoutCheck( Critter& player, Critter@ npc ) { return !d_TimeoutCheck( player, npc ); }
bool d_TimeoutCheck( Critter& player, Critter@ npc ) 	{ return  d_TimeoutCheck( player, npc, 0, 0 ); }
bool d_NotTimeoutCheck( Critter& player, Critter@ npc, int n, int value ) { return !d_TimeoutCheck( player, npc, n, value ); }
bool d_TimeoutCheck( Critter& player, Critter@ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, LVAR_TYPE, n );
	return !valid( var ) || ( __FullSecond + REAL_SECOND( value ) >= var.GetValue() );
}


/**
	Проверка на то, что таймаут взаимодействия НПЦ-персонаж (UVAR) уже ЗАКОНЧИТСЯ через value секунд.
*/
bool d_NotTimeoutOk( Critter& player, Critter @ npc ) 		{ return !d_TimeoutOk( player, npc ); }
bool d_TimeoutOk( Critter& player, Critter @ npc ) 			{ return d_TimeoutOk( player, npc, 0, 0 ); }
bool d_NotTimeoutOk( Critter& player, Critter @ npc, int n, int value ) { return !d_TimeoutOk( player, npc, n, value ); }
bool d_TimeoutOk( Critter& player, Critter @ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, UVAR_TYPE, n );
    return !valid( var ) || ( __FullSecond + REAL_SECOND( value ) >= var.GetValue() );
}

/**
	Установка таймаута UVAR.
*/
void r_SetUniqTO_min( Critter& player, Critter @ npc, int value ) 		 { r_SetUniqTO( player, npc, value * 60 ); }
void r_SetUniqTO_min( Critter& player, Critter @ npc, int n, int value ) { r_SetUniqTO( player, npc, n, value * 60 ); }
void r_SetUniqTO( Critter& player, Critter @ npc, int value ) 		 { SetUniqTO( player, npc, 0, value ); }
void r_SetUniqTO( Critter& player, Critter @ npc, int n, int value ) { SetUniqTO( player, npc, n, value ); }
bool SetUniqTO( Critter& player, Critter @ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, UVAR_TYPE, n );
 	if( !valid( var ) )
		return testInfo( player, "SetUniqTO: !valid var #" + n + "." );

	var = __FullSecond + REAL_SECOND( value );
	return true;
}