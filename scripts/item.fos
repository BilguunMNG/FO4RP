// Initil Author: rifleman17
#include "_utils.fos"
#include "_npc_pids.fos"

import void ShowInputBoxScreen( Critter& cr, string funcName, uint16 textLength, uint8 flags ) from "main";

import void AffectPoison( Critter& cr, int value ) from "poison";

import void DiceAdjustment( Critter& cr, Item& targetItem ) from "mio_social";
import void DiceUse( Critter& cr, Item& item ) from "mio_social";
import void RecorderAdjustment( Critter& cr, Item& targetItem ) from "mio_social";
import void RecorderUse( Critter& cr, Item& item ) from "mio_social";
import void CardsAdjustment( Critter& cr, Item& targetItem ) from "mio_social";
import void CardsUse( Critter& cr, Item& item ) from "mio_social";


// Дверь, которая зпкроется через 2 игровые минуты илии через некоторое число реальных секунд , указанное в val3
bool ScriptDoor( Item& door ) { return door.SetScript( "_DoorAutoCloseInit" ); }

void _DoorAutoCloseInit( Item& door, bool firstTime ) { door.SetEvent( ITEM_EVENT_SKILL, "e_UseAutoCloseDoor" ); }

bool e_UseAutoCloseDoor( Item& door, Critter& cr, int skill )
{
	CreateTimeEvent( __FullSecond + REAL_SECOND( door.Val3 == 0 ? 10 : door.Val3 ), "e_AutoCloseDoor", door.Id, true );
	return false;
}

uint e_AutoCloseDoor( uint[] @ val )
{
	Item@ door = GetItem( val[ 0 ] );
	if( not valid( door ) ) { return 0; }
	if( !FLAG( door.LockerCondition, LOCKER_ISOPEN ) ) { return 0; }

	uint16 x = 0;
	uint16 y = 0;
	Map@ map = door.GetMapPosition( x, y );
	if( not valid( map ) ) { return 0; }

	Critter@ cr = map.GetCritter( x, y );
	if( valid( cr ) )
	{
		if( cr.IsLife() ) { return REAL_SECOND( 10 ); } else { cr.TransitToMap( map.Id, x - 1, y, cr.Dir ); }
	}

	if( door.LockerClose() ) { return 0; }

	return REAL_MINUTE( 3 );
}

// Дверь, которая не открывается стандартными способами
void _ClosedDoorInit( Item& door, bool firstTime )
{
    door.SetEvent( ITEM_EVENT_SKILL, "_UseDoor" );
}

bool _UseDoor( Item& door, Critter& cr, int skill )
{
    return true;
}

// Дверь, при использовании которой открывается диалог
void _DialogDoorInit( Item& door, bool firstTime )
{
    door.SetEvent( ITEM_EVENT_SKILL, "_UseDialogDoor" );
}

bool _UseDialogDoor( Item& door, Critter& cr, int skill )
{
	cr.ParamBase[ ST_LAST_DOOR_ID ] = door.Id;
    RunDialog( cr, door.Val3, door.HexX, door.HexY, false );
    return true;
}

void _LockerInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_LockerKeyUse" );
}

bool e_LockerKeyUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( valid( onItem ) )
    {
        if( onItem.GetProtoId() == PID_TERMINAL ) { 
			cr.Say( SAY_NETMSG, "|0xFFFF00 Вы не можете запереть терминал на замок." );
			return false; 
		}
		
		if( ( ( onItem.GetType() == ITEM_TYPE_DOOR || onItem.Proto.Container_Changeble ) && onItem.Val1 == 0 && onItem.Val0 == 0 ) 
			|| ( InteractContainer.find( onItem.GetProtoId() ) != -1 && onItem.Val0 == 0 ) )
        {
            if( _LockerIsClose( onItem ) || InteractContainer.find( onItem.GetProtoId() ) != -1 )
            {
				if( cr.CountItem( PID_CRAFT_M_BARS ) < 1 )
				{
					cr.Say( SAY_NETMSG, "Вам нужна хотя бы одна железяка для заготовки ключа под устанавливаемый замок." );
					return true;
				}
				
                if( onItem.LockerCondition != LOCKER_LOCKED && onItem.LockerComplexity == 0 ) {
                    uint key_pid = PID_BLANK_KEY;
					switch( item.GetProtoId() )
                    {
                    case PID_LOCKER_LOW:
                        onItem.Val0 = 1;
						key_pid = PID_TEMPLE_KEY;
                        break;
                    case PID_LOCKER_MED:
                        onItem.Val0 = 2;
						key_pid = PID_JAIL_KEY;
                        break;
                    case PID_LOCKER_HARD:
                        onItem.Val0 = 3;
						key_pid = PID_VAULT_13_SHACK_KEY;
                        break;
                    }

					cr.DeleteItem( PID_CRAFT_M_BARS, 1 );
					
                    Item @ key = cr.AddItem( key_pid, 1 );
                    uint keyNumber = Random( 0, 65534 );
                    key.LockerId = keyNumber;

                    onItem.LockerId = keyNumber;
                    onItem.LockerCondition = LOCKER_LOCKED;
                    onItem.LockerComplexity = cr.Skill[SK_LOCKPICK];

                    Log( "Заперт объект №" + onItem.Id + " на замок сложности " + onItem.LockerComplexity + "." );
                    DeleteItem( item );

                    key.SetLexems( null );
                    key.Update();

					cr.StatBase[ ST_LAST_DOOR_ID ] = key.Id;
					cr.StatBase[ ST_LAST_CONT_ID ] = key.Accessory;
					ShowInputBoxScreen( cr, "main@unsafe_MakeDescLex#Описание:", 0, INPUTBOX_CLOSE_ON_ENTER );
                    return true;
					
                } else {
                    cr.Say( SAY_NETMSG, "Дверь уже заперта, сначала взломайте замок." );
                    return true;
                }
				
            } else {
                cr.Say( SAY_NETMSG, "Сначала закройте объект." );
                return true;
            }
        }
        else
        {
            cr.Say( SAY_NETMSG, "Этот объект нельзя запереть." );
            return true;
        }
    }
    return false;
}

// Sargonius
// Очистка голодиска
// А ещё вверху кто-то запорол кодировку русских комментов, беда.
void _EmptyDisk( Item& item, bool firstTime )
{
    if( firstTime )
        item.HolodiskNumber = 0;         // Обнуляем номер голодиска
}

void _InitPoliceStuff( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_PoliceStuffUse" );
    item.SetEvent( ITEM_EVENT_SKILL, "e_PoliceStuffPick" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "e_PoliceStuffHammer" );
}

bool e_PoliceStuffPick( Item& item, Critter& cr, int skill )
{
    if( ( skill == SKILL_PICK_ON_GROUND ) && ( item.Accessory == ACCESSORY_HEX ) )
    {
		if( item.Val1 == 0 )
        {
            return false;
        }
        cr.Say( SAY_NETMSG, "Вы не можете перенести табличку" );
        return true;
    }
    return true;
}

bool e_PoliceStuffHammer( Item& item, Critter& cr, Item@ usedItem )
{
    int HammerTime = ( 11 - cr.Stat[ ST_STRENGTH ] ) * 60 * 10;
    if( item.GetProtoId() == PID_SIGN )
    {
        if( ( cr.Timeout[ TO_SK_REPAIR ] == 0 ) && ( cr.StatBase[ ST_LEVEL ] >= 3 ) )
        {
            if( valid( usedItem ) && ( usedItem.GetProtoId() == PID_SLEDGEHAMMER ) )
            {
                if( cr.CountItem( PID_IRON_PROD ) >= 1 )
                {
                    item.Val1 += 1;
                    cr.DeleteItem( PID_IRON_PROD, 1 );
                    cr.Say( SAY_NETMSG, "Вы забиваете кувалдой крепежные штыри." );
                    cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + HammerTime;
                }
                else
                    cr.Say( SAY_NETMSG, "Нет крепежных штырей (арматур)." );
                return true;
            }
            if( valid( usedItem ) && ( usedItem.GetProtoId() == PID_CROWBAR ) && ( cr.ParamBase[ SK_REPAIR ] >= 100 ) )
            {
                if( item.Val1 >= 1 )
                {
                    item.Val1 -= 1;
                    cr.Say( SAY_NETMSG, "Вы выдергиваете ломиком крепежные штыри." );
                    cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + HammerTime;
                }
                else
                    cr.Say( SAY_NETMSG, "Табличка не закреплена." );
                return true;
            }
        }
        cr.Say( SAY_NETMSG, "У вас недостаточно сил." );
    }
    return false;
}

bool e_PoliceStuffUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( item.GetProtoId() == PID_SIGN )
    {
        if( item.Val0 == 0 )
        {
            cr.ShowScreen( SCREEN_SAY, 0, "item@SignUseScreen" );
            cr.StatBase[ ST_VAR0 ] = item.Id;
        }
        else
            cr.Say( SAY_NETMSG, "табличка уже заполненна" );
    }
    return true;
}

void SignUseScreen( Critter& player, uint answerI, string& answerS )
{
    if( answerS.length() != 0 )
    {
        Item @ item = GetItem( player.StatBase[ ST_VAR0 ] );
        item.SetLexems( "" + answerS );
        item.Val0 = 1;
        item.Update();
    }
}

void _WhistInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_WhistUse" );
}

bool e_WhistUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    Map @ map = cr.GetMap();
    map.PlaySound( "whist.wav", cr.HexX, cr.HexY, cr.Stat[ ST_ENDURANCE ] * 5 );
    cr.Say( SAY_EMOTE_ON_HEAD, "Свестит в свисток." );
    return true;
}

void _InitRpNamer( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_RpNamerUse" );
}

bool e_RpNamerUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( item.GetProtoId() == PID_INFOPAD )
    {
        cr.ShowScreen( SCREEN_SAY, 0, "item@RpNamerUseScreen" );
        cr.StatBase[ ST_VAR0 ] = item.Id;
    }
    return true;
}

void RpNamerUseScreen( Critter& player, uint answerI, string& answerS )
{
    if( answerS.length() != 0 )
    {
        Item @ item = GetItem( player.StatBase[ ST_VAR0 ] );
        player.SetLexems( answerS );
        DeleteItem( item );
    }
}

void _music_fleita( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_fleitaUse" );
}

bool e_fleitaUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    Map @ map = cr.GetMap();
    if( Random( 1, 5 ) > 4 )
        map.PlaySound( "flute.wav", cr.HexX, cr.HexY, cr.Stat[ ST_ENDURANCE ] * 5 );
    else if( Random( 1, 5 ) > 3 )
        map.PlaySound( "flute2.wav", cr.HexX, cr.HexY, cr.Stat[ ST_ENDURANCE ] * 5 );
    else if( Random( 1, 5 ) > 2 )
        map.PlaySound( "flute3.wav", cr.HexX, cr.HexY, cr.Stat[ ST_ENDURANCE ] * 5 );
    else if( Random( 1, 5 ) > 1 )
        map.PlaySound( "flute4.wav", cr.HexX, cr.HexY, cr.Stat[ ST_ENDURANCE ] * 5 );
    else if( Random( 1, 5 ) > 0 )
        map.PlaySound( "flute5.ogg", cr.HexX, cr.HexY, cr.Stat[ ST_ENDURANCE ] * 5 );
    cr.Say( SAY_EMOTE_ON_HEAD, "Играет на флейте." );
    Location @ loc = map.GetLocation();
    if( ( loc.WorldX <= 50 ) || ( loc.WorldX >= 150 ) || ( loc.WorldY <= 50 ) || ( loc.WorldY >= 150 ) )
    {
        cr.Say( SAY_NETMSG, "Вы слишком далеко от фермы." );
        return true;
    }
    if( ( loc.WorldX >= item.Val2 - 20 ) && ( loc.WorldX <= item.Val2 + 20 ) && ( loc.WorldY >= item.Val3 - 20 ) && ( loc.WorldY <= item.Val3 + 20 ) )
    {
        cr.Say( SAY_NETMSG, "Тут брамины уже паслись." );
        return true;
    }
    if( loc.Id >= 100 && loc.Id <= 139 )
    {
        cr.Say( SAY_NETMSG, "Начинаете пасти стадо." );
        item.Val1 = map.Id;
        item.Val2 = loc.WorldX;
        item.Val3 = loc.WorldY;
        cr.AddTimeEvent( "cte_BrahminEat", ( 60 * 3 ) * __TimeMultiplier, CTE_WORK, 0 );
    }
    return true;
}

uint cte_BrahminEat( Critter& cr, int identifier, uint& rate )
{
    Critter@[] brahmins;
    Item@ flute = cr.GetItem( PID_FLUTE, SLOT_HAND1 );
    Map @ map = cr.GetMap();
    if( !valid( flute ) || !valid( map ) )
        return 0;
    if( ( map.GetCritters( NPC_PID_Brahmin, FIND_LIFE_AND_KO | FIND_ONLY_NPC, brahmins ) > 0 ) && int( map.Id ) == flute.Val1 )
    {
        for( uint i = 0, ii = brahmins.length(); i < ii; i++ )
            brahmins[ i ].StatBase[ ST_VAR5 ] += 1;

        cr.Say( SAY_NETMSG, "Брамины кажется насытились тут" );
    }
    return 0;
}

void _dosimetr( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_dosimetrUse" );
}

bool e_dosimetrUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    Map @ map = cr.GetMap();
    cr.Say( SAY_EMOTE_ON_HEAD, "Производит замер." );
    Location @ loc = map.GetLocation();
    if( ( loc.WorldX >= item.Val1 - 20 ) && ( loc.WorldX <= item.Val1 + 20 ) && ( loc.WorldY >= item.Val2 - 20 ) && ( loc.WorldY <= item.Val2 + 20 ) )
    {
        cr.Say( SAY_NETMSG, "Кажется место правильное, остается только подождать несколько минут." );
        item.Val3 = map.Id;
        cr.AddTimeEvent( "cte_dosimetrUse", 60 * 3, CTE_WORK, 0 );
    }
    return true;
}

uint cte_dosimetrUse( Critter& cr, int identifier, uint& rate )
{
    Item@ dosimetr = cr.GetItem( PID_DOSIMETR, SLOT_HAND1 );
    Map @ map = cr.GetMap();
    if( !valid( dosimetr ) || !valid( map ) )
        return 0;
    if( int( map.Id ) == dosimetr.Val3 )
    {
        cr.Say( SAY_NETMSG, "Индикатор изменил цвет на желтый, можно возвращаться." );
        DeleteItem( dosimetr );
        cr.AddItem( PID_DOSIMETR_USED, 1 );
    }
    else
        cr.Say( SAY_NETMSG, "Время прошло, но индикатор не сменил цвет, кажется мы сделали что-то неправильно." );
    return 0;
}

void _TraderBadge( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_traderbadgeUse" );
}

bool e_traderbadgeUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    cr.Say( SAY_EMOTE_ON_HEAD, "Показывает значек торговца" );
    return true;
}

void _PochtaBadge( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_PochtaBadgeUse" );
}

bool e_PochtaBadgeUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    cr.Say( SAY_EMOTE_ON_HEAD, "Показывает значек оружейника" );
    return true;
}

void _kosakInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_kosakUse" );
}

bool e_kosakUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
	Item @ respirator = _CritGetItemHandExt( cr );
	if( !(respirator is null) && respirator.GetProtoId() == PID_RESPIRATOR )
	{
		cr.Say( SAY_NETMSG, "Вы не можете курить через респиратор." );
		return true;
	}

	if( ( _CritCountItem( cr, PID_LIGHTER ) < 1 && _CritCountItem( cr, PID_FIREPLACE_TOKEN ) < 1 ) )
	{
		cr.Say( SAY_NETMSG, "Вам нужен источник огня, что бы прикурить." );
		return true;
	}
	
    
    Map @ map = cr.GetMap();
	if( cr.Stat[ ST_GENDER ] == GENDER_MALE ) { 
		Random( 0, 1 ) > 0 ? map.PlaySound( "smoking.ogg", cr.HexX, cr.HexY, 1 ) : map.PlaySound( "drugs2.wav", cr.HexX, cr.HexY,  1 );
	} else {
		map.PlaySound( "Fem_Smoking.ogg", cr.HexX, cr.HexY, 1 );
	}
	
	if( valid( onCritter ) && onCritter.IsPlayer() )
	{
		SayLog( cr, crInfo( cr ) + " предлагает " + crInfo( onCritter ) + " дунуть косяк." );
		onCritter.ParamBase[ CR_VAL0 ] = item.Id;
		
		onCritter.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_SmokingWeed" );
		onCritter.Say( SAY_DIALOGBOX_TEXT, "Вам предлагают дунуть косяк, согласитесь?");
		onCritter.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да" );
		onCritter.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Нет" );
		
		cr.Say( SAY_NETMSG, "Вы предложили дунуть." );		
		return true;
	}
	
	SmokingWeed( cr, item );
    return true;
}

void SmokingWeed( Critter& cr, Item& item )
{
    SayLog( cr, crInfo( cr ) + " раскуривает косяк." );
	cr.Say( SAY_EMOTE_ON_HEAD, "Раскуривает косяк" );
    cr.StatBase[ ST_EXPERIENCE ] += 10 * Random( 1, 5 );
	//cr.StatBase[ ST_RADIATION_LEVEL ] += Random( 0, 2 );
	AffectPoison( cr, Random( 1, 5 ) );
	cr.StatBase[ ST_HUNGER ] -= Random( 2, 4 );
	cr.StatBase[ ST_THIRST ] -= Random( 2, 4 );
    cr.StatBase[ ST_DYSPNEA ] -= Random( 0, 10 );

	int time = cr.Timeout[ TO_TIREDNESS ];
	if( time > 0 )
	{
		//time = CLAMP( time - __FullSecond, 0, time );
		time = CLAMP( time - REAL_SECOND( Random( 60, 120 ) ), 0, time );
		cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + time;
	}
	
	if( Random( 0, 2 ) == 0 )
		_SubItem( item, 1 );
}

void answer_SmokingWeed( Critter& targetCr, uint answerI, string& answerS)
{
	Item@ weed = GetItem( targetCr.ParamBase[ CR_VAL0 ] );
	if( valid( weed ) )
		SmokingWeed( targetCr, weed );
}

void _InitRPStuff( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_RPStuffUse" );
}

bool e_RPStuffUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( item.Val0 == 0 )
    {
        cr.ShowScreen( SCREEN_SAY, 0, "item@RPStuffUseScreen" );
        cr.StatBase[ ST_VAR0 ] = item.Id;
    }
    else
        cr.Say( SAY_NETMSG, "уже заполненно" );
    return true;
}

void RPStuffUseScreen( Critter& player, uint answerI, string& answerS )
{
    if( answerS.length() != 0 )
    {
        Item @ item = GetItem( player.StatBase[ ST_VAR0 ] );
        uint16 itemPid = item.GetProtoId();

        switch( itemPid )
        {
        case PID_RPSTUFF1:
            item.SetLexems( "" + answerS );
            break;
        case PID_RPSTUFF2:
            item.SetLexems( "" + answerS );
            break;
        case PID_RPSTUFF3:
            item.SetLexems( "" + answerS );
            break;
        case PID_RPSTUFF4:
            item.SetLexems( "" + answerS );
            break;
		case PID_PICTURE:
            item.SetLexems( "" + answerS );
            break;	
        case PID_RPGUN1:
            item.SetLexems( "" + answerS );
            break;
        case PID_RPGUN2:
            item.SetLexems( "" + answerS );
            break;
        case PID_RPGUN3:
            item.SetLexems( "" + answerS );
            break;
        }

        item.Val0 = 1;
        item.Update();
    }
}

void _InitPuti( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_DROP, "e_PutiDrop" );
}

void e_PutiDrop( Item& item, Critter& cr )
{
    if( cr.CountItem( PID_ROPE_USED ) != 0 || cr.CountItem( PID_HANDCUFFS_USED ) != 0 )
    {
        cr.AddItem( PID_PUTI, 1 );
        cr.Say( SAY_NETMSG, "Вы не можете снять путы" );
    }
    DeleteItem( item );
}

// depracated
void _InitCodeDoor( Item& item, bool firstTime )
{
    Log( "Depracated function item@_InitCodeDoor at item.Id " + item.Id );
    // item.SetEvent(ITEM_EVENT_SKILL, "e_CodeDoorSkill");
    // item.LockerCondition = LOCKER_ELECTRO;
}

void _AutoDoorInit( Item& item, bool firstTime )
{
    if( item.GetProtoId() == PID_AUTODOOR )
        item.SetEvent( ITEM_EVENT_WALK, "e_AutoDoorWalk" );
}

void Item_SetFrame( Item& item, uint8 frame ) // Sprite& sprite) // ItemCl& itemCl
{
    item.AnimStayBegin      = frame;
    item.AnimStayEnd        = frame;
    item.AnimShowBegin      = frame;
    item.AnimShowEnd        = frame;
    item.AnimHideBegin      = frame;
    item.AnimHideEnd        = frame;

    return;
}

void e_AutoDoorWalk( Item& item, Critter& cr, bool entered, uint8 dir )
{
    Item@ door = GetItem( item.Val1 );
    if( !valid( door ) )
    {
        DeleteItem( item );
        return;
    }
	
	Map @ map = cr.GetMap();
	if( entered )
    {
        if( valid( cr ) && cr.IsPlayer() && cr.StatBase[ ST_BODY_TYPE ] < BT_BRAHMIN && !FLAG( door.LockerCondition, LOCKER_ISOPEN ) && !FLAG( door.LockerCondition, LOCKER_LOCKED ) && !(door.LockerCondition == LOCKER_ELECTRO) && map.GetData(24)>0 )
        {
            door.LockerOpen();
        }
    }
    else
    {
        if( valid( cr ) && cr.IsPlayer() && cr.StatBase[ ST_BODY_TYPE ] < BT_BRAHMIN && map.GetData(24)>0 )
        {
            uint16 x = 0;
            uint16 y = 0;
            @ map = door.GetMapPosition( x, y );
            if( map.GetCrittersHex( x, y, 1, FIND_LIFE, null ) == 0 ) door.LockerClose();
        }
    }
}

void _BonesInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "e_BonesUseItem" );
}

bool e_BonesUseItem( Item& item, Critter& crit, Item@ usedItem )
{
    if( valid( usedItem ) && usedItem.GetProtoId() == PID_SHOVEL )
    {
		DeleteItem( item );
		crit.Say( SAY_NETMSG, "Вы закопали тело." );
        return true;
    }
    return false;
}

void _InitToken( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_TokenPick" );
	item.SetEvent( ITEM_EVENT_DROP, "e_TokenDrop" );
    item.SetEvent( ITEM_EVENT_MOVE, "e_TokenMove" );
	item.SetEvent( ITEM_EVENT_WALK, "e_WorkplaceWalk" );
}

bool e_TokenPick( Item& item, Critter& cr, int skill )
{
    DeleteItem( item );
	return false;
}

void e_TokenDrop( Item& item, Critter& crit )
{
    DeleteItem( item );
}

void e_TokenMove( Item& item, Critter& crit, uint8 fromSlot )
{
    DeleteItem( item );
}

//Сделать дверь с окошком (делаю по аналогии с кодом Эрла) Указать номер диалога в val3 двери
void SetSecurityDoor( Critter& cr, int p0, int p1, int p2 ) 
{
	Item@ item = GetItem( p0 );
	
	if( !valid( item )) 
	{
		return;
	}
	
	item.Val3 = 5174; //сделать в ГМ-ке возможность задать это значение при навешивании скрипта
	
	item.SetScript( "_DialogDoorInit" );
    item.Update();
	
	
}

void SetWorkbench( Critter& cr, int p0, int p1, int p2 )
{
	Item@ item = GetItem(p0);
	if( !valid( item ) ) return;
    item.SetScript( "_InitWorkBench" );
    item.Update();
}

void _InitWorkBench( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_WorkBenchPick" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "e_WorkBenchCloneKey" );	
}

bool e_WorkBenchCloneKey( Item& item, Critter& cr, Item@ usedItem )
{
    if( !valid( usedItem ) )
		return false;
	
	if( usedItem.GetProtoId() == PID_HANDCUFFS )
	{
		if( _CritCountItem( cr, PID_CRAFT_M_BARS ) <= 0 )
		{
			cr.Say( SAY_NETMSG, "Вам нужна железная болванка для заготовки ключа от наручников." );
			return true;
		}
		cr.DeleteItem( PID_CRAFT_M_BARS, 1 );

		usedItem.Val2 = 0;
		cr.Say( SAY_NETMSG, "Вы восстановили утерянный ключ для этой пары наручников. При следующем надевании, он появится в инвентаре одевающего." );
		return true;
	}
	
	if( usedItem.GetType() == ITEM_TYPE_KEY )
    {
		if( _CritCountItem( cr, PID_CRAFT_M_BARS ) <= 0 )
		{
			cr.Say( SAY_NETMSG, "Вам нужна железная болванка." );
			return true;
		}
		cr.DeleteItem( PID_CRAFT_M_BARS, 1 );

		uint pid = usedItem.GetProtoId();
		if( pid == PID_BLANK_KEY )
			pid = PID_KEY; //Костыль "перехода" ключей от старого формата (@keylex@) к новому (чистая лексема).
		Item @ newKey = cr.AddItem( pid, 1 );

		newKey.LockerId = usedItem.LockerId;
		newKey.SetLexems( null );
		newKey.Update();

		cr.StatBase[ ST_LAST_DOOR_ID ] = newKey.Id;
		cr.StatBase[ ST_LAST_CONT_ID ] = newKey.Accessory;
		ShowInputBoxScreen( cr, "main@unsafe_MakeDescLex#Описание:", 0, INPUTBOX_CLOSE_ON_ENTER );
		return true;	
	}
    return false;	
}

bool e_WorkBenchPick( Item& item, Critter& cr, int skill )
{
    if( ( skill == SKILL_PICK_ON_GROUND ) && ( item.Accessory == ACCESSORY_HEX ) )
    {
        Item@ Workplace;
        @Workplace = cr.GetMap().GetItem( cr.HexX, cr.HexY, PID_GRAPPLE_HOOK );
        if( !valid( Workplace ) )
		{
			@Workplace = cr.GetMap().AddItem( cr.HexX, cr.HexY, PID_GRAPPLE_HOOK, 1 );
		}
		Workplace.SetScript( "_WorkplaceInit" );
		if( cr.CountItem( PID_WORKBENCH_TOKEN ) == 0 ) cr.AddItem( PID_WORKBENCH_TOKEN, 1 );
		cr.ShowScreen( SCREEN_FIXBOY, 0, "" );
    }
    return true;
}

void _WorkplaceInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_TokenPick" );
	item.SetEvent( ITEM_EVENT_DROP, "e_TokenDrop" );
    item.SetEvent( ITEM_EVENT_MOVE, "e_TokenMove" );
    item.SetEvent( ITEM_EVENT_WALK, "e_WorkplaceWalk" );
}

void e_WorkplaceWalk( Item& item, Critter& cr, bool entered, uint8 dir )
{
	if( !entered )
    {
	    Item@Token = cr.GetItem( PID_WORKBENCH_TOKEN, -1 );
        if( valid( Token )) DeleteItem( Token );
	    Item@Token2 = cr.GetItem( PID_FIREPLACE_TOKEN, -1 );
        if( valid( Token2 )) DeleteItem( Token2 ); 
    }
}

//====================================MIO_POLL_BOX=========================//

void _Poll( Item& item, bool firstTime )
{
	item.SetEvent( ITEM_EVENT_SKILL, "e_PollInit" );
}
bool e_PollInit( Item& item, Critter& cr, int skill )
{
	cr.ParamBase[ ST_VAR2 ] = item.Id;
	string[] List = { "1", "2", "3", "4", "5", "6" };
	string[] List2 = { "Кол-во пунктов", "Подсчитать", "Очистить урну" };

	if( skill == SK_SCIENCE )
	{
		if( cr.Id == uint ( item.Val0 ) )
		{
			cr.ShowScreen( SCREEN_DIALOGBOX, List2.length(), "Poll" );
			cr.Say( SAY_DIALOGBOX_TEXT, "Опции:" );
			for( uint i = 0, l = List2.length(); i < l; i++ ) { cr.Say( SAY_DIALOGBOX_BUTTON( i ), List2[ i ] ); }
		}
		else { cr.Say( SAY_EMOTE_ON_HEAD, "Пытается перенастроить механизм" ); }
		return true;
	}
	if( skill == SK_REPAIR )
	{
		if( item.Val0 == 0 ) { item.Val0 = cr.Id; cr.Say( SAY_NETMSG, "Урна ваша." ); }
		else if( uint ( item.Val0 ) == cr.Id ) { item.Val0 = 0; cr.Say( SAY_NETMSG, "Урна ничья." ); }
		else { cr.Say( SAY_EMOTE_ON_HEAD, "Пытается взломать механизм" ); }
		return true;
	}
	if( skill == -1 && cr.Id != uint ( item.Val0 ) )
	{
		cr.ShowScreen( SCREEN_DIALOGBOX, item.Val2, "Poll" );
		cr.Say( SAY_DIALOGBOX_TEXT, "Голосовать за номер:" );
		for( uint i = 0, l = item.Val2; i < l; i++ ) { cr.Say( SAY_DIALOGBOX_BUTTON( i ), "Номер "+List[ i ] ); }
		return true;
	}

	return false;
}
void Poll( Critter& player, uint answerI, string& answerS )
{
	Item@ Item0 = GetItem( player.Param[ ST_VAR2 ] );
	if( @ Item0 is null ) { return; }

	if( player.Id != uint ( Item0.Val0 ) )
	{
		if( uint ( Item0.Val1 ) != player.Id )
		{
			if( answerI == 0 ) { Item0.Val3 ++; }
			if( answerI == 1 ) { Item0.Val4 ++; }
			if( answerI == 2 ) { Item0.Val5 ++; }
			if( answerI == 3 ) { Item0.Val6 ++; }
			if( answerI == 4 ) { Item0.Val7 ++; }
			if( answerI == 5 ) { Item0.Val8 ++; }
			Item0.Val1 = player.Id;
			player.Say( SAY_EMOTE_ON_HEAD, "Голосует" );
		} else { player.Say( SAY_EMOTE_ON_HEAD, "Пытается сделать вброс" ); }
	}
	else
	{
		if( answerI == 0 )
		{
			string[] List = { "Один", "Два", "Три", "Четыре", "Пять", "Шесть" };
			player.ShowScreen( SCREEN_DIALOGBOX, List.length(), "Poll_x" );
			player.Say( SAY_DIALOGBOX_TEXT, "Число пунктов:" );
			for( uint i = 0, l = List.length(); i < l; i++ ) { player.Say( SAY_DIALOGBOX_BUTTON( i ), List[ i ] ); }
		}
		if( answerI == 1 )
		{
			string Str;
			for( uint i = 0, l = Item0.Val2; i < l; i++ )
			{
				switch( i )
				{
					case 0: Str +=  "1."+Item0.Val3; break;
					case 1: Str += " 2."+Item0.Val4; break;
					case 2: Str += " 3."+Item0.Val5; break;
					case 3: Str += " 4."+Item0.Val6; break;
					case 4: Str += " 5."+Item0.Val7; break;
					case 5: Str += " 6."+Item0.Val8; break;
				}
			}
			player.Say( SAY_EMOTE, "Считает голоса" );
			player.Say( SAY_NORM, Str );
		}
		if( answerI == 2 ) { Item0.Val1=0; Item0.Val3=0; Item0.Val4=0; Item0.Val5=0; Item0.Val6=0; Item0.Val7=0; Item0.Val8=0; }
	}
}
void Poll_x( Critter& player, uint answerI, string& answerS )
{
	Item@ Item0 = GetItem( player.Param[ ST_VAR2 ] );
	if( @ Item0 is null ) { return; }
	Item0.Val2 = answerI+1;
	player.Say( SAY_NETMSG, "Выбрано число пунктов: "+Item0.Val2 );
}



//==============MIO_RECORDER_WIP=============================//

void _Recorder( Item& item, bool firstTime )
{
	item.SetEvent( ITEM_EVENT_SKILL, "e_RecorderInit" );
}
bool e_RecorderInit( Item& item, Critter& cr, int skill )
{
	if( skill == 213 ) { RecorderAdjustment( cr, item ); return true; }
	else if( skill == -1 )
	{
		if( FLAG( item.Flags, ITEM_CAN_PICKUP ) ) { return false; }
		RecorderUse( cr, item );
		return true;
	}
	return false;
}

//===========MIO_DICE_AND_CARDS======================//
void _Dice( Item& item, bool firstTime )
{
	item.SetEvent( ITEM_EVENT_SKILL, "e_DiceInit" );
}
bool e_DiceInit( Item& item, Critter& cr, int skill )
{
	if( skill == 213 ) { DiceAdjustment( cr, item ); return true; }
	else if( skill == -1 )
	{
		if( FLAG( item.Flags, ITEM_CAN_PICKUP ) ) { return false; }
		DiceUse( cr, item );
		return true;
	}
	return false;
}

void _Cards( Item& item, bool firstTime )
{
	item.SetEvent( ITEM_EVENT_SKILL, "e_CardsInit" );
}
bool e_CardsInit( Item& item, Critter& cr, int skill )
{
	if( skill == 213 ) { CardsAdjustment( cr, item ); return true; }
	else if( skill == -1 )
	{
		if( FLAG( item.Flags, ITEM_CAN_PICKUP ) ) { return false; }
		CardsUse( cr, item );
		return true;
	}
	return false;
}