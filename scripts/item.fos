#ifndef ITEM_MODULE
#define ITEM_MODULE

#include "_utils.fos"
#include "item_h.fos"
#include "_npc_pids.fos"
#include "gateway_h.fos"
#include "poison_h.fos"
#include "lockers_h.fos"

import void ShowInputBoxScreen( Critter& cr, string funcName, uint16 textLength, uint8 flags ) from "main";

// door that will close by itself
bool ScriptDoor( Item& door )
{ 
	return door.SetScript( "_DoorAutoCloseInit" );
}

void _DoorAutoCloseInit( Item& door, bool firstTime )
{
	door.SetEvent( ITEM_EVENT_SKILL, "e_UseAutoCloseDoor" );
}

bool e_UseAutoCloseDoor( Item& door, Critter& cr, int skill )
{
	CreateTimeEvent( __FullSecond + REAL_SECOND( door.Val3 == 0 ? 10 : door.Val3 ), "e_AutoCloseDoor", door.Id, true );
	return false;
}

uint e_AutoCloseDoor( uint[] @ val )
{
	Item@ door = GetItem( val[ 0 ] );
	if( not valid( door ) )
	{
		return 0;
	}
	if( !FLAG( door.LockerCondition, LOCKER_ISOPEN ) )
	{
		return 0;
	}

	uint16 x = 0;
	uint16 y = 0;
	Map@ map = door.GetMapPosition( x, y );
	if( not valid( map ) )
	{
		return 0;
	}

	Critter@ cr = map.GetCritter( x, y );
	if( valid( cr ) )
	{
		if( cr.IsLife() )
		{
			return REAL_SECOND( 10 );
		}
		else
		{
			cr.TransitToMap( map.Id, x - 1, y, cr.Dir );
		}
	}

	if( door.LockerClose() )
	{ 
		ToggleDoorBlocker( map, door, true );
		return 0;
	}

	return REAL_MINUTE( 3 );
}

// Door that wont open by common means
void _ClosedDoorInit( Item& door, bool firstTime )
{
    door.SetEvent( ITEM_EVENT_SKILL, "_UseDoor" );
}

bool _UseDoor( Item& door, Critter& cr, int skill )
{
    return true;
}

// Door that starts a dialog
void _DialogDoorInit( Item& door, bool firstTime )
{
    door.SetEvent( ITEM_EVENT_SKILL, "_UseDialogDoor" );
}

bool _UseDialogDoor( Item& door, Critter& cr, int skill )
{
	cr.ParamBase[ ST_LAST_DOOR_ID ] = door.Id;
    RunDialog( cr, door.Val3, door.HexX, door.HexY, false );
    return true;
}

// Locks and lockers
void _LockerInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE, "e_LockerKeyUse" );
}

bool e_LockerKeyUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( valid( onItem ) )
    {
        if( onItem.GetProtoId() == PID_TERMINAL )
		{ 
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_LOCK_TERMINAL );
			return false; 
		}
		
		if( ( ( onItem.GetType() == ITEM_TYPE_DOOR || onItem.Proto.Container_Changeble ) && onItem.Val1 == 0 && onItem.Val0 == 0 ) 
			|| ( InteractContainer.find( onItem.GetProtoId() ) != -1 && onItem.Val0 == 0 ) )
        {
            if( _LockerIsClose( onItem ) || InteractContainer.find( onItem.GetProtoId() ) != -1 )
            {
				if( cr.CountItem( PID_CRAFT_M_BARS ) < 1 )
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_METAL_PART );
					return true;
				}
				
                if( onItem.LockerCondition != LOCKER_LOCKED && onItem.LockerComplexity == 0 )
				{
                    uint key_pid = PID_BLANK_KEY;
					switch( item.GetProtoId() )
                    {
						case( PID_LOCKER_LOW ):
							onItem.Val0 = 1;
							key_pid = PID_TEMPLE_KEY;
							break;
						case( PID_LOCKER_MED ):
							onItem.Val0 = 2;
							key_pid = PID_JAIL_KEY;
							break;
						case( PID_LOCKER_HARD ):
							onItem.Val0 = 3;
							key_pid = PID_VAULT_13_SHACK_KEY;
							break;
                    }

					cr.DeleteItem( PID_CRAFT_M_BARS, 1 );
					
                    Item @ key = cr.AddItem( key_pid, 1 );
                    uint keyNumber = Random( 0, 65534 );
                    key.LockerId = keyNumber;

                    onItem.LockerId = keyNumber;
                    onItem.LockerCondition = LOCKER_LOCKED;
                    onItem.LockerComplexity = cr.Skill[SK_LOCKPICK];

                    Log( "An item №" + onItem.Id + " is locked. Lock complexity is: " + onItem.LockerComplexity + "." );
                    DeleteItem( item );

                    key.SetLexems( null );
                    key.Update();

					cr.StatBase[ ST_LAST_DOOR_ID ] = key.Id;
					cr.StatBase[ ST_LAST_CONT_ID ] = key.Accessory;
					ShowInputBoxScreen( cr, "main@unsafe_MakeDescLex#Описание:", 0, INPUTBOX_CLOSE_ON_ENTER );
                    return true;
                }
				else
				{
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DOOR_LOCKED );
                    return true;
                }
            }
			else 
			{
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DOOR_NOT_CLOSED );
                return true;
            }
        }
        else
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DOOR_CANT_LOCK );
            return true;
        }
    }
    return false;
}

bool FluteUse( Critter& cr )
{
    if( !hasItem( cr, PID_FLUTE, SLOT_HAND1 ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TAKE_MUSICAL_INSTRUMENT );
		return false;
	}
	
	Map@ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( Sounds ), cr.Stat[ ST_ENDURANCE ] * 5 );
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_FLUTE );
    return true;
}

void _InitPuti( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_DROP, "e_PutiDrop" );
}

void e_PutiDrop( Item& item, Critter& cr )
{
    if( cr.CountItem( PID_ROPE_USED ) != 0 || cr.CountItem( PID_HANDCUFFS_USED ) != 0 )
    {
        cr.AddItem( PID_PUTI, 1 );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_FREE_HANDS );
    }
    DeleteItem( item );
}

void _AutoDoorInit( Item& item, bool firstTime )
{
    if( item.GetProtoId() == PID_AUTODOOR )
	{
        item.SetEvent( ITEM_EVENT_WALK, "e_AutoDoorWalk" );
	}
}

void e_AutoDoorWalk( Item& item, Critter& cr, bool entered, uint8 dir )
{
    Item@ door = GetItem( item.Val1 );
    if( !valid( door ) )
	{
        DeleteItem( item );
        return;
    }
	
	Map @ map = cr.GetMap();
	if( entered )
	{
        if( valid( cr ) && cr.IsPlayer() && cr.StatBase[ ST_BODY_TYPE ] < BT_BRAHMIN 
			&& !FLAG( door.LockerCondition, LOCKER_ISOPEN )
			&& !FLAG( door.LockerCondition, LOCKER_LOCKED ) 
			&& !( door.LockerCondition == LOCKER_ELECTRO ) && map.GetData( 24 ) > 0 )
		{
            door.LockerOpen();
			ToggleDoorBlocker( map, door, false );
		}
    }
	else
	{
        if( valid( cr ) && cr.IsPlayer() && cr.StatBase[ ST_BODY_TYPE ] < BT_BRAHMIN && map.GetData( 24 ) > 0 )
		{
            uint16 x = 0;
            uint16 y = 0;
            @ map = door.GetMapPosition( x, y );
            if( map.GetCrittersHex( x, y, 1, FIND_LIFE, null ) == 0 )
			{ 
				door.LockerClose();
			}
		}
    }
}

void _InitToken( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_TokenPick" );
	item.SetEvent( ITEM_EVENT_DROP, "e_TokenDrop" );
    item.SetEvent( ITEM_EVENT_MOVE, "e_TokenMove" );
	item.SetEvent( ITEM_EVENT_WALK, "e_WorkplaceWalk" );
}

bool e_TokenPick( Item& item, Critter& cr, int skill )
{
    DeleteItem( item );
	return false;
}

void e_TokenDrop( Item& item, Critter& crit )
{
    DeleteItem( item );
}

void e_TokenMove( Item& item, Critter& crit, uint8 fromSlot )
{
    DeleteItem( item );
}

//Door val3 to set dialigue
void SetSecurityDoor( Critter& cr, int p0, int p1, int p2 ) 
{
	Item@ item = GetItem( p0 );
	
	if( !valid( item )) 
	{
		return;
	}
	
	item.Val3 = 5174; //hardcoded dialigue WIP - need to set up in GM menu
	
	item.SetScript( "_DialogDoorInit" );
    item.Update();
}

void SetWorkbench( Critter& cr, int p0, int p1, int p2 )
{
	Item@ item = GetItem(p0);
	if( !valid( item ) ) return;
    item.SetScript( "_InitWorkBench" );
    item.Update();
}

void _InitWorkBench( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_WorkBenchPick" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "e_WorkBenchCloneKey" );	
}

bool e_WorkBenchCloneKey( Item& item, Critter& cr, Item@ usedItem )
{
    if( !valid( usedItem ) )
	{
		return false;
	}
	
	if( usedItem.GetProtoId() == PID_HANDCUFFS )
	{
		if( _CritCountItem( cr, PID_CRAFT_M_BARS ) <= 0 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_METAL_FOR_HADNCUFFS_KEY );
			return true;
		}
		cr.DeleteItem( PID_CRAFT_M_BARS, 1 );

		usedItem.Val2 = 0;
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_KEY_HADNCUFFS_RESTORED );
		return true;
	}
	
	if( usedItem.GetType() == ITEM_TYPE_KEY )
    {
		if( _CritCountItem( cr, PID_CRAFT_M_BARS ) <= 0 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_METAL_PART );
			return true;
		}
		cr.DeleteItem( PID_CRAFT_M_BARS, 1 );

		uint pid = usedItem.GetProtoId();
		if( pid == PID_BLANK_KEY )
		{
			pid = PID_KEY;
		}
		Item @ newKey = cr.AddItem( pid, 1 );

		newKey.LockerId = usedItem.LockerId;
		newKey.SetLexems( null );
		newKey.Update();

		cr.StatBase[ ST_LAST_DOOR_ID ] = newKey.Id;
		cr.StatBase[ ST_LAST_CONT_ID ] = newKey.Accessory;
		ShowInputBoxScreen( cr, "main@unsafe_MakeDescLex#Описание:", 0, INPUTBOX_CLOSE_ON_ENTER );
		return true;	
	}
    return false;	
}

bool e_WorkBenchPick( Item& item, Critter& cr, int skill )
{
    if( ( skill == SKILL_PICK_ON_GROUND ) && ( item.Accessory == ACCESSORY_HEX ) )
    {
        Item@ Workplace;
        @Workplace = cr.GetMap().GetItem( cr.HexX, cr.HexY, PID_GRAPPLE_HOOK );
        if( !valid( Workplace ) )
		{
			@Workplace = cr.GetMap().AddItem( cr.HexX, cr.HexY, PID_GRAPPLE_HOOK, 1 );
		}
		Workplace.SetScript( "_WorkplaceInit" );
		if( cr.CountItem( PID_WORKBENCH_TOKEN ) == 0 )
		{
			cr.AddItem( PID_WORKBENCH_TOKEN, 1 );
		}
		cr.ShowScreen( SCREEN_FIXBOY, 0, "" );
    }
    return true;
}

void _WorkplaceInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_TokenPick" );
	item.SetEvent( ITEM_EVENT_DROP, "e_TokenDrop" );
    item.SetEvent( ITEM_EVENT_MOVE, "e_TokenMove" );
    item.SetEvent( ITEM_EVENT_WALK, "e_WorkplaceWalk" );
}

void e_WorkplaceWalk( Item& item, Critter& cr, bool entered, uint8 dir )
{
	if( !entered )
    {
	    Item@Token = cr.GetItem( PID_WORKBENCH_TOKEN, -1 );
        if( valid( Token ))
		{
			DeleteItem( Token );
	    }
		Item@Token2 = cr.GetItem( PID_FIREPLACE_TOKEN, -1 );
        if( valid( Token2 ))
		{
			DeleteItem( Token2 ); 
		}
	}
}

#endif // ITEM_MODULE