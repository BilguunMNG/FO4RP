#include "_utils.fos"

import bool sinfFLAG( Critter& player, uint flag ) from "gm";
///Функционал, используемый в модуле, но не относящийся к его прямому назначению. Проще говоря - будущий импорт.

//Отменяет или создает связь (следование) между существами. Нужно для визуального отображения стрелочек над существами.
bool unbound( Critter& owner, int targetID ) { return bound( owner, targetID, false ); }
bool bound( Critter& owner, int targetID, bool set = true )
{
	//"Пустой" вызов ф-ии.
	if( targetID == 0 ) return true;
	
	Critter@ target;
	if( !Find( target, targetID ) || !valid( target ) )
		return testInfo( owner, "Invalid target id: " + targetID );

	target.StatBase[ ST_FOLLOW_CRIT ] = ( set ? int( owner.Id ) : 0 );
	return true;
}

///Основная логика модуля.

//RunServerScriptUnsafe( "rp_chat@unsafe_SetChatTarget", targetId, 0, 0, null, null );
void unsafe_SetChatTarget( Critter& cr, int id, int, int, string@, int[]@ )
{
	if( !SetChatTarget( cr, uint( id ) ) )
		testInfo( cr, "Failed to set chat target: " + cr.Id + " " + id );
}

//Устанавливает новую цель для "ролевых возможностей чата": серого текста или речи за целевое существо.
//Используемая "обратная связь" отвечает за возможность говорить за ЛЮБЫХ животных у ГМов, и СВОИХ животных у обычных игроков.
bool SetChatTarget( Critter& cr, uint id )
{	
	cr.ParamBase[ CR_TALKING_TARGET_ID ] = id;
	
	if( isGM( cr ) && cr.Id != id ) //Если ГМ и не сам себя.
	{
		//Отменяет обратную связь со старым существом.
		unbound( cr, cr.StatBase[ ST_FOLLOW_CRIT ] );

		//Создает обратную связь с новым существом.
		bound( cr, cr.ParamBase[ CR_TALKING_TARGET_ID ] );
	}

	//Для визульного отображения - стрелочки над целью.
	cr.StatBase[ ST_FOLLOW_CRIT ] = cr.ParamBase[ CR_TALKING_TARGET_ID ];
	
	return true;
}

//RunServerScriptUnsafe( "rp_chat@unsafe_SayChatMessage", sayType, hexX, hexY, message, null );
void unsafe_SayChatMessage( Critter& cr, int sayType, int x, int y, string@ message, int[]@ )
{
	if( cr.IsDead() ) { return; }

	if( !SayChatMessage( cr, sayType, x, y, message ) )
		testInfo( cr, "Failed to say chat message: " + cr.Id + " " + sayType + " " + x + " " + y + " '" + message + "'" );
}

bool SayChatMessage( Critter& cr, int sayType, int x, int y, string@ message )
{
	bool isNear = GetDistantion( x, y, cr.HexX, cr.HexY ) < 6;

	//TODO: debug only, remove after successfull public tests
	testInfo( cr, 	( isGM( cr ) ? "" : "!" ) + "GM " + 
					cr.ParamBase[ CR_TALKING_TARGET_ID ] + " " + cr.StatBase[ ST_FOLLOW_CRIT ] + " " + cr.Stat[ ST_LEVEL ] + 
					" [" + x + ", " + y + " ] [" + cr.HexX + ", " + cr.HexY + " ] " + 
					( isNear ? "" : "!" ) + "Near" );
	
	if( sayType != SAY_SOCIAL && ( cr.StatBase[ ST_FOLLOW_CRIT ] == 0 || cr.StatBase[ ST_FOLLOW_CRIT ] != cr.ParamBase[ CR_TALKING_TARGET_ID ] ) )
	{	//Если это не "эмбиент"-сообщение (серый текст), нет цели или "сбилась" цель - ведём стандартную речь.
		cr.Say( sayType, message );
		SayLog( cr, sayType, message );
		return false;
	}
	
	if( sayType == SAY_SOCIAL || cr.StatBase[ ST_FOLLOW_CRIT ] == int( cr.Id ) ) //Серый текст.
	{
		SayLog( cr, sayType, message );
		
		if( !isGM( cr ) )
		{
			if( cr.Stat[ ST_LEVEL ] < 12 )//Карма-перк совать сюда.
			{
				cr.Say( SAY_NETMSG, "Доступно с 12го уровня." );
				return false;
			}			
			if( !isNear )
			{
				if( sayType == SAY_SOCIAL )
					cr.Say( SAY_NETMSG, "Курсор слишком далеко, предел 5 гексов." );
				else
					cr.Say( sayType, message );
				
				return false;
			}
		}
		
		Map@ map = cr.GetMap();
		if( !valid( map ) ) return false;
		map.SetText( x, y, isGM( cr ) ? COLOR_GRAY : COLOR_LGRAY, message );
	}
	else
	{
		Critter@ target;
		if( !Find( target, cr.StatBase[ ST_FOLLOW_CRIT ] ) || target.IsDead() || target.StatBase[ ST_FOLLOW_CRIT ] != int( cr.Id ) || ( !isGM( cr ) && target.IsPlayer() ) ) 
		{ //Цель не найдена, не "зацеплена" или мертва - не сможет говорить. Дополнительное исключение - для защиты от разговоров "за зацепленных за себя" персонажей, если ты не ГМ.
			cr.Say( sayType, message );
			return false;
		}
		
		SayLog( target, sayType, message, "[ " + IdName( cr ) + " ] -> " );
		
		if( target.Stat[ ST_CURRENT_HP ] < 0 || target.IsKnockout() )
		{
			Map@ map = target.GetMap();
			if( !valid( map ) ) return false;
			//map.SetText( target.HexX, target.HexY, COLOR_TEXT, "|0x00000000 :" + target.Id + ":|0xf9fa94 " + message );
			map.SetText( target.HexX, target.HexY, COLOR_TEXT, "|0xf9fa94 " + message );//TODO: Вынести отображение текста в клиентские скрипты, а-ля rp_combat.fos
		}
		else
		{
			target.Say( sayType, message );
		}
	}
	
	return true;
}

//Код шамана, не трогать! Всемирное наследие ЮНЕСКО!
void heard_radio_log_ch0( Critter& cr, string@ message )
{
	if( !valid( message ) )
		return;

	file f;
	if( f.open("logs\\radio_0.txt", "a") < 0 ) 
		return;
	
	f.writeString(message + "\n");
	f.close();
	
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
		cr.Say( SAY_NETMSG, ">> " + message );
}

void unsafe_GM_Hear_Radio( Critter& cr, int, int, int, string@ message, int[]@) //TODO: Причесать код, расширить функциональность.
{
	if( cr.CountItem( PID_RADIO ) < 1 ) //А радио ведь не только PID_RADIO может быть...
		return;

	array<int> channels;
	bool ch0 = false;
	array<Item@> items;
	if( cr.GetItems( -1, items ) > 0 )
		for( uint i = 0, l = items.length; i < l; i++ ) 
		{
			if( FLAG( items[i].Flags, ITEM_RADIO ) && !FLAG( items[i].RadioFlags, RADIO_DISABLE_SEND ) )
			{
				if( items[i].RadioChannel == 0 )
					ch0 = true;
				channels.insertLast( int( items[i].RadioChannel ) );
			}
		}
	

	if( ch0 )
		heard_radio_log_ch0( cr, message );
	
    Critter@[] crs;
    GetAllPlayers( crs );

    string str = enlistINT( channels ) + " " + GetPlayerName( cr.Id ) + ": |0xFFFFFFFF ..." + message +  "...";

    for( uint i = 0, j = crs.length(); i < j; i++ )
    {
        if( !valid( crs[i] ) || !isGM( crs[i] ) || !sinfFLAG( crs[i], SINF_RADIO ) )
            continue;
		if( crs[i].Id == cr.Id )
			continue;
        crs[ i ].Say( SAY_NETMSG, str );
    }
}

void unsafe_GM_Hear_Whisper( Critter& cr, int, int, int, string@ message, int[]@ ) //TODO: Причесать код.
{
    Critter@[] crs;
    GetAllPlayers( crs );
	
	Map @map = cr.GetMap();
	if(!valid(map)) return;

    for( uint i = 0, j = crs.length(); i < j; i++ )
    {
        if( !valid( crs[i] ) || !isGM( crs[i] ) || !sinfFLAG( crs[i], SINF_WHISPER ) )
            continue;
		if( crs[i].Id == cr.Id )
			continue;
		
		Map@ map1 = crs[i].GetMap();
		if( !valid(map1) || map1.Id != map.Id ) continue;
		
		if( GetDistantion( cr.HexX, cr.HexY, crs[i].HexX, crs[i].HexY ) <= __WisperDist )
			continue;
		
		crs[ i ].RunClientScript( "rp_client@__HearWhisper", cr.HexX, cr.HexY, 0, GetPlayerName(cr.Id) + "@" + message, null );
    }
}

void unsafe_shout_all( Critter& cr, int, int, int, string@ message, int[]@ )//TODO: Причесать код.
{
	uint dist = ( isGM( cr ) ? 999 : cr.Stat[ ST_STRENGTH ] * 10 );

	Map@ map = cr.GetMap();
	if(!valid(map)) return;
	
	Critter@[] crs;
	uint count = map.GetCrittersHex(cr.HexX, cr.HexY, dist, FIND_ALL, crs);

    Critter@[] seeing;
	Critter@[] source = { cr };
	uint count2 = map.GetCrittersSeeing( source, true, FIND_ALL | FIND_ONLY_PLAYERS, seeing );

	for( uint i = 0; i < count; i++ )
	{
		bool isSkipping = false;
		for( uint j = 0; j < count2; j++ )
			if( crs[i].Id == seeing[j].Id )
			{
				isSkipping = true;
				break;
			}
		if( isSkipping )
			continue;
		
		uint dist = GetDistantion( cr.HexX, cr.HexY, crs[i].HexX, crs[i].HexY );
		if( int( dist ) <= crs[i].Stat[ ST_PERCEPTION ] * 10 )
			crs[i].Say( SAY_NETMSG, "???: |0x00FF0000 !!! " + strupr( message ) + " !!!" );
	}
}

void unsafe_SayLog( Critter& cr, int sayType, int, int, string@ message, int[]@ )
{
	if( !SayLog( cr, sayType, message ) )
		testInfo( cr, "Failed to log text: #" + cr.Id + " " + sayType + " '" + message + "'" );
}

//import bool SayLog( Critter& cr, int sayType, string@ message ) from "rp_chat";
bool SayLog( Critter& cr, int sayType, string@ message ) { return SayLog( cr, sayType, message, null ); }
bool SayLog( Critter& cr, int sayType, string@ message, string @pre_message )
{
	string data = ( valid( pre_message ) ? pre_message : "" ) + IdName( cr ) + " - ";
	switch( sayType )
	{	//Можно было бы и просто массивом соответствия задать..
		case( SAY_NORM ): 	SayPrepare( cr, data, message, "" );				break;
		case( SAY_EMOTE ): 	SayPrepare( cr, data, message, "**" ); 				break;
		case( SAY_SOCIAL ):	SayPrepare( cr, data, message, "::"	);				break; 
		case( SAY_WHISP ):	SayPrepare( cr, data, strlwr(message), ".." ); 		break;
		case( SAY_SHOUT ):	SayPrepare( cr, data, strupr(message), "!!!"  ); 	break; 
		case( SAY_RADIO ): 	SayPrepare( cr, data, message, "..пшш.." ); 		break; 
		case( SAY_NETMSG ): SayPrepare( cr, data, message, "" ); 				break; 
		default: 
			Log( "Unhandled sayType for SayLog: #" + cr.Id + " " + sayType + " '" + message + "'" ); //TODO: Надо-ли дублировать информацию?
			return testInfo( cr, "Unhandled sayType for SayLog: #" + cr.Id + " " + sayType + " '" + message + "'" );
	}
	return true;
}

import void SayLog( Map@ map, string@ message ) from "general_unsafe";
//TODO: Либо вынести логгирования в отдельный модуль, либо перенести остальную логику сюда же.
void SayPrepare( Critter& cr, string data, string message, string effect ) 
{
	SayLog( cr.GetMap(), data + effect + message + effect );
}


void unsafe_stopTyping( Critter& cr, int, int, int, string@, int[]@ )
{
	StopTyping(cr);
}

void unsafe_ShowTyping( Critter& cr, int, int, int, string@, int[]@ )
{
	ShowTyping(cr);	
}

void ShowTyping( Critter& cr )
{
	if( isGM( cr ) && cr.ParamBase[ QST_INVIS ] != 0 ) return;
	if( FLAG( cr.Param[ MIO_FLAGS ], ITEM_NO_BLOCK ) ) { return; }

	Critter@ target = @cr;
	if( cr.StatBase[ ST_FOLLOW_CRIT ] != 0 && cr.ParamBase[ CR_TALKING_TARGET_ID ] == cr.StatBase[ ST_FOLLOW_CRIT ] )
		@target = GetCritter( cr.StatBase[ ST_FOLLOW_CRIT ] );
	
	if( !valid(target) || target.StatBase[ ST_FOLLOW_CRIT ] != int( cr.Id ) )
		@target = @cr;
	
	target.ParamBase[CR_TYPING_TIME] = __FullSecond + __TypingDelay * __TimeMultiplier;
	//if( target.GetTimeEvents( CTE_TYPING, null, null, null ) == 0 )
	//	target.AddTimeEvent( "cte_ShowTyping", REAL_SECOND( 5 ), CTE_TYPING, 0 );
}

void StopTyping( Critter& cr )
{
	if( isGM( cr ) && cr.ParamBase[ QST_INVIS ] != 0 ) return;

	Critter@ target = @cr;
	if( cr.StatBase[ ST_FOLLOW_CRIT ] != 0 && cr.ParamBase[ CR_TALKING_TARGET_ID ] == cr.StatBase[ ST_FOLLOW_CRIT ] )
		@target = GetCritter( cr.StatBase[ ST_FOLLOW_CRIT ] );

	if( !valid(target) || target.StatBase[ ST_FOLLOW_CRIT ] != int( cr.Id ) )
		@target = @cr;
	
	target.ParamBase[CR_TYPING_TIME] = 0;
	//target.EraseTimeEvents( CTE_TYPING );
}
/*
uint cte_ShowTyping( Critter& cr, int identifier, uint& rate ) 
{
	if( isGM( cr ) && cr.ParamBase[ QST_INVIS ] != 0 ) return 0;

	if( cr.ParamBase[CR_TYPING_TIME] > 0 )
	{
		string text = "|0xFF828a96 ";
		for( uint i = 0; i <= rate % 3; i++ )
			text += " .";
		rate++;
		
		Map@ map = cr.GetMap();
		if( !valid(map) )
			cr.Say( SAY_NORM_ON_HEAD, text );
		else
			map.SetText( cr.HexX, cr.HexY, COLOR_SAND, text ); //Нужно написать модуль, который отображал текст над именем криттера всем кто его видит, плюс учитывал дистанцию и рассеивание звуков.

		cr.ParamBase[CR_TYPING_TIME]--;
		return REAL_MS(500);
	}
	return 0;
}
*/