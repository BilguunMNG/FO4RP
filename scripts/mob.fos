#include "_utils.fos"
#include "_npc_pids.fos"
#include "npc_planes_h.fos"

#define DISTANCE_GROUP_RADIUS		( 15 )
#define DISTANCE_AGGRO				# (cr)	( ( cr.StatBase[ST_STRENGTH] + 2 ) * 2 )
#define DISTANCE_UNAGGRO			# (cr)	( ( cr.StatBase[ST_STRENGTH] + 2 ) * 4 )

#define VarWandering             StatBase[ ST_VAR5 ]

#define MSG_GROUP_ATTACK         ( 16001 )

void GM_MobInit( Critter& npc ) // Export
{
    npc.SetScript( "_MobInit" );
	npc.Say( SAY_EMOTE, "hisses" );
}

void _MobInit( Critter& npc, bool firstTime )
{
    npc.ModeBase[ MODE_NO_HOME ] = 1;

	npc.StatBase[ ST_REPLICATION_TIME ] = -1;

	npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER,   "_CritterBecameVisible" );
	npc.SetEvent( CRITTER_EVENT_HIDE_CRITTER, 	"_CritterOutOfSight" );
    npc.SetEvent( CRITTER_EVENT_IDLE,        	"_Idle" );
    npc.SetEvent( CRITTER_EVENT_MESSAGE,     	"_OnMessage" );
    npc.SetEvent( CRITTER_EVENT_PLANE_BEGIN, 	"_PlaneBegin" );
	npc.SetEvent( CRITTER_EVENT_PLANE_RUN, 	 	"_PlaneRun" );
	npc.SetEvent( CRITTER_EVENT_PLANE_END, 	 	"_PlaneEnd" );
    npc.SetEvent( CRITTER_EVENT_DEAD,        	"_MyDeath" );
    npc.SetEvent( CRITTER_EVENT_RESPAWN,    	 null );
    npc.SetEvent( CRITTER_EVENT_ATTACKED,    	"_Attacked" );
	
    npc.ShowCritterDist1 = DISTANCE_AGGRO( npc );
    npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER_1, "_CritterInAggroRange" );

	npc.ShowCritterDist2 = DISTANCE_UNAGGRO( npc );
	npc.SetEvent( CRITTER_EVENT_HIDE_CRITTER_2, "_CritterOutOfAggroRange" );
}

void _CritterBecameVisible( Critter& self, Critter& target )
{
	uint dist = GetDistantion( self.HexX, self.HexY, target.HexX, target.HexY );
	if( int( dist ) > DISTANCE_AGGRO( self ) ) {
		return;
	}
    _ShowPlayer( self, target );
}
void _CritterInAggroRange( Critter& self, Critter& target )
{
	if( not self.IsSee( target ) )
	{
		return;
	}
    _ShowPlayer( self, target );
}

void _CritterOutOfSight( Critter& self, Critter& target )
{
	//AttackOrFind( self, target );
}

void _CritterOutOfAggroRange( Critter& self, Critter& target )
{
	self.EraseEnemyFromStack( target.Id );
	EraseAttackPlane( self, target );
}

// CRITTER_EVENT_DEAD
void _MyDeath( Critter& npc, Critter@ killer )
{
    npc.ClearEnemyStack();
	npc.AddTimeEvent ( "rotting@cte_rotten", 0, CTE_ROTTEN, 0 );
}

// CRITTER_EVENT_RESPAWN
void _Respawn( Critter& npc )
{
    DeleteNpc( npc );
}

// CRITTER_EVENT_SHOW_CRITTER
void _ShowPlayer( Critter& npc, Critter& player )
{
    if( !player.IsPlayer() )
	{
        return;
	}
	
    if( npc.StatBase[ ST_BASE_CRTYPE ] == player.StatBase[ ST_BASE_CRTYPE ] )
	{
		return;
	}

	if( int( player.Id ) == npc.StatBase [ST_FOLLOW_CRIT] || isGM( player ) )
	{
        npc.EraseEnemyFromStack( player.Id );
        EraseAttackPlane( npc, player );
		return;
	}
	
	if( npc.StatBase[ ST_BODY_TYPE ] == BT_DOG )  //Dogs.
	{
		uint dist = GetDistantion( player.HexX, player.HexY, npc.HexX, npc.HexY );
		if( int( dist ) > 4 ) 
		{
			uint[] emote = { STR_EMOTE_SNIFF, STR_EMOTE_GRAWL, STR_EMOTE_GRIN, STR_EMOTE_BARK };
			int n = Random( 0, 2 ) + Random( 0, 1 );
			npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, emote[n] );
			npc.SetDir( GetDirection( npc.HexX, npc.HexY, player.HexX, player.HexY ) );
			return;
		}
	}
	npc.SendMessage( MSG_GROUP_ATTACK, player.Id, MESSAGE_TO_WHO_SEES_ME );
	AddAttackPlane( npc, AI_PLANE_ATTACK_PRIORITY + 1, player );
}

// CRITTER_EVENT_HIDE_CRITTER
void _HidePlayer( Critter& npc, Critter& player )
{
    if( not player.IsPlayer() )
	{
        return;
	}
	
	uint[] weak_mobs = { BT_MANTI, BT_GIANT_ANT, BT_RAT, BT_RADSCORPION };
	if( weak_mobs.find( npc.StatBase[ ST_BODY_TYPE ] ) != -1 && ( npc.Stat[ ST_MAX_LIFE ] < 100 || ( npc.Stat[ ST_CURRENT_HP ] < npc.Stat[ ST_MAX_LIFE ] * 0.33 ) ) )
	{
		uint   mapId = 0;
		uint16 homeX = 0;
		uint16 homeY = 0;
		uint8  dir = 0;
		npc.GetHomePos( mapId, homeX, homeY, dir );
		
		if( npc.GetMapId() != mapId )
		{
			homeX = npc.HexX;
			homeY = npc.HexY;
		}
		
		uint dist = GetDistantion( homeX, homeY, npc.HexX, npc.HexY );
		if( dist > 20 )
		{
			npc.EraseEnemyFromStack( player.Id );
			EraseAttackPlane( npc, player );
		}
	}
}

// CRITTER_EVENT_MESSAGE Critter::SendMessage.
void _OnMessage( Critter& npc, Critter& fromCrit, int message, int value )
{
    if( npc.IsPlayer() )
	{
        return;
	}
	
    if( not npc.IsLife() )
	{
        return;
    }
	
	if( npc.Stat[ ST_TEAM_ID ] == 0 )
	{
        return;
	}
	
	if( npc.Stat[ ST_TEAM_ID ] != fromCrit.Stat[ ST_TEAM_ID ] )
	{
	   return;
	}

    if( fromCrit.IsPlayer() )
    {
        AddAttackPlane( npc, 10, fromCrit );
    }

    if( message == MSG_GROUP_ATTACK )
	{
        Critter@ target = ::GetCritter( value );
        
		if( !valid( target ) )
		{
			return;
		}
		
		Map@ mapNpc = npc.GetMap();
		Map@ mapTarget = target.GetMap();
		
		if( mapNpc.Id != mapTarget.Id )
		{
			return;
		}
		
		uint dist = ::GetCrittersDistantion( npc, target ) ;
		uint max_dist = DISTANCE_UNAGGRO(npc);
        
		if( dist >= max_dist )
		{
			return;
		}
		
		AttackOrFind(npc, target);
	}
}

// CRITTER_EVENT_IDLE
// Простой, вызывается каждые __CritterIdleTick секунд, для изменения времени вызывайте Critter::Wait в функции.
void _Idle( Critter& npc )
{
	if( npc.IsPlayer() )
	{
		npc.SetEvent( CRITTER_EVENT_IDLE, null );
		return;
	}

	if( npc.StatBase [ST_FOLLOW_CRIT] != 0 )
	{
		npc.DropPlanes();
		return;
	}
	
	if( npc.IsDead() || npc.IsKnockout() )
	{
		return;
	}

	if( npc.IsBusy() || !npc.IsNoPlanes() )
	{
		return;
	}
	
	if( npc.StatBase[ ST_BODY_TYPE ] == BT_DOG )
	{
		Map@ map = npc.GetMap();
		if( !valid(map) )
		{
			return; 
		}
		
		Critter@[] players;
		uint count = map.GetCrittersHex( npc.HexX, npc.HexY, 15, FIND_ONLY_PLAYERS | FIND_LIFE, players );
		Critter@ closest = null;
		uint min = 999;
		
		for( uint i = 0; i < count; i++ )
		{
			uint dist = GetDistantion( players[i].HexX, players[i].HexY, npc.HexX, npc.HexY );
			if( dist > 8 )
			{
				EraseAttackPlane( npc, players[i] );
				continue;
			}
			
			if( dist < 4 )
			{
				if( dist < min )
				{
					min = dist;
					@closest = @players[i];
				}
			}
			else
			{
				_ShowPlayer( npc, players[i] );
			}
		}
		
		if( valid( closest ) )
		{
			npc.DropPlanes();
			AddAttackPlane( npc, 0, closest );
			return;
		}
		else
		{
			if( Random( 1, 100 ) == 100 )
			{
				npc.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_COMBAT, STR_EMOTE_HOWL );
			}
		}
	}
	uint mapId = 0;
	uint16 homeX = 0;
	uint16 homeY = 0;
	uint8 dir = 0;
	npc.GetHomePos( mapId, homeX, homeY, dir );
	
	if( npc.GetMapId() != mapId )
	{
		return; //Если не на домашней карте - не рыпаемся.
	}
	
	if( npc.ModeBase[ MODE_NO_HOME ] == 1 )
	{
		if( npc.VarWandering == 0 ) {
			uint dist = GetDistantion( homeX, homeY, npc.HexX, npc.HexY );

			if( int( dist ) > DISTANCE_AGGRO( npc ) ) //Топаем к гнезду, если загулялись.
			{
				npc.DropPlanes();
				AddWalkPlane( npc, 0, homeX, homeY, dir, false, 0 );
			}
			else
			{
				npc.MoveRandom();
			}

			npc.VarWandering = 1;
		}
		else
		{
			npc.VarWandering = 0;
			npc.Wait( Random( 1000, 3000 ) );
		}
	}
}

// CRITTER_EVENT_PLANE_BEGIN
// Когда движок создает план для Нпц. Вызывается и для потомков основного плана в том числе.
// int reason указывает причину начала плана (см. Plane begin/wait/end reasons в _defines.fos).
int _PlaneBegin( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( plane.Type == AI_PLANE_ATTACK )
    {
        Critter@ target = ::GetCritter( plane.Attack_TargId );
        if( !valid( target ) )
		{
			return PLANE_RUN_GLOBAL;
		}

        if( target.Stat[ ST_TEAM_ID ] == npc.Stat[ ST_TEAM_ID ] )
		{
			return PLANE_DISCARD;                                                   // не атакуем всех из своей команды
		}

        if( reason == REASON_FOUND_IN_ENEMY_STACK || reason == REASON_FROM_SCRIPT )
        {
            uint distantion = ::GetCrittersDistantion( npc, target );
			bool can_see = npc.IsSee(target);
            if( int(distantion) <= DISTANCE_UNAGGRO(npc) )
            {
				if( distantion > 1 )
				{
					// анализ на дальность
					uint pathLength = npc.GetMap().GetPathLength( npc, target.HexX, target.HexY, 1 );
					// если пройти нельзя, то не идем
					if( pathLength == 0 )
					{
						return PLANE_DISCARD;
					}
					// если слишком далеко, то не идем
					if( pathLength > distantion * 3 )
					{
						return PLANE_DISCARD;
					}
				}
                return PLANE_KEEP;
            }
            else
            {
                return PLANE_DISCARD;
            }
        }
    }
	else if ( reason == REASON_FROM_SCRIPT )
	{
		return PLANE_KEEP;
	}
    return PLANE_RUN_GLOBAL;
}

int _PlaneRun( Critter& npc, NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2 ) 
{
	return PLANE_RUN_GLOBAL;
}

int _PlaneEnd( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem ) 
{
	if( reason == REASON_GAG_CRITTER && someCr.IsNpc() )
	{
        if( someCr.ParamBase[ST_TEAM_ID] != npc.ParamBase[ST_TEAM_ID] )
		{
            return PLANE_RUN_GLOBAL;
		}
		
        if( TryLetPassage( someCr, npc ) )
		{
            npc.Wait( AI_DELAY );
            return PLANE_KEEP;
        }
    }
	return PLANE_RUN_GLOBAL;
}

// CRITTER_EVENT_ATTACKED
bool _Attacked( Critter& npc, Critter& attacker )
{
	if( int( attacker.Id ) == npc.StatBase [ST_FOLLOW_CRIT] )
	{
        npc.EraseEnemyFromStack( attacker.Id );
        EraseAttackPlane( npc, attacker );
		return true;
	}
	npc.SendMessage( MSG_GROUP_ATTACK, attacker.Id, MESSAGE_TO_WHO_SEES_ME );
	AttackOrFind(npc, attacker);
    return true;     // Handle attacked processing
}

void AttackOrFind( Critter& self, Critter& target )
{
	if( !valid( target ) )
	{
		return;
	}
	
	if( target.IsDead() )
	{
		self.EraseEnemyFromStack( target.Id );
		EraseAttackPlane( self, target );
	}
	
	if( self.IsSee( target ) )
	{
		AddAttackPlane( self, 0, target );
	}
	else
	{
		AddWalkPlane( self, AI_PLANE_ATTACK_PRIORITY - 1, target.HexX, target.HexY, Random( 0, 5 ), true, 1 );
	}
}
