#ifndef JUKEBOX
#define JUKEBOX

#include "_utils.fos"
#include "vending_h.fos"

import void PlayMusic( Map& map, string& musicName, uint pos, uint repeat ) from "media";

void TransferItemToJukebox( Item& item, Item& jukebox ) {
    uint16 pid = item.GetProtoId();
    _SubItem( item, 1 );
    jukebox.AddItem( pid, 1, 0 );
}

void PlayJukeSound( Map& map, Item & jukebox ) {
	map.PlaySound( VendingSoundNames[ Random( 0, VendingSoundNames.length() -1 ) ], jukebox.HexX, jukebox.HexY, 5 );
}

class MenuJukebox: CenteredMenuHandler {
    uint jukebox_id;
    uint map_id;
	uint level;
	int selectorPos;
	uint arrayPos;
	
    MenuJukebox( Item& jukebox, Map& map ) {
        jukebox_id = jukebox.Id;
        map_id = map.Id;
		selectorPos = jukebox.ARRAY_POSITON;
		arrayPos = jukebox.ARRAY_POSITON;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap( map_id );
        Item@ jukebox = GetItem( jukebox_id );
	
	bool locked_in_place = !FLAG( jukebox.Flags, ITEM_CAN_PICKUP );
	
        if( map is null || jukebox is null ) {
            return false;
        }
		
		bool ContineousPlay = ( jukebox.JUKEBOX_MODE == MODE_CONTINUOUS );
		
		Item@[] stuff;
		JukeboxTune@[] tunes;
		jukebox.GetItems( uint( -1 ), stuff );
		if( stuff.length() > 0 ) {
			for( uint i = 0; i < stuff.length(); i ++ ) {
				uint16 Pid = stuff[i].GetProtoId();
				JukeboxTune@ tune = getJukeboxTune( stuff[i] ); 
				if( !valid( tune ) ) { 
					continue; 
				} else {
					tunes.insertLast( tune );
				}
			}
		}
		
		if( tunes.length() > 0 ) {
			if ( menu.Button( "Предыдущая" ) ) {
				selectorPos--;
				if( arrayPos == 0 ) {
					arrayPos = tunes.length() - 1;
					selectorPos = arrayPos;
				} else {
					arrayPos = selectorPos;
				}
				JukeboxTune@ selectedTune = tunes[arrayPos];
				jukebox.PRODUCT = selectedTune.pid;
				jukebox.ARRAY_POSITON = arrayPos;
				return true;
			}
			
			if ( menu.Button( "Следующая" ) ) {
				selectorPos++;
				if( arrayPos == tunes.length() -1 ) {
					arrayPos = 0;
					selectorPos = arrayPos;
				} else {
					arrayPos = selectorPos;
				}
				JukeboxTune@ selectedTune = tunes[arrayPos];
				jukebox.PRODUCT = selectedTune.pid;
				jukebox.ARRAY_POSITON = arrayPos;
				return true;
			}
		}
		
		string info; 
		info = !ContineousPlay ? "1 мелодия" : "До обнуления";						
		if( menu.Button( "Режим: " + info ) ) {
			!ContineousPlay ? jukebox.JUKEBOX_MODE = MODE_CONTINUOUS : jukebox.JUKEBOX_MODE = MODE_SINGLE;
		}
		
		if( jukebox.JUKEBOX_STATUS == STATUS_WAITING ) {
			if( menu.Button( "Проиграть мелодию" ) ) {
				if( jukebox.BALANCE >= jukebox.PRICE ) {
					uint16 Pid = jukebox.PRODUCT;
					Item@ vinilCheck = jukebox.GetItem( Pid, 0 );
					
					if( !valid( vinilCheck ) ) {
						PlayJukeSound( map, jukebox );
						jukebox.PRODUCT = 0;
						cr.Say( SAY_NETMSG, "|0xFFFF00 Вы заметили, что выбранная пластинка отсутствует!" );
						return false; 
					}
					
					JukeboxTune@ melody = getJukeboxTuneByPid( Pid );
					PlayJukeSound( map, jukebox );
					
					jukebox.BALANCE -= jukebox.PRICE;
					PlayMusic( map, "DUMMY", 0, 0 );   // to mute background music. Better not create "DUMMY" sound file ;)
					map.PlaySound( melody.musicFile, jukebox.HexX, jukebox.HexY, 10 );
					
					jukebox.JUKEBOX_STATUS = STATUS_PLAYING;
					
					uint[] values = { jukebox.Id, map.Id };
					CreateTimeEvent( AFTER( REAL_SECOND( melody.length ) ), "e_JukeboxStatus", values, true );
					
					setAnimState( jukebox );
					return false;
					
				} else {
					map.PlaySound( "LOSER.ACM", jukebox.HexX, jukebox.HexY, 5 );
					return true;
				}
			}
			
			if( jukebox.JUKEBOX_VOLUME < 30 && menu.Button( "Увеличить радиус" ) ) {
				jukebox.JUKEBOX_VOLUME ++;
			}
			
			if( jukebox.JUKEBOX_VOLUME != 0 && menu.Button( "Уменьшить радиус" ) ) {
				jukebox.JUKEBOX_VOLUME --;
			}
			
					for( uint i = 0, len = cash_pids.length(); i < len; i++ ) {
			
			uint16 pid = cash_pids[i];
			int balance_change = int( cash_values[i] );
			Item@ cash = cr.GetItem( pid, -1 );
			
			if( valid( cash ) && menu.Button( "Вставить "+balance_change+" $" ) ) {
				TransferItemToJukebox( cash, jukebox );
				PlayJukeSound( map, jukebox );
				jukebox.BALANCE += balance_change;
				cr.Say( SAY_EMOTE_ON_HEAD, "вставляет деньги в аппарат" );
				return true;
			}
		}
		
			if( menu.Button( "Возврат денег" ) ) {
				Item@ change = jukebox.GetItem( PID_BOTTLE_CAPS, 0 );
				if( valid( change ) && jukebox.BALANCE > 0) {
					int changeCount = MIN( int( change.GetCount() ), jukebox.BALANCE );
					_SubItem( change, uint( changeCount ) );
					cr.AddItem( PID_BOTTLE_CAPS, changeCount );
					jukebox.BALANCE -= changeCount;
					map.SetText( jukebox.HexX, jukebox.HexY, COLOR_LGRAY, ":звон монет:" );
					cr.Say( SAY_EMOTE, "забирает сдачу" );
					return false;
				} else {
					map.PlaySound( "LOSER.ACM", jukebox.HexX, jukebox.HexY, jukebox.JUKEBOX_VOLUME );
					cr.Say( SAY_NETMSG, "|0xFFFF00 Похоже, что размен закончился!" );
					return true;
				}
			}
			
			if( !FLAG( jukebox.LockerCondition, LOCKER_LOCKED ) ) {
				
				if( menu.Button( "Выставить цену" ) ) {
					cr.RunClientScript( "client_screen_numberpad@ShowScreen", jukebox.Id, 0, 0, "Введите новую цену", null );
					return false;
				}

				if( locked_in_place ) {
					if( menu.Button( "Демонтировать" ) ) {
						LockInPlace( cr, jukebox );
						return true;
					}
				} else {
					if( menu.Button( "Установить" ) ) {
						LockInPlace( cr, jukebox );
						return true;
					}

					if( menu.Button( "Поднять" ) ) {
						PickItem( cr, jukebox );
						return false;
					}			
				}
			}

			if( menu.Button( "Открыть сейф" ) ) {
				if( FLAG( jukebox.LockerCondition, LOCKER_LOCKED ) ) {
					cr.Say( SAY_NETMSG, "|0xFFFF00 Аппарат заперт." );
					map.PlaySound( "ILCNTNRB.ACM", jukebox.HexX, jukebox.HexY, 5 );
					return true;
				} else {
					ShowContainer( cr, jukebox, TRANSFER_HEX_CONT_UP );
					map.PlaySound( "IOCNTNRB.ACM", jukebox.HexX, jukebox.HexY, 5 );
					cr.Say( SAY_EMOTE, "открывает проигрыватель" );
					return false;
				}
			}
		}
		if( menu.Button( "Прекратить работу" ) ) {
			return false;
		}
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
	
		Item@ jukebox = GetItem( jukebox_id );
		string status;
		string mode = "|0x3CF800 \nРежим: ";
		string info = "Музыкальная машина № ";
		string balance = jukebox.BALANCE;
		string price = jukebox.PRICE;
		string volume = jukebox.JUKEBOX_VOLUME;
		
		info += "|0xFFFF00 " + jukebox.Id + "\n";
		
		Item@[] productItm;
		jukebox.GetItems( uint( -1 ), productItm );
		if( productItm.length() > 0 && jukebox.PRODUCT != 0 ) {
			string tune =_GetProtoShortDisc( jukebox.PRODUCT );
			uint len = productItm.length();
			string duration;
			uint lengthMin = 0;
			string lengthSec;
			for( uint i = 0; i < len; i++ )
			{			
				Item@ product = productItm[i];
				if( product.GetProtoId() == jukebox.PRODUCT ) {
					JukeboxTune@ selectedMelody = getJukeboxTune( product );
					lengthMin = floor( selectedMelody.length / 60.00f );
					float seconds = selectedMelody.length - ( lengthMin * 60 );
					seconds / 10.0f < 1 ? lengthSec = "0" + seconds : lengthSec = seconds;
					duration = lengthMin + ":" + lengthSec;
					break;
				}
			}
			
			info += "|0x3CF800 Выбранная мелодия: \n[ ";
			info += "|0xFFFF00 " + tune;
			info += "|0x3CF800  ]";
			info += "\nДлинна: ";
			info += "|0xFFFF00 " + duration;
			info += "|0x3CF800 . ";
		} else {
			info += "|0x3CF800 Выберите мелодию! \n";
		}
		
		info += "|0x3CF800 Радиус звука: ";
		info += "|0xFFFF00 " + volume;
		
		jukebox.JUKEBOX_MODE == MODE_SINGLE ? mode += "|0xFFFF00 1 мелодия" : mode += "|0xFFFF00 До обнуления";
		info += mode;
		
		info += "|0x3CF800 \nЦена 1й мелодии: ";
		info += "|0xFFFF00 " + price;
		
		jukebox.JUKEBOX_STATUS == STATUS_WAITING ? status += "|0x3CF800 Нажмите [Проиграть]." : status += "|0x3CF800 Мелодия играет.";
		info += "\n" + status ;
		
		info += "|0x3CF800  Баланс: ";
		info += "|0xFFFF00 " + balance;
		info += "|0x3CF800  $";
        return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
	
	bool ShouldRedraw( Critter& cr ) {
		return true;
    }
}

// точка входа из main.fos при юзе рукой
void StartMenuJukebox( Critter& cr, Item& jukebox ) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuJukebox( jukebox, map );
    iDialogBox@ menu = OpenMenu( cr, "Музыкальный Аппарат", handler );
}

uint e_JukeboxStatus( uint[]@ values )
{
	Item@ jukebox = GetItem( values[0] );
	if( !valid( jukebox ) ) { return 0; }
	
	int selectorPos = jukebox.ARRAY_POSITON;
	uint arrayPos = jukebox.ARRAY_POSITON;
	
	Map@ map = GetMap( values[1] );
	
	if( jukebox.JUKEBOX_MODE == MODE_CONTINUOUS ) {
		Item@[] stuff;
		JukeboxTune@[] tunes;
		jukebox.GetItems( uint( -1 ), stuff );
		if( stuff.length() > 0 ) {
			for( uint i = 0; i < stuff.length(); i ++ ) {
				uint16 Pid = stuff[i].GetProtoId();
				JukeboxTune@ tune = getJukeboxTune( stuff[i] ); 
				if( !valid( tune ) ) { 
					continue; 
				} else {
					tunes.insertLast( tune );
				}
			}
		}
		selectorPos++;
		if( arrayPos == tunes.length() -1 ) {
			arrayPos = 0;
			selectorPos = arrayPos;
		} else {
			arrayPos = selectorPos;
		}
		JukeboxTune@ selectedTune = tunes[arrayPos];
		jukebox.PRODUCT = selectedTune.pid;
		jukebox.ARRAY_POSITON = arrayPos;
		
		if( jukebox.BALANCE >= jukebox.PRICE ) {
			uint16 Pid = jukebox.PRODUCT;
			Item@ vinilCheck = jukebox.GetItem( Pid, 0 );
					
			if( !valid( vinilCheck ) ) {
				jukebox.PRODUCT = 0;
				return 0; 
			}
			
			JukeboxTune@ melody = getJukeboxTuneByPid( Pid );
			PlayJukeSound( map, jukebox );
			
			jukebox.BALANCE -= jukebox.PRICE;
			PlayMusic( map, "DUMMY", 0, 0 );   // to mute background music. Better not create "DUMMY" sound file ;)
			map.PlaySound( melody.musicFile, jukebox.HexX, jukebox.HexY, 10 );
			
			jukebox.JUKEBOX_STATUS = STATUS_PLAYING;
			
			uint[] values = { jukebox.Id };
			return ( REAL_SECOND( melody.length ) );
		}
	}
	
	jukebox.JUKEBOX_STATUS = STATUS_WAITING;
	setAnimState( jukebox );
	return 0;
}

class JukeboxTune
{
	uint16 pid;
	string musicFile;
	uint length;
	
	JukeboxTune( uint16 pid, string musicFile, uint length )
	{
        this.pid = pid;
		this.musicFile = musicFile;
		this.length = length;
	}
}

class JukeboxTuneCollection
{
	JukeboxTune@[] jukeboxTunes;
	JukeboxTuneCollection()
	{
	}
	
	JukeboxTuneCollection@ tune( uint16 pid, string musicFile, uint length ) 
	{
		this.jukeboxTunes.insertLast( JukeboxTune(  pid, musicFile, length ) );
		return this;
	}
	
	JukeboxTune@ get_by_pid( uint16 Pid ) 
	{
		JukeboxTuneCollection result;
		for( uint i = 0, len = this.jukeboxTunes.length(); i < len; i++ ) {
			if( this.jukeboxTunes[i].pid == Pid ) {
				return this.jukeboxTunes[i];
			}
		}
		return null;
	}
}

JukeboxTuneCollection@ jukeboxTunes = JukeboxTuneCollection()
	.tune( PID_JUKEBOX_DISK_XFILES, "xfiles.ogg", 260 )
	//.tune( PID_JUKEBOX_DISK_TMNT, "tmnt.ogg", 94 )
	.tune( PID_JUKEBOX_DISK_AFTER_DARK, "afterdark.ogg", 260 )
	.tune( PID_JUKEBOX_DISK_TERMINATOR,"terminator2.ogg", 121 )
	.tune( PID_JUKEBOX_DISK_SIXTEEN_TONS,"sixteentons.ogg", 166 )
	.tune( PID_JUKEBOX_DISK_MAYBE, "maybe.ogg", 180 )
	.tune( PID_JUKEBOX_DISK_WORLD_ON_FIRE, "worldonfire.ogg", 180 )
	.tune( PID_JUKEBOX_DISK_SPRINGTIME, "rockies.ogg", 114 )
	.tune( PID_JUKEBOX_DISK_ZERG, "zerg.ogg", 204 )
	.tune( PID_JUKEBOX_DISK_FIFTY_MEFATONS, "fiftymegatons.ogg",136 )
	.tune( PID_JUKEBOX_DISK_DARK_EYES, "darkeyes.ogg", 164 )
	.tune( PID_JUKEBOX_DISK_RADIOACTIVE_MAMA, "radioactivemama.ogg", 109 )
	.tune( PID_JUKEBOX_DISK_SUMMERTIME, "summertime.ogg", 181 )
	.tune( PID_JUKEBOX_DISK_CHEESE_MARCH, "imperialmarch.ogg", 139 )
	.tune( PID_JUKEBOX_DISK_SOLD_WORLD, "soldtheworld.ogg", 220 )
	.tune( PID_JUKEBOX_DISK_TRUE_LOVES, "loveshair.ogg", 205 )
	//.tune( PID_JUKEBOX_DISK_SEVER, "severnavsegda.ogg", 186 )
	//.tune( PID_JUKEBOX_DISK_RAD_ROCK, "radioaktivnirocknroll.ogg", 167 )
	.tune( PID_JUKEBOX_DISK_ROUND_TABLE, "roundtable.ogg", 350 )
	.tune( PID_JUKEBOX_DISK_HOLY_GRAIL, "holygrail.ogg", 116 )
	.tune( PID_JUKEBOX_DISK_WINTERS_SHELTER, "falloutshelter.ogg", 159 )
	.tune( PID_JUKEBOX_DISK_LOVED_BY_YOU, "lovedbyyou.ogg", 170 )
	.tune( PID_JUKEBOX_DISK_DREAM_ON, "Dreamon.ogg", 266 )
	.tune( PID_JUKEBOX_DISK_WOUNDERFUL_WORLD, "wonderfulworld.ogg", 135 )
	.tune( PID_JUKEBOX_DISK_LONDON_MARCH, "imperialmarch0.ogg", 181 )
	.tune( PID_JUKEBOX_DISK_LAIKA, "laika.ogg", 129 )
	.tune( PID_JUKEBOX_DISK_DARKSIDE_BLUES, "darksideblues.ogg", 175 )
	.tune( PID_JUKEBOX_DISK_TAMPICO, "tampico.ogg", 156 )
	.tune( PID_JUKEBOX_DISK_STILL_ALIVE, "stillalive.ogg", 175 )
	.tune( PID_JUKEBOX_DISK_CANTINA_BAND, "cantinaband.ogg", 169 )
	.tune( PID_JUKEBOX_DISK_ME_NICE, "askmenice.ogg", 297 )
	.tune( PID_JUKEBOX_DISK_SOMEBODY_TO_LOVE, "somebodytolove.ogg", 167 )	
	.tune( PID_JUKEBOX_DISK_PUTTIN, "ritz.ogg", 236 )
	.tune( PID_JUKEBOX_DISK_HBOMB, "hbombrock.ogg", 134 )
	.tune( PID_JUKEBOX_DISK_BARBER_BOMB, "atombomb.ogg", 186 )
	.tune( PID_JUKEBOX_DISK_GHOSTBUSTERS, "ghostbusters.ogg", 243 )
	.tune( PID_JUKEBOX_DISK_ATOMIC_COCTAIL, "atomiccocktail.ogg", 165 )
	.tune( PID_JUKEBOX_DISK_MOON_WAS_YELLOW, "moonwasyellow.ogg", 192 )
	.tune( PID_JUKEBOX_DISK_COLD_WAR, "coldwarwithyou.ogg", 166 )
	.tune( PID_JUKEBOX_DISK_ATOMIC_BOMB_BABY, "AtomBombBaby.ogg", 144 )
	.tune( PID_JUKEBOX_DISK_ROCK_IN, "rockininrhythm.ogg", 310 )
	.tune( PID_JUKEBOX_DISK_BLUE_LOU, "bluelou.ogg", 157 )
	.tune( PID_JUKEBOX_DISK_NEW_JUNK, "newjunkcity.ogg", 146 )
	.tune( PID_JUKEBOX_DISK_URANIUM, "uranium.ogg", 136 )
	.tune( PID_JUKEBOX_DISK_TWIST_AGAIN, "twistagain.ogg", 140 )
	.tune( PID_JUKEBOX_DISK_VODKA, "vodka.ogg", 217 )
	.tune( PID_JUKEBOX_DISK_NO_COMMUNIST, "nocommunist.ogg", 167 )
	.tune( PID_JUKEBOX_DISK_ATOMIC_POWER, "atomicpower.ogg", 158 )
	.tune( PID_JUKEBOX_DISK_WAY_TO_VEGAS, "waytovegas.ogg", 247 )
	.tune( PID_JUKEBOX_DISK_JUST_ALLOW, "onemore.ogg", 118 )
	.tune( PID_JUKEBOX_DISK_PARANOID, "paranoid.ogg", 172 )
	.tune( PID_JUKEBOX_DISK_CHAMBDERS_SHELTER, "falloutshelter0.ogg", 165 )
	//.tune( PID_JUKEBOX_DISK_STRANA_SOVETOV, "stranasovetov.ogg", 76 )
	//.tune( PID_JUKEBOX_DISK_DOROGA, "auctiondoroga.ogg", 205 )
	.tune( PID_JUKEBOX_DISK_MILBURN_ATOMIC, "atomicbaby.ogg", 154 )
	.tune( PID_JUKEBOX_DISK_TNT, "tnt.ogg", 221 )
	.tune( PID_JUKEBOX_DISK_JAVABAR, "javabar.ogg", 169 )
	.tune( PID_JUKEBOX_DISK_GREATBALLS, "greatballsoffire.ogg", 152 )
	.tune( PID_JUKEBOX_DISK_LONESOMEME, "ohlonesomeme.ogg", 148 )
	.tune( PID_JUKEBOX_DISK_BATTLENEWORLEANS, "thebattleofneworleans.ogg", 149 )
	.tune( PID_JUKEBOX_DISK_WATERLOO, "waterloo.ogg", 146 )
	.tune( PID_JUKEBOX_DISK_ITBENICE, "wouldntitbenice.ogg", 140 )
	.tune( PID_JUKEBOX_DISK_BILLIEJEAN, "billiejean.ogg", 293 )
	.tune( PID_JUKEBOX_DISK_DADDYCOOL, "daddycool.ogg", 208 )
	.tune( PID_JUKEBOX_DISK_NEVERGONNAGIVEYOUUP, "nevergonnagiveyouup.ogg", 212 )
	.tune( PID_JUKEBOX_DISK_SMOOTHCRIMINAL, "smoothcriminal.ogg", 255 )
	.tune( PID_JUKEBOX_DISK_TAKEONME, "takeonme.ogg", 226 )
	.tune( PID_JUKEBOX_DISK_FLASH_ROCKIN_MAN, "FlashRockinMan.ogg", 268 )
	.tune( PID_JUKEBOX_DISK_JOURNEY_OBLIVION, "JourneyOblivion.ogg", 259 )
	.tune( PID_JUKEBOX_DISK_THE_DUELLISTS, "TheDuellists.ogg", 366 )
	.tune( PID_JUKEBOX_DISK_MEDIEVAL_STEEL, "MedievalSteel.ogg", 336 )
	.tune( PID_JUKEBOX_DISK_THE_FOUR_HORSEMEN, "FourHorsemen.ogg", 433 )
	.tune( PID_JUKEBOX_DISK_LIGHTNING_WAR, "LightningWar.ogg", 416 )
	.tune( PID_JUKEBOX_DISK_ELECTRO_VIOLENCE, "ElectroViolence.ogg", 225 )
	.tune( PID_JUKEBOX_DISK_KEEPER_THE_FLAME, "KeeperFlame.ogg", 251 )
	.tune( PID_JUKEBOX_DISK_MAKE_MY_DAY, "MakeMyDay.ogg", 218 )
	.tune( PID_JUKEBOX_DISK_CAGE_RAGERS, "CageRagers.ogg", 208 )
	.tune( PID_JUKEBOX_DISK_LONEWOLF, "Lonewolf.ogg", 288 )
	.tune( PID_JUKEBOX_DISK_GYPSY, "Gypsy.ogg", 255 )
	.tune( PID_JUKEBOX_DISK_CHEMICAL_WARFARE, "ChemicalWarfare.ogg", 326 )
	.tune( PID_JUKEBOX_DISK_LOVE_SUCKERS, "LoveSuckers.ogg", 207 )
	.tune( PID_JUKEBOX_DISK_SHOCKWAVES, "Shockwaves.ogg", 243 )
	.tune( PID_JUKEBOX_DISK_WORLD_WAR, "WorldWar.ogg", 271 );
	
JukeboxTune@ getJukeboxTune( Item@ item ) 
{
	uint16 Pid = item.GetProtoId();
	return jukeboxTunes.get_by_pid( Pid );
}

JukeboxTune@ getJukeboxTuneByPid( uint16 Pid ) 
{
	return jukeboxTunes.get_by_pid( Pid );
}

void setAnimState( Item& item )
{
	if( item.JUKEBOX_STATUS == STATUS_PLAYING ) {	
		SETFLAG( item.Flags, ITEM_SHOW_ANIM );
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM_EXT );
	} else {
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM );
		SETFLAG( item.Flags, ITEM_SHOW_ANIM_EXT );
	}
	item.Update();
}
#endif //JUKEBOX