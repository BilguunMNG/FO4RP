// Поисковые ф-ции по списку бутылок
#include "GLASS_H.fos"

bool find_empty_glass( Item& item ) {
	if( valid( item ) ) {
		uint16 bottledDrink = item.GetProtoId();
		if ( glass_bottles[0].find( bottledDrink ) != -1 ) {
			return true;
		}
	}
	return false;
}

bool find_glassed_drinks( Item& item ) {
	if( valid( item ) ) {
		uint16 bottledDrink = item.GetProtoId();
		if ( glass_bottles[1].find( bottledDrink ) != -1 ) {
			return true;
		}
	}
	return false;
}

bool find_opened_drinks( Item& item ) {
	if( valid( item ) ) {
		uint16 bottledDrink = item.GetProtoId();
		if ( glass_bottles[2].find( bottledDrink ) != -1 ) {
			return true;
		}
	}
	return false;
}

bool find_other_bottles( Item& item ) {
	if( valid( item ) ) {
		uint16 bottledDrink = item.GetProtoId();
		if ( glass_bottles[3].find( bottledDrink ) != -1 ) {
			return true;
		}
	}
	return false;
}

bool find_other_glass( Item& item ) {
	if( valid( item ) ) {
		uint16 bottledDrink = item.GetProtoId();
		if ( glass_bottles[4].find( bottledDrink ) != -1 ) {
			return true;
		}
	}
	return false;
}

uint16 find_any_glass( Item& item ) {
    return findGlass( item.GetProtoId() );
}

uint16 findGlass( uint16 pid ) {    
    int index = 0;
    for( uint i = 0, l = glass_bottles.length(); i < l; i++ )
    {
        index = glass_bottles[i].find( pid );
        if( index != -1 )
            return ++ i;
    }
    return 0;
}

bool find_capped_bottles( Item& item ) {
	if( valid( item ) ) {
		uint16 cappedBottle = item.GetProtoId();
		if ( capped_bottles.find( cappedBottle ) != -1 ) {
			return true;
		}
	}
	return false;
}