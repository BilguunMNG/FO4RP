string flagValue( bool value, string@ _true = "+", string@ _false = "" )
{
	return value ? ( valid( _true ) ? _true : "" ) : ( valid( _false ) ? _false : "" );
}

string boolValue ( bool value, string name = "", string _true = "+", string _false = "-" )
{
	return name + ( value ? _true : _false );
}

string signedValue ( int value, string space = " " )
{
	return ( value > 0 ? "+" : "-" ) + space + ( value > 0 ? value : -value );
}

#define d2	#(value)	two_digits(value)
string two_digits( uint16 value )
{
	return ( value > 9 ? ( "" + value ) : ( "0" + value ) );
}
#define D2	#(value, delimiter)	smart_two_digits(value, delimiter)
string smart_two_digits( uint16 value, string delimiter )
{
	return( value > 0 ? ( value > 9 ? ( "" + value ) : ( "0" + value ) ) + delimiter : "" );
}

string hl( int text )    { return "|0xF8F993 " + text + "|0x00FF00 "; }
string hl( string text ) { return "|0xF8F993 " + ( valid( text ) ? text : "" ) + "|0x00FF00 "; }

string Centering( string list ) // Центрирование текста в меню.
{
	if( list.length() > 16 ) { return list; }
	string tab = "";
	for( uint8 i = 0, l = ( 18 - list.length() ); i < l; i++ ) { tab += " "; }
	return tab+list;
}

uint char_width( string char )
{
	string[][] char_widths = { //Таблица символов, группированная по их широте. Тут нет лишь символа '|', т.к. он не отображаемый.
		{ ".", ":", "\'", "i", "!" },//3
		{ " ", ",", ";", "`", "l" },//4
		{ "1", "I", "(", ")", "[", "]" },//5
		{ "\"", "c", "f", "j", "r", "г", "з", "с", "э", "<", ">" },//6
		{ "0", "2", "3", "4", "5", "6", "7", "8", "9", 
			"a", "b", "C", "d", "E", "e", "F", "g", "h", "k", "L", "n", "o", "p", "q", "s", "T", "t", "u", "x", "y", "z", 
			"а", "б", "в", "Г", "Е", "е", "Ё", "ё", "З", "и", "к", "н", "о", "п", "р", "С", "Т", "т", "у", "х", "ч", "Э", 
			"у", "я", "ь", "?", "{", "}" },//7
		{ "B", "D", "G", "H", "J", "K", "M", "m", "N", "O", "P", "R", "Q", "S", "U", "W", "w", "Z", 
			"Б", "В", "И", "К", "Л", "л", "М", "м", "Н", "О", "П", "Р", "У", "Ц", "ц", "Ч", "У", "Я", 
			"Ь", "~", "@", "#", "%", "^", "*" },//8
		{ "A", "X", "Y", "А", "д", "Х", "Ш", "ъ" },//9
		{ "Д", "Щ", "ы", "Ъ" },//10
		{ "ж", "Ф", "ф", "ш", "Ы", "№" },//11
		{ "щ" },//12
		{ "Ж" }//13
	};
	if( findFirst( char, "\t" ) != -1 )
		return 20;
	
	for( uint i = 0, imax = char_widths.length(); i < imax; i++ )
		for( uint j = 0, jmax = char_widths[i].length(); j < jmax; j++ )
		{
			if( findFirst( char, char_widths[i][j] ) != -1 )
			{
				return 3 + i;
			}
		}
	
	return 0;//'\n' == 0
}

int pixelength( string@ text )
{
	if( !valid( text ) ) return 0;
	
	int result = 0;
	for( uint i = 0, l = text.length(); i < l; i++ )
	{
		//Log( "Длинна символа \'" + substring( text, i, 1 ) + "\' = " + char_width( substring( text, i, 1 ) ) );
		result += char_width( substring( text, i, 1 ) );
	}
	
	return result;
}

//import string SpacedText( string text, int target_pixel, string hider, string default_color ) from "gm";
string SpacedText( string text, int target_pixel, string hider, string default_color )
{
	return text + emptySpace( text, target_pixel, hider, default_color );
}

string emptySpaces( int pixel_length )
{
	string result = "";
	for( int i = 0; i < pixel_length; i += 4 )
		result += " ";
		
	return result;
}

string emptySpace( string text, int target_pixel, string hider, string default_color )
{
	//'I' 5  ' ' 4  '.' 3
	int space = target_pixel - pixelength( text );
	while( space > 9 )
	{
		space -= 5;
		hider += "I";
	}
	switch( space )
	{
		case( 5 ): hider += "I"; break;
		case( 6 ): hider += ".."; break;
		case( 7 ): hider += ". "; break;
		case( 8 ): hider += "I."; break;
		case( 9 ): hider += "I "; break;
	}
	return hider + default_color;
}

string StyledText( string delimiter, string name, int data )   { return StyledText( delimiter, name, "" + data ); }
string StyledText( string delimiter, string name, float data ) { return StyledText( delimiter, name, "" + data ); }
string StyledText( string delimiter, string name, string data ){ return StyledText( delimiter, name, "" + data, 100 ); }
string StyledText( string delimiter, string name, string data, int target )
{ 
	string result = "|0xF8F993 " + name + "|0x00FF00 " + data;
	
	if( findFirst( delimiter, "|" ) == -1 )
		return result + delimiter;
	//else
	return result + emptySpace( name + data, target, "|0x231D18 ", "|0x00FF00 " );
}

string OneAll( int value, uint count )   { return value + " (" + value * count + ")"; }
string OneAll( float value, uint count ) { return value + " (" + value * count + ")"; }

string DeltaTime_HMS( uint delta )
{
	if( delta == 0 )
		return "now";
	
	int s = delta % 60;
	int m = ( delta / 60 ) % 60;
	int h = ( delta / 60 / 60 ) % 24;
	int day = delta / 60 / 60 / 24;
	
	return ( day > 0 ? day + "d" : "" ) + D2( h, ":" ) + D2( m, ":" ) + d2(s);
}

string MakeTime( uint val )
{
    return DeltaTime_HMS( val % 86400 ) + " X ";
}

int[] UINT2INT( uint[] list )
{
	int[] result;
	for( uint i = 0, l = list.length(); i < l; i++ )
		result.insertLast( int(list[i]) );
	return result;
}

uint[] INT2UINT( int[] list )
{
	uint[] result;
	for( uint i = 0, l = list.length(); i < l; i++ )
		result.insertLast( uint(list[i]) );
	return result;
}

//Формат настраиваемый.
string enlistUINT( uint[] list, string divider = ", ", string prefix = "", string postfix = "" )
{ return enlistINT( UINT2INT(list), divider, prefix, postfix ); }
string enlistINT( int[] list, string divider = ", ", string prefix = "", string postfix = "" )
{ 
	if( !valid( list ) ) return "[null]";

	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = prefix + list[0];
	for( uint i = 1; i < len; i++ )
		result += divider + list[i];
	
	return result + postfix;
}

/*
int[] _list( int arg0 ) { int[] result = { arg0 }; 
	return result; }
int[] _list( int arg0, int arg1 ) { int[] result = { arg0, arg1 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2 ) { int[] result = { arg0, arg1, arg2 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3 ){ int[] result = { arg0, arg1, arg2, arg3 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4 ){ int[] result = { arg0, arg1, arg2, arg3, arg4 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4, int arg5 ){ int[] result = { arg0, arg1, arg2, arg3, arg4, arg5 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6 ){ int[] result = { arg0, arg1, arg2, arg3, arg4, arg5, arg6 }; 
	return result; }
int[] _list( int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7 ) { int[] result = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 }; 
	return result; }
*/