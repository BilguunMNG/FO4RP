import uint GetAllPlayers( Critter@[]& crs ) from "manager";

Critter@ getTarget( Critter& cr, int crId = 0 )
{
	Critter@ target = null;
	if( crId == 0 )
	{
		crId = cr.Id;
		@target = @cr;
	}
	else
	{
		@target = GetCritter( crId );
	}
	
	return target;
}

int SNEAK_TIMEOUT( Critter@ cr )
{
	if( !valid( cr ) ) return 0;
	
	return __FullSecond + REAL_SECOND( MAX( 34 - cr.Stat[ ST_SEQUENCE ], 3 ) );
}

void setTimeout( Critter@ cr, uint id, int value )
{
	if( !valid( cr ) ) return;
	if( cr.Timeout[ id ] < int( REAL_SECOND(value) ) )
		cr.TimeoutBase[ id ] = __FullSecond + REAL_SECOND(value);
}

bool Find( Critter@& link, int id )
{
	if( id == 0 ) return false;
	@link = GetCritter( uint( id ) );	
	return valid( link );
}

string itemInfo( Item@ item )
{
	if( !valid( item ) )
		return "[пусто]";
	
	return "[" + item.GetProtoId() + ":" + item.GetCount() + "]";
}

//Формат: "[pid:count], [pid:count]"
string enlist( Item@[] list )
{
	if( !valid( list ) ) return "[null]";

	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = itemInfo( list[0] );
	for( uint i = 1; i < len; i++ )
		result += ", " + itemInfo( list[i] );
	
	return result;
}

//Формат: "[ 1, 2, 3 ]"
string enlist( int[]@ list )
{
	if( !valid( list ) ) return "[null]";
	
	uint len = list.length();
	if( len == 0 ) return "[empty]";
	
	string result = "[ " + list[0];
	for( uint i = 1; i < len; i++ )
		result += ", " + list[i];
	
	return result + " ]";
}

Item@[] getItemsAround( Item& target )
{
	Item@[] empty_result; //Костыль, т.к. нет нормального преобразования типов из null.

	Map@ map = GetMap( target.MapId );
	if( !valid( map ) && Warning( "Can't find items around item #" + target.Id + ", as it's at the global map.", true ) ) return empty_result;
	return getItemsAround( map, target.HexX, target.HexY );

}

Item@[] getItemsAround( Critter& target )
{
	Item@[] empty_result; //Костыль, т.к. нет нормального преобразования типов из null.

	Map@ map = target.GetMap( );
	if( !valid( map ) && Warning( "Can't find items around critter #" + target.Id + ", as it's at the global map.", true ) ) return empty_result;
	return getItemsAround( map, target.HexX, target.HexY );
}

Item@[] getItemsAround( Map& map, uint16 x, uint16 y ) //TODO: range arg
{
	Item@[] result;
	
	for( uint i = 0; i < 6; i++ )
	{
		uint16 tx = x, ty = y;
		map.MoveHexByDir( tx, ty, i, 1 );
		map.GetItems( tx, ty, result );
	}
	map.GetItems( x, y, result );
	
	return result;
}