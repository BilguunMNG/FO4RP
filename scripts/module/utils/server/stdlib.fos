bool ReplaceWith( Item@ &item, uint pid, uint count = 1 )
{
	if( !valid( item ) ) return false;
	
	uint real_count = item.GetCount();
	if( count > real_count )
		return Warning( "Попытка заменить предмет большим количеством, чем имеется: " + count + " of " + real_count );
	
	if( pid == item.GetProtoId() || pid == 0 )
		return Warning( "Попытка заменить предмет некорректным пидом объекта: " + pid );
	
	Item@ result;
	switch( item.Accessory )
	{
		case( ACCESSORY_CRITTER ): { 
			Critter@ owner = GetCritter( item.CritId );
			if( !valid( owner ) )
				return Warning( "Хозяин объета не обнаружен: #" + item.CritId );
			else 
			{
				@result = owner.AddItem( pid, count );
				if( !valid( result ) )
					return Warning( "В ходе замены " + itemDesc( item ) + " не удалось добавить " + count + " " + itemName( pid ) + " хозяину #" + item.CritId );
			}
		break; }
		case( ACCESSORY_HEX ): {
			Map@ map = GetMap( item.MapId );
			if( !valid( map ) ) 
				return Warning( "Карта не найдена: #" + item.MapId );
			else
			{
				@result = map.AddItem( item.HexX, item.HexY, pid, count );
				if( !valid( result ) )
					return Warning( "В ходе замены " + itemDesc( item ) + " не удалось добавить " + count + " " + itemName( pid ) + " на карту #" + item.MapId + " в координаты: " + item.HexX + ", " + item.HexY );
			}
		break; }
		case( ACCESSORY_CONTAINER ): {
			Item@ container = GetItem( item.ContainerId );
			if( !valid( container ) )
				return Warning( "Контейнер-хозяин не найден: #" + item.ContainerId );
			else
			{
				@result = container.AddItem( pid, count, 0 );
				if( !valid( result ) )
					return Warning( "В ходе замены " + itemDesc( item ) + " не удалось добавить " + count + " " + itemName( pid ) + " в контейнер #" + item.ContainerId + " в координатах: " + container.HexX + ", " + container.HexY );
			}
		break; }
		case( ACCESSORY_NONE ): return Warning( "Объект " + itemDesc( item ) + " вне мира, его не заменить на " + itemName( pid ) + "." );
	}
	
	if( !valid( result ) )
		return Warning( "В ходе замены не был создан заменяющий предмет." );
	
	if( result.Val0 < result.Proto.Partial_Item )
		result.Val0 = result.Proto.Partial_Item;
	
	_SubItem( item, count );
	
	@item = @result;
	return true;
}

bool SpillOut( Item@ &item, int parts = 1 )//Возвращает "опустела-ли тара".
{
	if( !valid( item ) ) return false;

	int index = index_glass_bottles( item, 1 );
	
	if( index != -1 && !ReplaceWith( item, glass_bottles[2][index], 1 ) )//После этой ф-ии в &item уже указатель на предмет-замену.
		return false;
		
	if( index_glass_bottles( item, 2 ) == -1 || item.Proto.Partial_Item == 0 || item.Val0 < parts )
		return false;
	
	if( item.Val0 == parts )
		return ReplaceWith( item, PID_BOTTLE_GLASS, 1 ); //Выпиваем остатки - заменяем указатель опустошённой тарой.
	
	item.Val0 -= parts;
	item.Val2 = item.Val0 * 100;
	item.Update();

	return true;
}

void ShowContainer( Critter& cr, Critter@ target, uint type )
{
	if( !valid( target ) ) return;

	cr.ParamBase[ST_LAST_CONT_ID] = 0;
	cr.StatBase[ST_LAST_CRIT_ID] = target.Id;
	
	cr.ShowContainer( target, null, type );
}

void ShowContainer( Critter& cr, Item@ target, uint type )
{
	if( !valid( target ) ) return;
	
	cr.ParamBase[ST_LAST_CONT_ID] = target.Id;
	cr.StatBase[ST_LAST_CRIT_ID] = 0;
	
	cr.ShowContainer( null, target, type );
}

void ChangeFrame( Item& item, uint8 frame )
{
    item.AnimStayBegin      = frame;
    item.AnimStayEnd        = frame;
    item.AnimShowBegin      = frame;
    item.AnimShowEnd        = frame;
    item.AnimHideBegin      = frame;
    item.AnimHideEnd        = frame;
    item.Update();
}
