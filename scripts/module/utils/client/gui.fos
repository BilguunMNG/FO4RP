/*********Графики и интерфейсы**************/

void DrawText( string text, Dot@ dot, int dx, int dy ) 
{ 
	if( !valid( dot ) ) return; 
	DrawText( text, dot.x + dx, dot.y + dy, dot.color ); 
}

void DrawText( string text, int x, int y, Color@ color )
{
	DrawText( text, x, y, text.length() * 10, 20, valid( color ) ? color.rgb() : COLOR_RGB( 255, 0, 0 ), FONT_FALLOUT, 0 );
}

void triangle( Dot@ dot, int size = 2 ) 
{ 
	if( !valid( dot ) || !valid( dot.color ) ) return;
	
	triangle( dot.x, dot.y, dot.color, size ); 
}

void triangle( int x, int y, Color color, int size = 2 )
{
	NewLine( "", color )
		.add( -size,  size )
		.add(  size,  size )
		.add(     0, -size )
		.draw( x, y, true );
}

void line( Dot@ a, Dot@ b, Color color )
{
	NewLine( "", color ).add(a).add(b).draw();
}

void DrawLine( Line@ line, int x0 = 0, int y0 = 0, float scale = 1, bool looped = false )
{
	if( !valid( line ) || !valid( line.dots ) || line.dots.length() == 0 )
		return;

	int[] drawData;
	
	for( uint i = 0, l = line.dots.length(); i <= l; i++ )
	{
		if( !looped && i == l ) break;
		
		Dot@ dot = line.dot(i%l);

		drawData.insertLast( x0 + dot.x * scale );
		drawData.insertLast( y0 + dot.y * scale );
	
		drawData.insertLast( dot.color.inherited ? line.color.rgb() : dot.color.rgb() );
	}
	
	DrawPrimitive( DRAW_PRIMITIVE_LINESTRIP, drawData );
	
	return;
}