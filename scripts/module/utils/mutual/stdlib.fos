string itemText( ItemMutual@ item, int max_length = 0 )
{
	if( !valid( item ) ) return "[null]";
	
	string@ name;
	if( item.Val9 == PID_POPUP || item.GetProtoId() == PID_POPUP )
	{
		#ifdef __SERVER
			@name = Item_GetLexems( item );
		#endif
		
		#ifdef __CLIENT
			@name = "" + item.Lexems;
		#endif
	}
	else
	{
		#ifdef __SERVER
			@name = GetMsgStr( 0, TEXTMSG_ITEM, STR_ITEM_INFO( item ) );
		#endif
		
		#ifdef __CLIENT
			@name = GetMsgStr( TEXTMSG_ITEM, STR_ITEM_INFO( item ) );
		#endif
	}
	
	string result = TRIM_DOTS( name );
	if( max_length > 0 && pixelength( result ) > max_length )
	{
		result = substring( result, 0, MIN( uint( max_length / 7.5f ), result.length() ) ) + "..";
	}
	
	return itemColor(item) + result + COLOR_NETMSG;
}

uint16[] FaceMasks = { PID_RED_BANDANA, PID_raspir2, PID_BALACLAV, PID_RESPIRATOR };
bool wearMask( CritterMutual& cr )
{
	ItemMutual@ item = cr.GetItem( 0, SLOT_HAND2 );
	return valid( item ) ? ( FaceMasks.find( item.GetProtoId() ) != -1 ) : false;
}

bool isDisabledSkill( uint skillIndex )
{
	uint[] disabled_skills = { SK_SPEECH, SK_SNEAK };
	return( disabled_skills.find( skillIndex ) != -1 );
}

bool isFarmingSkill( uint skillIndex )
{
	uint[] farming_skills = { SK_MINING, SK_CHOPPING, SK_SCAVENGING, SK_HUNTING, SK_FISHING, SK_FARMING, SK_COOKING, SK_SEX };
	return( farming_skills.find( skillIndex ) != -1 );
}

string genderEnding( CritterMutual& cr )
{
	switch( cr.Stat[ ST_GENDER ] )
	{
		case(0): return ""; //он
		case(1): return "а"; //онј
		case(2): return "о"; //онќ
	}
	
	return "";
}

string itemColor( ItemMutual& item )
{
	switch( item.GetType() )
	{
		case( ITEM_TYPE_NONE     ): return COLOR_NONE; 
		case( ITEM_TYPE_ARMOR    ): return COLOR_ARMOR;
		case( ITEM_TYPE_DRUG     ): return COLOR_DRUGS; 
		case( ITEM_TYPE_WEAPON   ): return COLOR_WEAPON;  
		case( ITEM_TYPE_AMMO     ): return COLOR_AMMO;  
		case( ITEM_TYPE_MISC     ): return COLOR_MISC;  
		case( ITEM_TYPE_KEY      ): return COLOR_KEY;  
		case( ITEM_TYPE_CONTAINER): return COLOR_CONTAINER;  
		case( ITEM_TYPE_DOOR     ): return COLOR_DOOR;  
		case( ITEM_TYPE_GRID     ): return COLOR_GRID;  
		case( ITEM_TYPE_GENERIC  ): return COLOR_GENERIC;  
		case( ITEM_TYPE_WALL     ): return COLOR_WALL;  
		case( ITEM_TYPE_CAR      ): return COLOR_CAR;  
		case( ITEM_TYPE_PLANT    ): return COLOR_PLANT;     
		case( ITEM_TYPE_FOOD     ): return COLOR_FOOD;  
		case( ITEM_TYPE_DRINK    ): return COLOR_DRINK;  
	}
	return COLOR_NETMSG;
}