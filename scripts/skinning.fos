#ifndef SKINNING
#define SKINNING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"

bool ltp_skinning_inited = false;
void ltp_skinning_init()
{
	LTPREG( LTP_SKINNING, process_skinning )
	ltp_skinning_inited = true;
}

bool PrepareSkinning( Critter& cr, Item@ tool, Critter@ target ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }
	if( !valid( tool ) ) { return false; } 
	if( !valid( target ) ) { return false; }
	if( !target.IsDead() ) { 
		cr.Say( SAY_NETMSG, "|0xFFFF00 Сначала добейте жертву." );
		return false; 
	}
	
   	uint toolPid = tool.GetProtoId();
	if( blades.find( toolPid ) == -1 ) { return false; }
	
	if( tool.CritSlot != SLOT_HAND1 ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Возьмите инструмент в руку." );
		return false;
	}

	if( IsTired( cr ) ) { return false; }
	if( IsWounded( cr ) ) { return false; }

	start_skinning( cr, tool, target );
	return true;
}

bool start_skinning( Critter& cr, Item& tool, Critter@ target )
{
	if( !ltp_skinning_inited ) {
		ltp_skinning_init();
	}
	
	if( valid( tool ) && valid( target ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );

		uint[] values = { cr.Id, tool.Id };
			//CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_MiningSound", values, false);
			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
			StartProcess( cr, LTP_SKINNING, 0, tool.Id, target.Id, action_pause );
	}
	return true;
}

uint process_skinning( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SKINNING )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ ST_AGILITY ] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
    Item@ tool = GetItem( param1 );
  	Critter@ target = GetCritter( param2 );
  	if( valid( tool ) && valid( target ) ) {
      	param0++;
		Item@ tool = cr.GetItem( 0, SLOT_HAND1 );
		if( valid( tool ) ) {
			uint object_dpa = ( cr.Skill[ SK_HUNTING ] ) + ( cr.Stat[ ST_AGILITY ] * 10 ) + OBJECT_DPA_BASE; 
			int sequence_length = ceil( float( target.StatBase[ ST_MAX_LIFE ] / ( CLAMP( object_dpa, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
	
			if( param0 > sequence_length ) {
				//Profit( cr, tool, target );
				int skillNum = SK_HUNTING;
				Accident( cr, skillNum );
			
			} else {
				_CritAnimateSwing(cr);
				uint[] values = { cr.Id, tool.Id };
				//CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_MiningSound", values, false );
				CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );
				return action_pause;
			}
		}
    }
	return 0;
}

//Loot
bool Profit(  Critter& cr, Item@ tool, Critter@ target )
{
	if( !valid( tool ) ) { return false; }
	if( !valid( target ) ) { return false; }
	
	int amount = 0;
	uint toolMod = tool.GetProtoId();
	switch( toolMod )
	{	
		case( PID_SCISSORS ):
		case( PID_CUTTHROAT ):
			amount -= 2;
		case( PID_THROWING_KNIFE ):
		case( PID_SWITCHBLADE ):
			amount--;
			break;
		case( PID_MACHETE ):
			amount++;
			break;
	}
	
	uint lootRoll = ( Random( 0, 2 ) + ( cr.ParamBase[ SK_HUNTING ] / 50 ) );
	amount+= lootRoll;
	if( amount < 1 ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Вы не добыли ничего полезного." );
	
	} else {
		
		int skillNum = SK_HUNTING;
		raiseSkill( cr, skillNum );
		
		string inform = "Вы добыли: \n";

		cr.AddItem( PID_CRAFT_M_JUNK, 1 );
		inform += "- ";
		inform += "|0xFFFF00 " + _GetProtoName( PID_CRAFT_M_JUNK );
		inform += "|0x3CF800 ;\n";
	
		inform[ inform.length() - 2 ] = '.';
		inform[ inform.length() - 1 ] = ' ';
		cr.Say( SAY_NETMSG, inform );
		
		cr.StatBase[ST_EXPERIENCE] += 25;
	}
	return true;
}

class DeadMob
{
	uint16 pid;
	uint8 difficulty;
	uint16[] loot;
	
	DeadMob( uint16 pid, uint8 difficulty )
	{
        this.pid = pid;
        this.difficulty = difficulty;
	}

}

#endif //SKINNING