#ifndef FURNACE
#define FURNACE

#include "_utils.fos"
#include "furnace_h.fos"
#include "firestarter_h.fos"
#include "furniture_h.fos"

class MenuFurnace: CenteredMenuHandler
{
    uint furnace_id;
    uint map_id;

    MenuFurnace( Item& furnace, Map& map ) 
	{
		furnace_id = furnace.Id;
		map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ furnace = GetItem( furnace_id );

        if( map is null || furnace is null )
		{
            return false;
        }

		if( MovementState( cr ) > 0 )
		{
			return false;
		}

        if( menu.Button( "Examine" )  )
		{
			if( furnace.STATE == STATE_BURNING )
			{
				if( hasItems( cr, FurnaceTools, SLOT_HAND1 ) )
				{
					ShowContainer( cr, furnace, TRANSFER_HEX_CONT_DOWN );
					return false;
				}
				else
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOOLS_REQUIRED );
					return true;
				}
			}
            ShowContainer( cr, furnace, TRANSFER_HEX_CONT_DOWN );
            return false; 
        }

		if( furnace.STATE == STATE_EXTINGUISHED )
		{
			if( menu.Button( "Ignite" )  )
			{
				if( hasItems( cr, Igniters ) )
				{
					Item@[] igniters = getItems( cr, Igniters );
					Item@ igniter = igniters[0];
					Ignite( cr, igniter, furnace );
					return true;
				}
				else
				{
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_LIGHTER );
					return false;
				}
			}
		}

		if( menu.Button( "Extinguish" )  )
		{
			if( hasItems( cr, WaterSource ) )
			{
				Item@[] watersource = getItems( cr, WaterSource );
				Item@ water = watersource[0];
				Extinguish( cr, water, furnace );
				return false;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_WATER_FOR_FIRE );
				return true;
			}
		}
		
		if( menu.Button( "Add fuel" ) )
		{
			if( hasItems( cr, FireFuel ) )
			{
				Item@[] fireFuel = getItems( cr, FireFuel );
				Item@ fuel = fireFuel[0];
				FeedTheFire( cr, fuel, furnace );
				return true;
			}
			else
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL_2 );
				return false;
			}
		}

		if( furnace.STATE == STATE_EXTINGUISHED && menu.Button( "Furniture Menu" ) )
		{
			_InitFurniture( furnace, true );
			furnace.Update();
			StartMenuFuriture( cr, furnace );
			return false;
		}
		
		if( menu.Button( "Close menu" ) )
		{
			return false;
		}
		return true;
	}

	string@ Description( Critter& cr )
	{
		string info;
		Item@ furnace = GetItem( furnace_id );
		Item@[] MaterialsCheck;
		furnace.GetItems( uint( -1 ), MaterialsCheck );
		Item@ material = null;
		int check_kg = 0;

		if( furnace.MAX_FUEL == 0 )
		{
            furnace.MAX_FUEL = 24000;
        }

 		info += "|0x3CF800 Fuel: |0xFFFF00 " + furnace.CURRENT_FUEL * 100 / furnace.MAX_FUEL + "|0x3CF800 % Temprature: |0xFFFF00 " + furnace.FIRE_STRENGTH + "|0x3CF800 C.";
		info += "\n|0x3CF800 Smelted products:";

		if( furnace.FURN_IRON > 0 )
		{
			info += "\n|0x3CF800 Iron: |0xFFFF00 " + ( furnace.FURN_IRON / 1000.0f ) + "|0x3CF800  kg."; 
			check_kg++;
		}

		if( furnace.FURN_GOLD > 0 )
		{
			info += "\n|0x3CF800 Gold: |0xFFFF00 " + ( furnace.FURN_GOLD / 1000.0f ) + "|0x3CF800  kg."; 
			check_kg++; 
		}

		if( furnace.FURN_LEAD > 0 )
		{
			info += "\n|0x3CF800 Led: |0xFFFF00 " + ( furnace.FURN_LEAD / 1000.0f ) + "|0x3CF800  kg."; 
			check_kg++;
		}

		if( furnace.FURN_COPPER > 0 )
		{
			info += "\n|0x3CF800 Cupper: |0xFFFF00 " + ( furnace.FURN_COPPER / 1000.0f ) + "|0x3CF800  kg."; 
			check_kg++;
		}

		if( furnace.FURN_GLASS > 0 )
		{
			info += "\n|0x3CF800 Glass: |0xFFFF00 " + ( furnace.FURN_GLASS / 1000.0f ) + "|0x3CF800  kg."; 
			check_kg++;
		}

		if ( check_kg < 1 )
		{
			info += "\n|0xFFFF00 The furnace is empty!";
		}
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( " ", null );
    }

	bool ShouldRedraw( Critter& cr )
	{
		return true;
    }
}

void StartMenuFurnace( Critter& cr, Item& furnace )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuFurnace( furnace, map );
    iDialogBox@ menu = OpenMenu( cr, "Furnace", handler );
}

void FurnaceStage( Item& furnace )
{
	if( !valid( furnace ) )
	{
		return;
	}
	
	Map@ map = GetMap( furnace.MapId );
	if( !valid( map ) )
	{
		return;
	}
	
	if( furnace.FIRE_STRENGTH < 0 )
	{
		furnace.FIRE_STRENGTH <= 0;
		EraseTimeEvent( furnace.EVENT );
		furnace.EVENT = 0;
		return;
	}

	if( furnace.STATE == STATE_EXTINGUISHED && furnace.FIRE_STRENGTH > 0 )
	{
		uint[] values = { furnace.Id };
		CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_CoolDown", values, true );
	}

	if( furnace.STATE == 1 && furnace.FIRE_STRENGTH < 1800 )
	{
		furnace.FIRE_STRENGTH += FUEL_BURN_AMOUNT / 2;
	}

	Item@[] resources;
	int burn_check = 0;

	if( furnace.FURN_IRON > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_IRON_BAR );	
		burn_check = furnace.FURN_IRON - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_IRON = burn_check;
			furnace.AddItem( PID_IRON_BAR, 1, 0 );
		}
	}

	if( furnace.FURN_GOLD > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_GOLDEN_BAR );	
		burn_check = furnace.FURN_GOLD - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_GOLD = burn_check;
			furnace.AddItem( PID_GOLDEN_BAR, 1, 0 );
		}
	}

	if( furnace.FURN_COPPER > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_COPPER_BAR );	
		burn_check = furnace.FURN_COPPER - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_COPPER = burn_check;
			furnace.AddItem( PID_COPPER_BAR, 1, 0 );
		}
	}

	if( furnace.FURN_LEAD > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_LEAD_INGOT );	
		burn_check = furnace.FURN_LEAD - MaterialProto.Weight;

		if ( ( burn_check ) >= 0 )
		{
			furnace.FURN_LEAD = burn_check;
			furnace.AddItem( PID_LEAD_INGOT, 1, 0 );
		}
	}

	if( furnace.FURN_GLASS > 0 )
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_GLASS_BAR );	
		burn_check = furnace.FURN_GLASS - MaterialProto.Weight;

		if( ( burn_check ) >= 0 )
		{
			furnace.FURN_GLASS = burn_check;
			furnace.AddItem( PID_GLASS_BAR, 1, 0 );
		}
	}
	
	int count = furnace.GetItems( uint ( -1 ) , resources );
	if( count > 0 )
	{
		int n = Random( 0, count - 1 );
		uint type = BURN_TYPE_MISC;
		uint16 materialPid = resources[n].GetProtoId();
		ProtoItem@ MaterialProto = GetProtoItem( materialPid );

		if( MaterialProto.Type == ITEM_TYPE_MISC )
		{
			if( MaterialProto.Material == MATERIAL_STONE )
			{
				if ( materialPid == PID_METAL_ORE || materialPid == PID_GOLD_NUGGET || materialPid == PID_GOLD_ORE || materialPid == PID_COPPER_ORE 
					|| materialPid == PID_COPPER_NUGGET || materialPid == PID_LEAD_NUGGET || materialPid == PID_LEAD_ORE )
				{
					type = BURN_TYPE_ORE;
				}
			}
			else
			{
				if( materialPid == PID_IRON_BAR || materialPid == PID_GOLDEN_BAR || materialPid == PID_COPPER_BAR || materialPid == PID_LEAD_INGOT || materialPid == PID_GLASS_BAR )
				{
					type = 101;
				}
				else
				{
					type = BURN_TYPE_MISC;
				}
			}
		}

		if( MaterialProto.Type == ITEM_TYPE_ARMOR )
		{
			type = BURN_TYPE_ARMOUR;
		}

		if( MaterialProto.Type == ITEM_TYPE_WEAPON )
		{
			type = BURN_TYPE_WEAPON;
		}

		if( type != 101 )
		{
			BurnItem ( furnace, resources[n], type );
			if( Explosives.find( materialPid ) != -1 )
			{
				uint[] values = { furnace.Id };
				CreateTimeEvent( AFTER( REAL_SECOND( Random( 0, 10 ) ) ),"firestarter@e_Explosives", values, true );
			}
		}
	}
}

uint e_CoolDown( uint[]@ values )
{
	Item@ furnace = GetItem( values[0] );
	if( !valid( furnace ) )
	{
		return 0;
	}
	
	if( furnace.STATE == STATE_BURNING )
	{
		return 0;
	}
	
	furnace.FIRE_STRENGTH -= int( FUEL_BURN_AMOUNT * FUEL_MODIFIER );
	if( furnace.FIRE_STRENGTH <= 0 )
	{
		furnace.FIRE_STRENGTH = 0;
		EraseTimeEvent( furnace.EVENT );
		furnace.EVENT = 0;
		return 0;
	}
	return FIRE_BURNING_TIME;
}

void BurnItem( Item& furnace, Item& resource, uint16 type )
{
    Map@ map = GetMap( furnace.MapId );

	if( furnace.FIRE_STRENGTH == 0 || furnace.STATE == 0 )
	{
		return;
	}

    Item@ fireFX = map.AddItem( furnace.HexX, furnace.HexY, PID_SMOKE, 1 );
    uint[] values = { fireFX.Id };
    fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ),"firestarter@e_fireFX", values, true );

	float burn_k = 0.0f;

    switch( type )
    {
        case( BURN_TYPE_ORE ):
            burn_k = ORE_K;
            break;
        case( BURN_TYPE_MISC ):
            burn_k = MISC_K;
            break;
        case( BURN_TYPE_ARMOUR ):
            burn_k = ARMOUR_K;
            break;
        case( BURN_TYPE_WEAPON ):
            burn_k = WEAPON_K;
            break;
        default:
            burn_k = 0.5f;
            break;
    }

	string resourceType;
    int SmeltingTemp;

    switch( resource.Proto.Material )
    {
        case( MATERIAL_METAL ):
            resourceType = "FURN_IRON";
            SmeltingTemp = BURN_IRON;
            break;
        case( MATERIAL_GOLD ):
            resourceType = "FURN_GOLD";
            SmeltingTemp = BURN_GOLD;
            break;
        case( MATERIAL_LEAD ):
            resourceType = "FURN_LEAD";
            SmeltingTemp = BURN_LEAD;
            break;
        case( MATERIAL_COPPER ):
            resourceType = "FURN_COPPER";
            SmeltingTemp = BURN_COPPER;
            break;
        case( MATERIAL_GLASS ):
            resourceType = "FURN_GLASS";
            SmeltingTemp = BURN_GLASS;
            break;
        case( MATERIAL_STONE ):
        {
            switch( resource.GetProtoId() )
            {
                case( PID_METAL_ORE ):
                    resourceType = "FURN_IRON";
                    SmeltingTemp = BURN_IRON;
                    break;
                case( PID_GOLD_NUGGET ):
                case( PID_GOLD_ORE ):
                    resourceType = "FURN_GOLD";
                    SmeltingTemp = BURN_GOLD;
                    break;
                case( PID_COPPER_ORE ):
                case( PID_COPPER_NUGGET ):
                    resourceType = "FURN_COPPER";
                    SmeltingTemp = BURN_COPPER;
                    break;
                case( PID_LEAD_NUGGET ):
                case( PID_LEAD_ORE ):
                    resourceType = "FURN_LEAD";
                    SmeltingTemp = BURN_LEAD;
                    break;
            }
            break;
        }
        default:
            SmeltingTemp = 600;
            break;
    }

	if ( furnace.FIRE_STRENGTH >= SmeltingTemp && SmeltingTemp != 0 )
	{
		if ( resourceType == "FURN_IRON" )
		{
			furnace.FURN_IRON += int( resource.Proto.Weight * burn_k );
		}

		if ( resourceType == "FURN_GOLD" )
		{
			furnace.FURN_GOLD += int( resource.Proto.Weight * burn_k );
		}

		if ( resourceType == "FURN_COPPER" )
		{
			furnace.FURN_COPPER += int( resource.Proto.Weight * burn_k );
		}

		if ( resourceType == "FURN_LEAD" )
		{
			furnace.FURN_LEAD += int( resource.Proto.Weight * burn_k );
		}

		if ( resourceType == "FURN_GLASS" )
		{
			furnace.FURN_GLASS += int( resource.Proto.Weight * burn_k );
		}
		_SubItem( resource, 1 );
	}
	return;
}

#endif //FURNACE