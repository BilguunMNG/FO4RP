#include "_utils.fos"
#include "wait_time_h.fos"

import void CheckCartPicMap( Item& furniture ) from "furniture";

import void critter_reload_weapon( Critter& cr, Item& weapon, Item@ ammo ) from "main";
import bool critter_use_item( Critter& cr, Item& item, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint param ) from "main";
import void ShowInputBoxScreen( Critter& cr, string funcName, uint16 textLength, uint8 flags ) from "main";

import void CombatAttack( Critter& cr, Critter@ target, ProtoItem& weapon, uint8 weaponMode, ProtoItem@ ammo, uint16 hexX, uint16 hexY ) from "combat";
import uint GetAimApCost( int hitLocation ) from "combat";
import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, int attackerId ) from "combat";

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run ) from "npc_planes";
import bool AddWalkPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";

import void Actions( Critter& cr, uint8 actionType, uint16 pickType ) from "context_callback";

import void GenerateFire( Map@ map, int x, int y, int r, uint8 strength, int attackerId ) from "firestarter";

import bool PrepareFishing( Critter& cr, Item& fishingRod, int hexX, int hexY ) from "fish";

import void skin( Critter& cr, int crType ) from "skins";

import int  GetDeteriorationProcent( Item& item ) from "repair";

import void OpenDoor( Critter& player ) from "mio_tests";

import void LoadClientHistoryBase( Critter& cr, bool all ) from "history_menu";
import void SaveCritterHistory( Critter& cr, string saveText ) from "history_menu";
import void LoadCritterHistory( Critter& cr ) from "history_menu";

import int  GetCellMap( uint16 x, uint16 y ) from "globalmap_group";

import uint GenerateWasteland( Critter& cr, uint8 x, uint8 y ) from "mapgen_wasteland";

import uint follow( Critter& cr, int master, uint& rate ) from "raiders";

import void say( Critter& player, int param0, int param1, int param2 ) from "gm";

import bool UseSkillOnLocker( Critter& cr, Item& locker, int skill ) from "lockers";

import void DragAndDrop( Critter& cr, Critter@ target ) from "handcuffs";

import Item@ getPopup( Critter& player ) from "popups";
import bool changePopup( Critter& player, string description ) from "popups";
import bool delPopup( Critter& player ) from "popups";

import void StartMenuVendingMachine( Critter& cr, Item& vendmach ) from "vending";
import void StartMenuTerminal( Critter& cr, Item& terminal ) from "main"; //included in main - solve this shit!!!

const string[] glass_break_sounds = { "glass_break1.ogg", "glass_break2.ogg", "glass_break3.ogg", "glass_break4.ogg" };

void unsafe_OpenDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	OpenDoor( player );
}

void unsafe_MobGoHome( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	if( !isGM( player ) ) return;
	Critter@ target = GetCritter( param0 );
	if( valid(target) && !target.IsPlayer() )
	{
		if( target.ModeBase[ MODE_NO_HOME ] != 0 )
			player.Say( SAY_NETMSG, "Вы отправили " + param0 + " на домашнюю позицию." );
		else
			player.Say( SAY_NETMSG, "Существо " + param0 + " итак на домашней позиции." );
		
		target.ModeBase[ MODE_NO_HOME ] = 0;
	}
}

//import void unsafe_GM_vals( Critter& cr, int start, int end, int targetId, string@, int[]@ ) from "general_unsafe";
void unsafe_GM_vals( Critter& cr, int start, int end, int targetId, string@, int[]@ ) //exported
{
	if( targetId == 0 || end < start || end - start > 20 )
	{
		cr.ParamBase[CR_VAL0] = 0;
		cr.ParamBase[CR_VAL1] = 0;
		cr.Say( SAY_NETMSG, "VAL0 & VAL1 обнулены, т.к. до этого где-то не обнулились, а тут в коде должны были задавать диапазон параметров криттера, с которым можно было бы работать." );
		return;
	}
	
	Critter@ target = GetCritter( targetId );
	if( !valid( target ) ) return;
	
	cr.StatBase[ ST_VAR0 ] = target.Id;
	
	string[] data = { "general_unsafe@answer_VALS", "Выберите значение, что бы изменить его." };
	for( int i = start; i <= end; i++ )
		data.insertLast( "#" + i + " = " + target.Param[i] + " of " + target.ParamBase[i] );
	DIALOG_MENU( cr, data );
	
	cr.ParamBase[CR_VAL0] = start;
	cr.ParamBase[CR_VAL1] = end;
}

void answer_VALS( Critter& cr, uint answerI, string& answerS )
{
	cr.StatBase[ ST_VAR1 ] = cr.ParamBase[CR_VAL0] + answerI;
	
	cr.Say( SAY_SAY_TITLE, "Param #" + cr.Stat[ST_VAR1] + ":" );
	cr.ShowScreen( SCREEN_SAY, 0, "gm@ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL" );
}


//import void unsafe_GM_stop( Critter& player, int radius, int delay, int, string@, int[]@ coord ) from "general_unsafe";
void unsafe_GM_stop( Critter& player, int radius, int delay, int, string@, int[]@ coord ) //exported
{
	if( !isGM( player ) ) return;
	
	int x = coord[0];
	int y = coord[1];
	
	radius = CLAMP( radius, 0, 40 );
	delay = CLAMP( delay, 0, 50 );
	
	Map@ map = player.GetMap();
	
	Critter@[] crs;	
	uint count = map.GetCrittersHex( x, y, radius, FIND_LIFE, crs );
	
	for( uint i = 0; i < count; i++ )
	{
		crs[i].StatBase[ ST_CURRENT_AP ] = -100 * 10 * delay;
		crs[i].Wait( 1 + 1000 * delay );
		if( crs[i].IsPlayer() )
		{
			crs[i].Say( SAY_NETMSG, "Вам кажется, что не стоит торопить события." );
			HintEffect( player, crs[i], COLOR_ORANGE );
		}
		else
		{
			crs[i].DropPlanes();
			crs[i].ClearEnemyStack();
			crs[i].Say( SAY_EMOTE_ON_HEAD, "Останавливается" );
		}
	}
	
	testInfo( player, "Вы остановили " + count + " существ." );
}

void unsafe_radioHead( Critter& cr, int, int, int, string@ message, int[]@ ){
	if( cr.CountItem( PID_RADIO ) > 0 ) { cr.Say( SAY_EMOTE, "Говорит в рацию" ); /*cr.Say( SAY_NORM_ON_HEAD, message );*/ }
}

void unsafe_contmenu_callback( Critter& player, int id, int screenId, int actionId, string@ command, int[] @ myArr )
{
    // fastpanel
    /*if(screenId != 0)
       {
            switch(screenId)
            {
              case SCREEN_SKILLBOX :
            }
       }*/

    // myArr[0] = 123;
    // player.Say(SAY_NETMSG, "unsafe done");
    player.StatBase[ ST_LAST_CRIT_ID ] = myArr[ ARRAY_ID_INDEX ];
    player.StatBase[ ST_OBJECT_TYPE ] = myArr[ ARRAY_OBJ_INDEX ];
    player.StatBase[ ST_ITEM_HEXX ] = myArr[ ARRAY_ITEM_HEXX ];
    player.StatBase[ ST_ITEM_HEXY ] = myArr[ ARRAY_ITEM_HEXY ];
    player.StatBase[ ST_ITEM_PID ] = myArr[ ARRAY_ITEM_PID ];


    switch( myArr[ ARRAY_SCREEN_INDEX ] )
    {
    case SCREEN_BAG:
        player.ShowScreen( myArr[ ARRAY_SCREEN_INDEX ], id, "context_callback@ScreenBag" );
        break;
    case SCREEN_SKILLBOX:
        player.ShowScreen( myArr[ ARRAY_SCREEN_INDEX ], id, "context_callback@ScreenSkillbox" );
        break;
    case ACTION_PICK_ITEM:
        Actions( player, myArr[ ARRAY_SCREEN_INDEX ], 0 );
        break;
    case ACTION_PICK_CRITTER:
        Actions( player, myArr[ ARRAY_SCREEN_INDEX ], myArr[ ARRAY_PICK_TYPE ] );
        break;
    case ACTION_DIR:
        Actions( player, myArr[ ARRAY_SCREEN_INDEX ], 0 );
        break;
    case ACTION_TALK:
        Actions( player, myArr[ ARRAY_SCREEN_INDEX ], 0 );
        break;
    case ACTION_FAST:
        Actions( player, myArr[ ARRAY_SCREEN_INDEX ], myArr[ ARRAY_SKILL_INDEX ] );
        break;
    default:
        break;
    }

}

#define BT_BRAHMIN         ( 15 )
#define BT_DOG             ( 16 )
#define BT_RAT_GRIZLY      ( 19 )
#define BT_SCORP           ( 22 )
#define BT_FLOATER         ( 23 )
#define BT_RAT             ( 24 )
#define BT_CENTAUR         ( 25 )
#define BT_CLAW            ( 51 )
#define BT_MANTIS          ( 52 )
#define BT_RAT_PIG         ( 55 )
#define BT_SCORP_SMALL     ( 59 )
#define BT_CLAW_SMALL      ( 60 )
#define BT_GECKO_SILVER    ( 67 )
#define BT_GECKO_GOLD      ( 68 )
#define BT_RAT_KING        ( 76 )
#define BT_ALIEN           ( 80 )
#define BT_GECKO_FIRE      ( 81 )
#define BT_ALIEN_QUEEN     ( 86 )
#define BT_GIGANT_ANT      ( 97 )
#define BT_CLAW_KING       ( 100 )

void unsafe_log(Critter& cr, int locX, int locY, int type, string@ message, int[] @ p4 ){
    file f;
    if( f.open( "logs\\commandslog.txt", "a" ) >= 0 )
    {
        f.writeString( __Day + "." + __Month + "." + __Year + " " + MakeTime( __FullSecond ) + message + "\n" );
        f.close();
    }
    // else
        // Log( "can't open log file!" );	//Логгирование команд # $ ~
}

void unsafe_log_2(Critter& cr, int locX, int locY, int type, string@ message, int[] @ p4 ){
    file f;
    if( f.open( "logs\\gm_panel.txt", "a" ) >= 0 )
    {
        f.writeString( __Day + "." + __Month + "." + __Year + " " + MakeTime( __FullSecond ) + message + "\n" );
        f.close();
    }
    // else
        // Log( "can't open log file!" );	//Логгирование действий в гм панели
}
 
void unsafe_fastpanel_say( Critter& player, int p0, int p1, int p2, string@ message, int[] @ p4 )
{
    if( message.length() > 0 )
    {
        uint8 sayType = 0;
        switch( p0 )
        {
        case 1:
            sayType = SAY_NORM;
            break;
        // case 2 : sayType = SAY_SOCIAL; break;
        case 2:
            sayType = SAY_SHOUT;
            break;
        case 3:
            sayType = SAY_EMOTE;
            break;
        case 4:
            sayType = SAY_WHISP;
            break;
        default:
            sayType = SAY_NETMSG;
            break;
        }

        if( sayType >= SAY_NORM && sayType <= SAY_RADIO )
        {
            for( uint i = 0, len = message.length(); i < len; i++ )
            {
                uint8 chr = message[ i ];
                if( chr < 32 || ( chr > 34 && chr < 42 ) || ( chr > 42 && chr < 44 ) || chr == 47 || ( chr > 57 && chr < 63 ) || chr == 64 || ( chr > 90 && chr < 97 ) || ( chr > 122 && chr < 192 && chr != 168 && chr != 184 ) )
                {
                    player.Say( SAY_NETMSG, "В сообщениии есть запрещенные символы." );
                    return;
                }
            }
        }

        player.Say( sayType, "" + message );
    }
}

void SendFastPanelInfo( Critter& cr, bool type )
{
    file   f;
    string word = "", word2 = "";
    uint   pos = 0;
    // cr.Say(SAY_NETMSG, "start sendin");
    if( f.open( PATH_TO_FASTPANEL_FOLDER + cr.Id, "r" ) == 0 )
    {
        // cr.Say(SAY_NETMSG, "file open successful");
        f.setPos( 0 );
        while( !f.isEndOfFile() )      // || count > length))
        {
            pos = f.getPos();
            f.readLine( word );
            word2 += word;

//				cr.Say(SAY_NETMSG, word);
//				cr.Say(SAY_NETMSG, word);
        }
        f.close();
    }
    // if(word2 != "")	cr.RunClientScript("client_screen_fastpanel@LoadPanel", 0, 0, 0, word2, null); else cr.Say(SAY_NETMSG, "error with sending fastpanel info");
    if( !type )
    {
        if( pos != 0 )
            cr.RunClientScript( "client_screen_fastpanel@GetServerFileSize", pos, 0, 0, "", null );
    }
    else
    {
        if( word2 != "" )
            cr.RunClientScript( "client_screen_fastpanel@LoadPanel", 0, 0, 0, word2, null );
        else
            cr.Say( SAY_NETMSG, "error with sending fastpanel info" );
    }
}

void unsafe_fastpanel_save( Critter& player, int p0, int p1, int p2, string@ info, int[] @ p4 )
{
    file f;
    if( f.open( PATH_TO_FASTPANEL_FOLDER + player.Id, "w" ) == 0 )
    {
        // f.setPos(0);
        f.writeString( info );
    }
    f.close();
}

void unsafe_send_fastpanel( Critter& cr, int p0, int p1, int p2, string@ info, int[] @ p4 )
{
    file   f;
    string word = "", word2 = "";
    uint   pos = 0;
    // cr.Say(SAY_NETMSG, "start sendin");
    if( f.open( PATH_TO_FASTPANEL_FOLDER + cr.Id, "r" ) == 0 )
    {
        // cr.Say(SAY_NETMSG, "file open successful");
        f.setPos( 0 );
        while( !f.isEndOfFile() )      // || count > length))
        {
            pos = f.getPos();
            f.readLine( word );
            word2 += word;

//				cr.Say(SAY_NETMSG, word);
//				cr.Say(SAY_NETMSG, word);
        }
        f.close();
    }
    // if(word2 != "")	cr.RunClientScript("client_screen_fastpanel@LoadPanel", 0, 0, 0, word2, null); else cr.Say(SAY_NETMSG, "error with sending fastpanel info");
    if( p0 == 0 )
    {
        if( pos != 0 )
            cr.RunClientScript( "client_screen_fastpanel@GetServerFileSize", pos, 0, 0, "", null );
    }
    else
    {
        if( word2 != "" )
            cr.RunClientScript( "client_screen_fastpanel@LoadPanel", 0, 0, 0, word2, null );
        else
            cr.Say( SAY_NETMSG, "error with sending fastpanel info" );
    }
    // SendFastPanelInfo(player, true);
}

void unsafe_inputDigits( Critter& player, int itemId, int digits, int param2, string@ param3, int[] @ param4 )
{
    Item@ item = GetItem( itemId );
	if( valid( item ) ) {
		if( InteractContainer.find( item.GetProtoId() ) != -1 && ( item.GetProtoId() != PID_SLOT_MACHINE && item.GetProtoId() != PID_SLOT_MACHINE2 ) ) { //вендинговые аппараты
			item.Val6 = digits;
			StartMenuVendingMachine( player, item );
		} else if( item.GetProtoId() == PID_TERMINAL ) { //Терминал управления турелями
			if( item.Val6 == 0 ) {
				item.Val6 = digits;
				player.Say( SAY_NETMSG, "|0xFFFF00 Вы установили новый пароль: " + digits );
			} else if ( item.Val6 == digits ) {
				item.Val8 = 0;
				player.Say( SAY_NETMSG, "|0xFFFF00 Вы ввели верный пароль!" );
			} else {
				player.Say( SAY_NETMSG, "|0xFFFF00 Пароль не подходит!" );
			}
		}
		player.RunClientScript( "client_screen_numberpad@HideScreen", 0, 0, 0, "", null );
		StartMenuTerminal( player, item );
	}
}

void unsafe_openCodeDoor( Critter& player, int itemId, int code, int param2, string@ param3, int[] @ param4 )
{
    Item @ item = GetItem( itemId );
    if( @item == null )
    {
        return;
    }
    if( ( player.HexX < item.HexX + 2 || player.HexX > item.HexX - 2 ) && ( player.HexY < item.HexY + 2 || player.HexY > item.HexY - 2 ) )
    {
        if( param2 != 0 )
            if( code >= pow( 10, item.Val1 ) )
            {
                item.Val4 = code;
                player.Say( SAY_NETMSG, "Вы установили новый код : " + code );
                return;
            }
            else
            {
                player.Say( SAY_NETMSG, "Не допустимый код" );
                return;
            }
        if( item.Val4 == code )
        {
            if( _LockerIsClose( item ) )
            {
                item.LockerOpen();
                player.RunClientScript( "client_screen_codedoor@HideScreen", 0, 0, 0, "", null );
				if( item.GetType() == ITEM_TYPE_CONTAINER ) 
				{
					ShowContainer( player, item, item.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
				}
            }

        }
        else
            player.Say( SAY_NETMSG, "Не верный код" );
    }
    else
        player.Say( SAY_NETMSG, "Слишком далеко" );
}

void unsafe_history_load( Critter& player, int loadType, int param1, int param2, string@ param3, int[] @ param4 )
{
    if( player.GetAccess() < 2 )
    {
        player.Say( SAY_NETMSG, "hey dude. don't try to hack this. just gohome." );
        Log( "hack detected player " + player.Id + " name " + GetPlayerName( player.Id ) + " try crack history menu" );
        return;
    }
    Critter@ cr = GetCritter( param1 );
    switch( loadType )
    {
    case 0:
        LoadClientHistoryBase( player, false );
        break;
    case 1:
        LoadClientHistoryBase( player, true );
        break;
    case 2:
        LoadCritterHistory( @cr != null ? cr : player );
        break;
    }
}

void unsafe_history_save( Critter& player, int param0, int param1, int param2, string@ saveText, int[] @ param4 )
{
    if( saveText == "" )
    {
        player.Say( SAY_NETMSG, "Oops! Same error here!" );
        return;
    }
    SaveCritterHistory( player, saveText );
}

void unsafe_hotkey_command( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{

    string type = "", command = "";
    string@[] @ cmd = split( param3, "*" );
    {
        command = cmd[ 0 ];
        type = cmd.length() > 1 ? cmd[ 1 ] : "";
    }
    if( type == "TEXT" )
    {
        if( player.Timeout[ TO_SAY ] > 0)
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12601 );
            return;
        }
        player.TimeoutBase[ TO_SAY ] = SAY_TIMEOUT;
        if( command.length() > 64 )
            command = substring( command, 0, 64 );
        string@[] @ words = split( command, "_" );
        string text = join( words, " " );
        player.Say( /*(param4[0]>3)?SAY_RADIO:*/ ( param4[ 0 ] * 2 + 1 ), text ); // Param4[0]: 0 - norm, 1 - shout, 2 - emote, 3 - whisp
    }
    else
    {
        if( command == "RELOAD" )
        {
			if( player.IsBusy() || player.Param[ ST_CURRENT_AP ] < 0 ) return;
			
			Item@ weapon = player.GetItem( 0, SLOT_HAND1 );
            if( !valid( weapon ) ) return;
			
			Item@ ammo = player.GetItem( weapon.AmmoPid, -1 );
			if( !valid( ammo ) )
			{
				if( weapon.AmmoPid == 0 ) { player.Say( SAY_NETMSG, "|0xFFFF00 Это оружие не имеет магазина." ); return; }
				
				Item@[] inventory;
				Item@[] belts;
				Item@[] ammos;
				uint count = player.GetItems( -1, inventory );
				for( uint i = 0; i < count; i++ )
				{
					if( inventory[i].Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
						ammos.insertLast( inventory[i] );
					
					if( inventory[i].GetProtoId() == PID_AMMO_BELT )
						belts.insertLast( inventory[i] );
				}
				
				Item@ finded;
				uint max_count = 0;
				for( uint i = 0; i < belts.length(); i++ )
				{
					Item@[] subitems;
					uint count = belts[i].GetItems( 0, subitems );
					for( uint j = 0; j < count; j++ )
					{
						if( subitems[j].Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
							ammos.insertLast( subitems[j] );

						if( subitems[j].GetProtoId() == weapon.AmmoPid && subitems[j].GetCount() > max_count )
						{	
							@ammo = subitems[j];
							max_count = subitems[j].GetCount();
						}
					}
				}
				
				if( valid( ammo ) )
					player.Say( SAY_NETMSG, "|0xFFFF00 Вы заряжаетесь из патронташа." );

				if( !valid( ammo ) && ammos.length() > 0 )
				{
					@ammo = @ammos[ Random( 0, ammos.length() - 1 ) ];
					player.Say( SAY_NETMSG, "|0xFFFF00 Вы изменили тип боеприпаса, за неимением альтернатив." );
				}
				
				if( !valid( ammo ) )
				{
					player.Say( SAY_NETMSG, "|0xFFFF00 У вас нет аммуниции данного калибра." );
					return;
				}					
			}

			//player.Wait(GetProtoTime(weapon[ 0 ].Proto, USE_RELOAD, player));
			//Там какие-то дробные, поэтому доп.множитель на 100 сверх VVish-евского скалирования
			player.ParamBase[ ST_CURRENT_AP ] -= weapon.Proto.Weapon_ReloadAp * 100; 
			player.Action( ACTION_RELOAD_WEAPON, 0, weapon );
			
			testInfo( player, "Reloaded with " + itemDesc( ammo ) );//REMOVE IT AFTER A WEEK OF TESTS
			critter_reload_weapon( player, weapon, ammo );
        }
		
		else if( command == "SWAPAMMO" )
		{
			if( player.IsBusy() || player.Param[ ST_CURRENT_AP ] < 0 ) return;
			
			Item@ weapon = player.GetItem( 0, SLOT_HAND1 );
            if( !valid( weapon ) ) return;

			Item@ ammo;
			Item@[] inventory;
			Item@[] belts;
			Item@[] ammos;
			uint count = player.GetItems( -1, inventory );
			for( uint i = 0; i < count; i++ )
			{
				if( inventory[i].Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
					ammos.insertLast( inventory[i] );
				
				if( inventory[i].GetProtoId() == PID_AMMO_BELT )
					belts.insertLast( inventory[i] );
			}
			
			Item@ finded;
			uint max_count = 0;
			for( uint i = 0; i < belts.length(); i++ )
			{
				Item@[] subitems;
				uint count = belts[i].GetItems( 0, subitems );
				for( uint j = 0; j < count; j++ )
				{
					if( subitems[j].Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
						ammos.insertLast( subitems[j] );
				}
			}
			
			if( !valid( ammo ) && ammos.length() > 0 )
			{
				@ammo = @ammos[ Random( 0, ammos.length() - 1 ) ];
				if( ammo.GetProtoId() != weapon.AmmoPid )
					player.Say( SAY_NETMSG, "|0xFFFF00 Вы изменили тип боеприпаса." );
			}
			
			if( !valid( ammo ) )
			{
				player.Say( SAY_NETMSG, "|0xFFFF00 У вас нет аммуниции данного калибра." );
				return;
			}					

			//player.Wait(GetProtoTime(weapon[ 0 ].Proto, USE_RELOAD, player));
			//Там какие-то дробные, поэтому доп.множитель на 100 сверх VVish-евского скалирования
			player.ParamBase[ ST_CURRENT_AP ] -= weapon.Proto.Weapon_ReloadAp * 100; 
			player.Action( ACTION_RELOAD_WEAPON, 0, weapon );
			
			testInfo( player, "Switched to " + itemDesc( ammo ) );//REMOVE IT AFTER A WEEK OF TESTS
			critter_reload_weapon( player, weapon, ammo );
		}

        else if( command == "USE_SELF" )
        {
            Item@ use_item = player.GetItem( param4[ 0 ], -1 );
            if( valid( use_item ) && player.Stat[ ST_CURRENT_AP ] >= 2 )
            {
                critter_use_item( player, use_item, null, null, null, 0 );
                player.Action( ACTION_USE_ITEM, 0, use_item );
                player.ParamBase[ ST_CURRENT_AP ] -= 50;
            }
        }

        else
            Log( "Chiter detected: " + GetPlayerName( player.Id ) );
    }
}

void unsafe_hex_attack( Critter& cr, int hexX, int hexY, int wpn_pid, string@ command, int[] @ param4 )
{
	if( cr.IsBusy() || cr.ParamBase[ QST_GAMEMODE ] == GAME_START )
		return;
	
    Map@ map = cr.GetMap();

    if( map is null )
        return;

	Item@ hand = _CritGetItemHand(cr);
    uint8 mode = 0;
	
	ProtoItem@ weapon, ammo;
	if( valid( hand ) )
	{
		mode = hand.Mode;
		@weapon = GetProtoItem( hand.GetProtoId() );
	}		
	else
	{
		// if( wpn_pid != 0 ) //Костыль, про запас.
			// @weapon = GetProtoItem( wpn_pid );
		@weapon = cr.GetSlotProto( SLOT_HAND1, mode );//unarmed
	}

	if( !valid( weapon ) )
	{
		cr.Say( SAY_NETMSG, "Этим нельзя драться." );
		return;
	}

    uint16 toHx = hexX, toHy = hexY;
    int    dist = GetDistantion( cr.HexX,  cr.HexY, hexX, hexY );
	
    map.GetHexCoord( cr.HexX,  cr.HexY, toHx, toHy,  0.0f, dist );
    if( ( hexX != toHx ) || ( hexY != toHy ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, 104 );
        return;
    }
    
    int wpnMaxDist = _WeaponMaxDist( weapon, mode );
    if( _WeaponSkill( weapon, mode ) == SK_THROWING )
        wpnMaxDist = MIN( wpnMaxDist, 3 * MIN( int(10), cr.Stat[ ST_STRENGTH ] ) );
		//wpnMaxDist = MIN( wpnMaxDist, 3 * MIN( int(10), cr.Stat[ ST_STRENGTH ] + 2 * cr.Perk[ PE_HEAVE_HO ] ) );
		
    if( dist > wpnMaxDist )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, 102 );
        return;
    }

	if( valid( hand ) )
	{
		bool isFlareGun = ( hand.AmmoPid == PID_FLARE_GUN_AMMO ) && ( mode == 1 );
		uint[] rocket_pids = { PID_EXPLOSIVE_ROCKET, PID_ROCKET_AP, PID_ROBO_ROCKET_AMMO, PID_GRENADELAUNCHER_AMMO };
		bool isRocket = rocket_pids.find( hand.AmmoPid ) != -1;

		if( weapon.Weapon_MaxAmmoCount > 0 )
		{
			if( hand.AmmoCount == 0 )
				return;
			else
				@ammo = GetProtoItem( hand.AmmoPid );
		}
		
		bool brokenArm = cr.Damage[ DAMAGE_LEFT_ARM ] + cr.Damage[ DAMAGE_RIGHT_ARM ] > 0;
		bool brokenTwoArms = cr.Damage[ DAMAGE_LEFT_ARM ] * cr.Damage[ DAMAGE_RIGHT_ARM ] > 0;
		
		if( brokenTwoArms )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, STR_COMBAT_NEED_DMG_TWO_ARMS );
			return;
		}

		if( FLAG( hand.Flags, ITEM_TWO_HANDS ) && brokenArm )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_COMBAT, STR_COMBAT_NEED_DMG_ARM );
			return;
		}
	}

	uint8 weaponMode = mode; //сохранил промежуточное значение
	mode = weaponMode;
	
	int needAP = 0;
	
	if( _WeaponModeAim( mode ) == HIT_LOCATION_NONE && _WeaponAim( weapon, mode & 0x0F ) )
	{
		mode = ( weaponMode & 0x0F ) + ( cr.ParamBase[CR_AUTO_AIM] << 4 );
		
		if( cr.ParamBase[CR_AUTO_AIM] != HIT_LOCATION_NONE )
		{
			int delta = int( _WeaponApCost( weapon, weaponMode ) ) * 0.2;
			needAP += delta; //плюс 20% затрат ОД на прицельные атаки
		}
	}
	
	needAP += int( _WeaponApCost( weapon, weaponMode ) );
	
	if( cr.Stat[ ST_CURRENT_AP ] < needAP )
        return;
	
    cr.StatBase[ ST_CURRENT_AP ] -= needAP * 100;

    Critter@ target = map.GetCritter( uint16( hexX ), uint16( hexY ) );

	uint windupTime = GetProtoWindupTime(weapon, mode, cr);

	uint targetId = valid( target ) ? target.Id : 0;
	uint ammoPID = valid( ammo ) ? ammo.ProtoId : 0;
	uint[] vals = { cr.Id, targetId, weapon.ProtoId, mode, ammoPID, hexX, hexY };
	
	cr.SetDir( GetDirection( cr.HexX, cr.HexY, hexX, hexY ) );
	if( cr.ParamBase[ CR_IS_WINDUPED ] == 0 ) {
		uint8 weapon_Subtype = valid( weapon ) ? weapon.Item_Subtype : 0;
		if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_NORMAL_MINIGUN ) {
			cr.Say( SAY_NETMSG, "|0xFFFF00 Вы не можете вести огонь с этого оружия без предварительного вскидывания для раскрутки стволов!" );
			return;
		}
		cr.Wait( windupTime );
	} else {
		cr.Wait( 10 );
		windupTime = 0;
	}
	
	if( weapon.Windup_Time != 0 && !_ItemIsBroken( hand ) && GetDeteriorationProcent( hand ) < 100 ) {
		cr.Action(ACTION_WINDUP, ACTION_FLAG_CHOSEN_INCLUSIVE << 12 | mode, hand );
		cr.SetAnims( COND_LIFE, 0, ANIM2_WINDUP );
		CreateTimeEvent( AFTER( REAL_MS( windupTime ) ), "main@e_DelayedAttack", vals, false );
	} else {
		CombatAttack( cr, target, weapon, mode, ammo, hexX, hexY );
		cr.Wait( GetProtoTime( weapon, mode, cr ) );
	}

	
    // HIT_LOCATION_UNCALLED
	//CombatAttack( cr, target, weapon, mode, ammo, uint16( hexX ), uint16( hexY ) );
    //cr.Wait( GetActionTime( ACTION_USE_WEAPON, cr ) ); //20 * _WeaponApCost (weapon, mode) );//TODO: Либо перенести wait в комбататак, либо сделать проверку на прицельные прям здесь.
}

void unsafe_hex_useItem( Critter& cr, int hexX, int hexY, int itm_pid, string@ command, int[] @ param4 )
{
	Item@ usedItem = _CritGetItemHand( cr );
	uint16 usedItemPid = usedItem.GetProtoId();
	if( usedItemPid == PID_ROD_STRING_HOOK ) {
		uint8 throwDir = GetDirection( cr.HexX, cr.HexY, hexX, hexY );
		cr.SetDir( throwDir );
		PrepareFishing( cr, usedItem, hexX, hexY );
	}
}

void unsafe_stopMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = uint( 10 + param0 * 10 ); i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.Say( SAY_NETMSG, "Нет доступа." );
            return;
        }
        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ClearEnemyStack();
            controlled.EraseTimeEvents( 9 );
            controlled.SetDir( GetDirection( controlled.HexX, controlled.HexY, param1, param2 ) );
        }
    }
}

void unsafe_moveMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = uint( 10 + param0 * 10 ); i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.Say( SAY_NETMSG, "Нет доступа." );
            return;
        }
        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            AddWalkPlane( controlled, 1, param1 + Random( -i, i ), param2 + Random( -i, i ), GetDirection( controlled.HexX, controlled.HexY, param1, param2 ), valid( param3 ), 0 );
            if( param0 == 0 )
                controlled.ClearEnemyStack();
        }
    }
}

void unsafe_attackMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );
    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.Say( SAY_NETMSG, "Нет доступа." );
            return;
        }
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            AddAttackPlane( controlled, 0, target, __RunOnCombat );
            controlled.AddEnemyInStack( target.Id );
        }
    }
}

void unsafe_chaseMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );
    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
        {
            player.Say( SAY_NETMSG, "Нет доступа." );
            return;
        }
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.StatBase[ ST_KILLER_PERSON ] = target.Id;
            controlled.AddTimeEvent( "follow", 30, 9 );
        }
    }
}


void unsafe_say( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ controlled = GetCritter( param0 );
    if( param1 != 1 && param1 != 5 && controlled.IsPlayer() )
    {
        player.Say( SAY_NETMSG, "Нет доступа." );
        return;
    }
    if( valid( controlled ) && controlled.ParamBase[ MERC_MASTER_ID ] != int( player.Id ) )
    {
        player.Say( SAY_NETMSG, "Нет доступа." );
        return;
    }
    say( player, param0, param1, 0 );
}

void CheckRest( Critter& player )
{
	if( player.ParamBase[ CR_RELAXED ] > 0 )
	{	
		//REST_MUL = коэффициент преобразования опыта во "время отдыха", т.е. количество экспы, эквивалентной 1 секунде. Сейчас исходит из того, что за минуту отдыха "конвертируется" 100 опыта.
		float REST_MUL = 100.0 / 60.0; //Читай выше ^
		int rest = CLAMP( player.ParamBase[ CR_RELAXED ] * REST_MUL, 0, player.ParamBase[ CR_FITNESS ] );
		player.StatBase[ ST_EXPERIENCE ] += rest;
		player.ParamBase[ CR_FITNESS ] = CLAMP( player.ParamBase[ CR_FITNESS ] - rest, 0, player.ParamBase[ CR_FITNESS ] );
		player.ParamBase[ CR_RELAXED ] = 0;
	}
}

//import void DeepSleep( Critter& player ) from "general_unsafe";
void DeepSleep( Critter& player )
{
	player.AddTimeEvent( "cte_deep_sleep", 0, CTE_SLEEPING, 0 );
}

//import void EraseSleep( Critter& player ) from "general_unsafe";
void EraseSleep( Critter& player )
{
	if( player.GetTimeEvents( CTE_SLEEPING, null, null, null ) != 0 )
	{
		CheckRest( player );
		player.EraseTimeEvents( CTE_SLEEPING );
		player.StatBase[ ST_CURRENT_AP ] = 100 * 100;
		player.AddTimeEvent( "cte_wakeup", REAL_SECOND(1), CTE_SLEEPING, 0 );
		player.Say( SAY_NETMSG, "Вы приходите в себя." );
		player.ParamBase[ CR_VAL8 ] = 0;
	}
}

uint cte_deep_sleep( Critter& player, int identifier, uint& rate )
{
	if( !player.IsKnockout() || player.IsDead() ) return 0;
	
	if( rate >= 6 || player.ParamBase[ CR_RELAXED ] >= 60 * 30 ) //полчаса, так или иначе
	{
		CheckRest( player );
		//player.Say( SAY_NETMSG, "Вы приходите в себя отдохнувшим." );
		player.TimeoutBase[ TO_TIREDNESS ] = 0;
		EraseSleep( player );
		return 0;
	}
	else
		player.Say( SAY_NETMSG, "До конца отдыха осталось " + ( 30 - 5 * rate ) + " минут. " );
	
	rate++;	
	return REAL_MINUTE(5);
}

uint cte_wakeup( Critter& player, int identifier, uint& rate )
{
	if( player.IsKnockout() ) {
		
		//player.Disconnect();
		return REAL_SECOND( 2 );
	}
	
	if( player.ParamBase[ CR_SLEEPING_STATE ] == 3 )
	{
		player.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 200, player.HexX, player.HexY );
		player.StatBase[ ST_CURRENT_AP ] = -50 * 100;
        player.Say( SAY_NETMSG, "Вы не в силах стоять." );
        player.AddTimeEvent( "cte_sleep", 0, CTE_SLEEPING, 0 );
	}
	return 0;
}

//import void unsafe_sleep( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
void unsafe_sleep( Critter& player, int isBack, int isRemote, int isKnocking, string@ param3, int[] @ param4 ) //exported
{
	if( player.IsDead() )
	{
		CheckRest( player );
		player.ParamBase[ CR_SLEEPING_STATE ] = 0;
		player.ParamBase[ CR_VAL8 ] = 0;
		player.EraseTimeEvents( CTE_SLEEPING );
		return;
	}

	if( ( player.IsBusy() && !player.IsKnockout() ) && isRemote == 0 )
	{
		return;
	}

    if( player.IsKnockout() && player.GetTimeEvents( CTE_SLEEPING, null, null, null ) != 0 )
    {
		if( isKnocking != 0 ) return;
		
		if( player.Param[ CR_SLEEPING_STATE ] == 3 && isRemote == 0 )
		{
			player.Say( SAY_NETMSG, "Вы не в силах подняться." );
			return;
		}
		player.ParamBase[ CR_SLEEPING_STATE ] = 0;
        player.StatBase[ ST_CURRENT_AP ] += 100 * 100;
		CheckRest( player );
        player.EraseTimeEvents( CTE_SLEEPING );
        player.Say( SAY_NETMSG, "Вы встаёте." );
		SayLog( player, crInfo( player ) + " встаёт." );
		player.ParamBase[ CR_VAL8 ] = 0;
		return;
    }

	if( !player.IsKnockout() && player.GetTimeEvents( CTE_SLEEPING, null, null, null ) == 0 )
    {
        player.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( isBack == 0 ) ), 100, player.HexX, player.HexY );
        player.Say( SAY_NETMSG, "Вы лежите." );
		SayLog( player, crInfo( player ) + " ложится." );
        player.AddTimeEvent( "cte_sleep", 0, CTE_SLEEPING, 0 );
		player.ParamBase[ CR_SLEEPING_STATE ] = 1 + isBack;
		if( isRemote == 1 )
			player.ParamBase[ CR_SLEEPING_STATE ] = 3;
		return;
    }
}



uint cte_sleep( Critter& player, int identifier, uint& rate )
{
	if( player.IsPlayer() ) //НПЦ не спят.
	{
		player.ParamBase[ CR_RELAXED ]++;
		if( player.ParamBase[ CR_SLEEPING_STATE ] != 3 && player.ParamBase[ CR_RELAXED ] > 60 && player.ParamBase[ CR_VAL8 ] == 0 )
		{
			player.ParamBase[ CR_VAL8 ] = 1;
			player.Say( SAY_NETMSG, "Если вы пролежите не вставая полчаса - то полностью восстановите накопившуюся усталость." );
			DeepSleep( player );
		}
	}
	
	if( !player.IsKnockout() )
		return 0;
		
    if( player.StatBase[ ST_CURRENT_AP ] >= -5000 )
        player.StatBase[ ST_CURRENT_AP ] = -5000;
	
	player.Wait ( 1000 );
    return REAL_SECOND(1);
}

void unsafe_itemhit2( Critter& player, int itemId, int x, int y, string@ param3, int[] @ param4 )
{
    if( player.IsDead() || player.IsKnockout() ) return;

	if ( player.Timeout[ TO_SK_STEAL ] > 0 )
	{
		player.Say( SAY_NETMSG, "Вы не можете бить так часто." );
		return;
	}
	if( ABS( int(x - player.HexX) ) <= 1 && ABS( int(y - player.HexY) ) <= 1 )
	{
		player.SetDir( GetDirection( player.HexX, player.HexY, x, y ) );
		Map@ map = player.GetMap();
		if( !valid( map ) ) return;
		map.SetText( x, y, COLOR_GRAY, "стук" );
		
        Item@[] items;
		
		uint16 hexX = player.HexX, hexY = player.HexY;
		map.MoveHexByDir( hexX, hexY, player.Dir, 1 );
		map.GetItems( hexX, hexY, items );
		
		for( uint i = 0, len = items.length(); i < len; i++ )
			if( items[i].GetType() == ITEM_TYPE_DOOR )
				UseSkillOnLocker( player, items[i], SKILL_PICK_ON_GROUND );
		
		player.Say( SAY_NETMSG, "Вы постучали." );
		SayLog( player, crInfo( player ) + " стучит по (" + x + ":" + y + ")." );
		player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
		return;
	}
	else player.Say( SAY_NETMSG, "Далеко." );
	return;			
}

void unsafe_itemhit( Critter& player, int id, int itemId, int param2, string@ param3, int[] @ param4 )
{
    Critter @ target = GetCritter( id );

    if( player.IsDead() || player.IsKnockout() )
	{
		player.Say( SAY_NETMSG, "Вы не в состоянии сделать это." );
		return;
	}
	
	if( !valid(target) )
	{
		player.Say( SAY_NETMSG, "Вы промахнулись по цели." );//TODO: "нечего бить?"
		return;
	}
	
	if ( player.Timeout[ TO_SK_STEAL ] > 0 )
	{
		player.Say( SAY_NETMSG, "Вы не можете бить так часто." );
		return;
	}
	if ( target.IsDead() || target.IsKnockout())
	{	
		DragAndDrop( player, target );
		player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 3 );
		return;
	}			
	if( ABS( int(target.HexX - player.HexX) ) <= 1 && ABS( int(target.HexY - player.HexY) ) <= 1 )
	{
		Item@ weapon = _CritGetItemHand( player );
		SayLog( player, crInfo( player ) + " бьёт по " + crInfo( target, true ) + "." );

		if( !(weapon is null) )
		{
			uint16 weight = weapon.Proto.Weight;
			weight = CLAMP( weight, 2000, 8000 );
			uint8  ap = weight * 0.001;
			ap = CLAMP( ap, 20, 80 );
			if( ap <= player.Stat[ ST_CURRENT_AP ] )
			{
				player.SetDir( GetDirection( player.HexX, player.HexY, target.HexX, target.HexY ) );
				_CritAnimateThrow( player );
				player.Wait ( 1000 );
				player.StatBase[ ST_CURRENT_AP ] -= ap * 100;
				
				if ( player.Skill[ SK_MELEE_WEAPONS ] - target.Stat[ ST_ARMOR_CLASS ] - ( weight * 0.002 ) - target.Stat[ ST_BLOCK ]*50 < Random( 0, 100) )
					{
					player.Say( SAY_NETMSG, "Вы промахнулись." );
					return;
					}
				uint8 strBonus = ( player.Stat[ ST_STRENGTH ] > 6 ? player.Stat[ ST_STRENGTH ] - 6 : 1 );
				int damage = strBonus + player.StatBase[ ST_MELEE_DAMAGE ] + Random( 0, weight * 0.002 );
				InjureCritter( target, damage, DAMAGE_NORMAL, target.Dir, player.Id );
				
				player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
				player.TimeoutBase[ TO_AGGRESSOR ] = __FullSecond + REAL_MINUTE( 1 );
				// player.TimeoutBase[ TO_BATTLE ] = __FullSecond + REAL_MINUTE( 1 );
				// target.TimeoutBase[ TO_BATTLE ] = __FullSecond + REAL_MINUTE( 1 );

				if( target.IsNpc() && target.IsSee( player ) )
					target.AddEnemyInStack( player.Id );

				return;
			}
			player.Say( SAY_NETMSG, "Недостаточно очков действия." );
			return;
		}
		else if( 40 <= player.Stat[ ST_CURRENT_AP ] )
			{
				player.SetDir( GetDirection( player.HexX, player.HexY, target.HexX, target.HexY ) );
				_CritAnimateThrow( player );
				player.Wait ( 1000 );
				player.StatBase[ ST_CURRENT_AP ] -= 40 * 100;
				
				if ( player.Skill[ SK_UNARMED ] - target.Stat[ ST_ARMOR_CLASS ] - target.Stat[ ST_BLOCK ]*50 < Random( 0, 100) )
					{
					player.Say( SAY_NETMSG, "Вы промахнулись." );
					return;
					}
				uint8 strBonus = ( player.Stat[ ST_STRENGTH ] > 6 ? player.Stat[ ST_STRENGTH ] - 6 : 1 );
				int   damage = Random( strBonus, strBonus + player.StatBase[ ST_MELEE_DAMAGE ] + 1 );           // every 500g 1dmg point
				InjureCritter( target, damage, DAMAGE_NORMAL, target.Dir, player.Id );
				
				player.TimeoutBase[ TO_SK_STEAL ] = __FullSecond + REAL_SECOND( 2 );
				player.TimeoutBase[ TO_AGGRESSOR ] = __FullSecond + REAL_MINUTE( 1 );
				// player.TimeoutBase[ TO_BATTLE ] = __FullSecond + REAL_MINUTE( 1 );
				// target.TimeoutBase[ TO_BATTLE ] = __FullSecond + REAL_MINUTE( 1 );

				if( target.IsNpc() && target.IsSee( player ) )
					target.AddEnemyInStack( player.Id );
				return;
			}
			else player.Say( SAY_NETMSG, "Недостаточно очков действия." );
			return;			
	}
	else player.Say( SAY_NETMSG, "Далеко." );
}

void unsafe_itemthrow ( Critter& player, int hx, int hy, int param2, string@ param3, int[] @ param4 ) 
{
	if( player.IsBusy() || player.Stat[ ST_CURRENT_AP ] < 50 )
		return;

	uint16 tx = hx, ty = hy;
	uint distance = GetDistantion( player.HexX, player.HexY, hx, hy );
	Map@ currentMap = player.GetMap ();

	if( !valid(currentMap) || player.IsDead() || player.IsKnockout() || distance > uint( player.Stat [ST_STRENGTH] * 2 ) ) 
	{
		player.Say (SAY_NETMSG, "Вы не в состоянии кидать так далеко");
		return;
	}
	
	if( player.Param [P_BODYSWAPPED] != 0 ) 
	{
		player.Say( SAY_NETMSG, "Вы пытаетесь бросить предмет, но сознание владельца тела не дает вам этого сделать." );
		return;
	}	
	
	currentMap.GetHexCoord( player.HexX,  player.HexY, tx, ty,  0.0f, distance );
	Critter@ target = currentMap.GetCritter( tx, ty );

	Item@[] items;
	Item@ container;
	uint count = currentMap.GetItems( tx, ty, items );
	for( uint i = 0; i < count; i++ )
		if( items[i].GetType() == ITEM_TYPE_CONTAINER && ( !items[i].Proto.Container_Changeble || FLAG( items[i].LockerCondition, LOCKER_ISOPEN ) ) )
		{
			@container = @items[i];
			break;
		}

	if( !currentMap.IsHexPassed( tx, ty ) && !valid(target) && !valid(container) )
		currentMap.GetHexCoordWall( player.HexX,  player.HexY, tx, ty,  0.0f, distance );

	Item@ itemInHand = _CritGetItemHand (player);
	if( !valid(itemInHand) ) return;
	
	uint pid = itemInHand.GetProtoId();
	uint[] impossibles = { PID_HANDCUFFS_USED, PID_ROPE_USED, PID_WORKBENCH_TOKEN, PID_FIREPLACE_TOKEN };
	if ( impossibles.find( pid ) > -1 || ( pid == PID_SANDBAG_1 && !isGM( player ) ) ) 
	{
		player.Say (SAY_NETMSG, "Вы не можете бросить это.");
		return;
	}

	SayLog( player, crInfo( player ) + " бросает " + itemName( pid ) + " в (" + tx + ":" + ty + ")." );

	player.SetDir( GetDirection( player.HexX, player.HexY, tx, ty ) );
	if( valid(target) && !target.IsDead() ) 
	{
		bool targetFreeHands = (_CritGetItemHand (target) is null);
		if (targetFreeHands && !(target is player) ) 
		{
			MoveItem (itemInHand, /*player.CountItem (itemInHand.GetProtoId())*/ 1, target);
			target.Say (SAY_EMOTE, "Ловит предмет");
		} else 
		{
			MoveItem (itemInHand, /*player.CountItem (itemInHand.GetProtoId())*/ 1, currentMap, tx, ty);
			if (!(target is player)) target.Say (SAY_EMOTE, "Руки заняты, не может поймать предмет");
		}
	} 
	else 
	{
		if( valid( container ) && FLAG( itemInHand.Flags, ITEM_NO_BLOCK ) && !currentMap.IsHexPassed( tx, ty ) && !FLAG( container.Flags, ITEM_CAN_PICKUP ) )
		{
			MoveItem( itemInHand, 1, container, 0 );
			CheckCartPicMap( container );//Обновляет картинку содержимого телеги.
		}
		if( find_any_glass( itemInHand ) != 0 )
		{
			uint break_chance = Random( 1, 100 );
			if ( break_chance >= 20 )
			{
				
				currentMap.PlaySound( glass_break_sounds[ Random( 0, glass_break_sounds.length() -1 ) ], tx, ty, 10 );
				uint total_break_chance = Random( 0, 2 );
				if( total_break_chance != 2 || find_other_glass(itemInHand) ) // search.fos
				{	
					currentMap.SetText( tx, ty, COLOR_LGRAY, ":разбилась вдребезги:" );
				}
				else
				{
					currentMap.AddItem( tx, ty, PID_ROSETTE, 1 );
				}
				_SubItem( itemInHand , 1 );
			}
			else
			{
				MoveItem( itemInHand, 1, currentMap, tx, ty );
			}
		} else if ( pid == PID_OIL_LAMP && itemInHand.Val0 != 0 ) {
			_SubItem( itemInHand , 1 );
			GenerateFire( currentMap, tx, ty, 1, 1, player.Id );
		} else {
			if( itemInHand.IsStackable() )
			{
				_SubItem( itemInHand, 1 );
				Item@ thrownItem = currentMap.AddItem( tx, ty, pid, 1 );
				uint[] values = { thrownItem.Id };
				CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "critter_item_movement@e_stack_items", values, true );
			}
			else
				MoveItem( itemInHand, 1, currentMap, tx, ty );
		}
	}
	
	currentMap.RunFlyEffect( _WeaponEffect( GetProtoItem(PID_FRAG_GRENADE), _WeaponModeUse (0) ), player, target, player.HexX, player.HexY, tx, ty );
	_CritAnimateThrow (player);
	player.Say (SAY_EMOTE, "Бросает предмет");
	player.Wait (200 * 5 ); 
	player.ParamBase[ ST_CURRENT_AP ] -= 50 * 100;
}

void unsafe_selfLex( Critter& player, int, int, int, string@ text, int[]@ ) {
    if( !valid(text) || text == "" ) {
		player.SetLexems( null );
        //ShowInputBoxScreen( player, "item@unsafe_RpNamerUseScreen#Ваше описание:", 0, INPUTBOX_CLOSE_ON_ENTER );
	} else {
		 player.SetLexems( text );
	}
	player.Say( SAY_NETMSG, "Вы изменили своё описание." );
}

void unsafe_newPopup( Critter& player, int x, int y, int, string@ text, int[]@) {
	if( player.ParamBase[ QST_GAMEMODE ] == GAME_START ) return;
	
	Item@ popup = getPopup( player );
	if( valid( popup ) && ( popup.Val0 == 0 ) && !isGM( player ) )
		return;
	
	if( isGM( player) && x != 0 && y != 0 )
	{
		player.ParamBase[CR_VAL0] = x;
		player.ParamBase[CR_VAL1] = y;
	}
	
	if( !valid(text) || text == "" ) {
		player.Say( SAY_NETMSG, "Опишите детали, характерные для этого места." );
		ShowInputBoxScreen( player, "general_unsafe@unsafe_PopupDescInput#Описание:", 0, INPUTBOX_CLOSE_ON_ENTER );
	} else {
		popupDescInput( player, substring( text, 1, text.length() - 1 ) );
	}
}

void unsafe_PopupDescInput( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	popupDescInput( player, param3 );
}

void PopupDescInput( Critter& player, uint answerI, string& answerS ) { popupDescInput( player, answerS ); }
void popupDescInput( Critter& player, string @answerS = null )
{
    if( !valid(player) ) return;
	
    if( valid( answerS ) && answerS.length() > 0 ) {
        if( changePopup( player, answerS ) ) {
            player.Say( SAY_NETMSG, "Вы заметили некоторые особенности этого места." );
        } else {
            player.Say( SAY_NETMSG, "У вас ничего не вышло." );
        }
    } else {
        if( delPopup( player ) ) {
            player.Say( SAY_NETMSG, "Вы убрали всё, что могло привлечь внимание." );
        } else {
            player.Say( SAY_NETMSG, "У вас не вышло замести следы." );
        }
    }
}

void unsafe_pushing( Critter& player, int type, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( player.IsBusy() || player.IsDead() || player.IsKnockout() || player.StatBase[ ST_CURRENT_AP ] < 0 || player.Mode[ MODE_NO_PVP ] != 0 ) return;
	Map@ map = player.GetMap();
	if(!valid(map)) return;
	
	uint16 x = player.HexX, y = player.HexY;
	map.MoveHexByDir( x, y, player.Dir, 1 );
	Critter@ target = map.GetCritter( x, y );
	if( valid( target ) && target.Mode[ MODE_NO_PVP ] == 0 )
	{
		player.Wait(1000);
		player.Action( ACTION_PICK_CRITTER, 2, null );
		player.ParamBase[ ST_CURRENT_AP ] -= 5000;
		if( ( player.Timeout[ TO_BATTLE ] == 0 && target.Timeout[ TO_BATTLE ] == 0 ) 
		 && ( target.IsPlayer() || ( target.IsNoPlanes() && target.GetTalkedPlayers( null ) == 0 ) )
		 && target.Mode[MODE_NO_PUSH] == 0
		 && target.MoveToDir( player.Dir ) 
		) {
			player.Say( SAY_NETMSG, "Вы толкаете цель." );
			SayLog( player, crInfo( player ) + " толкает " + crInfo( target ) + "." );
		}
		else
		{
			player.Say( SAY_NETMSG, "Цель сопротивляется." );
			SayLog( player, crInfo( player ) + " безуспешно пытается толкнуть " + crInfo( target ) + "." );
		}
	}
}

void unsafe_mark_last_checked_item( Critter& player, int itemId, int type, int, string@, int[]@ )
{
	player.ParamBase[ CR_TARGET_CONTAINER_ID ] = itemId;
	//TODO: save&use type
}