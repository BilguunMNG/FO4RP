#include "_macros.fos"

#define LVAR_TYPE	0
#define UVAR_TYPE	1

bool testInfo( Critter& cr, string text, uint8 saytype = 11 /*SAY_NETMSG*/, bool result = false )
{
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
		cr.Say( saytype, text );
	
	return result;
}

/**
	Возвращает LVAR или UVAR по индексу "таймаутов".
*/
GameVar@ getGameVar( Critter& player, Critter@ npc, int type, int id )
{
    if( !valid( npc ) )
	{
		testInfo( player, "НПЦ не найден." );
		return null; 
	}
        
	uint[][] vars = {
		//TYPE 0 : LVAR
		{ LVAR_timeout, LVAR_timeout1, LVAR_timeout2, LVAR_timeout3, LVAR_timeout4, LVAR_timeout5, LVAR_timeout6, LVAR_timeout7, LVAR_timeout8 },
		//TYPE 1 : UVAR
		{ UVAR_uniq_timeout, UVAR_uniq_timeout1, UVAR_uniq_timeout2, UVAR_uniq_timeout3, UVAR_uniq_timeout4, UVAR_uniq_timeout5, UVAR_uniq_timeout6, UVAR_uniq_timeout7, UVAR_uniq_timeout8, UVAR_uniq_timeout9 }
	};

	if( type < 0 || uint(type) >= vars.length() )
	{
		testInfo( player, "Type '" + type + "' out of bounds(" + vars.length() + ")." );
		return null; 
	}

	if( id < 0 || uint(id) >= vars[type].length() )
	{
		testInfo( player, "Index '" + id + "' out of bounds(" + vars[type].length() + ")." );
		return null; 
	}
	
	switch( type )
	{
		case( LVAR_TYPE ): return GetLocalVar( vars[type][id], npc.Id );
		case( UVAR_TYPE ): return GetUnicumVar( vars[type][id], player.Id, npc.Id );
	}
	
	return null;
}

/**
	Установка таймаута LVAR.
*/
void r_lSETm( Critter& player, Critter@ npc, int n, int value ) { lSET( player, npc, n, value * 60 ); }
void r_lSETm( Critter& player, Critter@ npc, int value ) 		{ lSET( player, npc, 0, value * 60 ); }
void r_lSET( Critter& player, Critter@ npc, int n, int value )  { lSET( player, npc, n, value ); }
void r_lSET( Critter& player, Critter@ npc, int value ) 		{ lSET( player, npc, 0, value ); }
bool lSET( Critter& player, Critter@ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, LVAR_TYPE, n );
	if( !valid( var ) )
		return testInfo( player, "TimeoutSet: !valid var #" + n + "." );
	
    var = __FullSecond + REAL_SECOND( value );
	return true;
}

/**
	Изменение таймаута LVAR.
*/
void r_lADDm( Critter& player, Critter@ npc, int n, int delta ) { lADD( player, npc, n, delta * 60 ); }
void r_lADDm( Critter& player, Critter@ npc, int delta ) 	    { lADD( player, npc, 0, delta * 60 ); }
void r_lADD( Critter& player, Critter@ npc, int n, int delta ) 	{ lADD( player, npc, n, delta ); }
void r_lADD( Critter& player, Critter@ npc, int delta ) 		{ lADD( player, npc, 0, delta ); }
bool lADD( Critter& player, Critter@ npc, int n, int delta )
{
    GameVar@ var = getGameVar( player, npc, LVAR_TYPE, n );
	if( !valid( var ) )
		return testInfo( player, "TimeoutSet: !valid var #" + n + "." );
	
    if( var < __FullSecond )
		var = __FullSecond;
	var += REAL_SECOND( delta );
	return true;
}

/**
	Проверка на то, что таймаут НПЦ (LVAR) ЗАКОНЧИТСЯ через value секунд.
*/
bool b_lLESS( Critter& player, Critter@ npc ) 					{ return  b_lLESS( player, npc, 0, 0 ); }
bool b_lMORE( Critter& player, Critter@ npc ) 					{ return  b_lMORE( player, npc, 0, 0 ); }
bool b_lLESS( Critter& player, Critter@ npc, int n, int value ) { return !b_lMORE( player, npc, n, value ); }
bool b_lMORE( Critter& player, Critter@ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, LVAR_TYPE, n );
	return !valid( var ) || ( __FullSecond + REAL_SECOND( value ) < var.GetValue() );
}
bool b_lLESSm( Critter& player, Critter@ npc, int n, int value ){ return !b_lMORE( player, npc, n, value * 60 ); }
bool b_lMOREm( Critter& player, Critter@ npc, int n, int value ){ return  b_lMORE( player, npc, n, value * 60 ); }



/**
	Установка таймаута UVAR.
*/
void r_uSETm( Critter& player, Critter @ npc, int n, int value ) { uSET( player, npc, n, value * 60 ); }
void r_uSETm( Critter& player, Critter @ npc, int value ) 		 { uSET( player, npc, 0, value * 60 ); }
void r_uSET( Critter& player, Critter @ npc, int n, int value )  { uSET( player, npc, n, value ); }
void r_uSET( Critter& player, Critter @ npc, int value ) 		 { uSET( player, npc, 0, value ); }
bool uSET( Critter& player, Critter @ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, UVAR_TYPE, n );
 	if( !valid( var ) )
		return testInfo( player, "SetUniqTO: !valid var #" + n + "." );

	var = __FullSecond + REAL_SECOND( value );
	return true;
}

/**
	Изменение таймаута UVAR.
*/
void r_uADDm( Critter& player, Critter@ npc, int n, int delta ) { uADD( player, npc, n, delta * 60 ); }
void r_uADDm( Critter& player, Critter@ npc, int delta )  		{ uADD( player, npc, 0, delta * 60 ); }
void r_uADD( Critter& player, Critter@ npc, int n, int delta ) 	{ uADD( player, npc, n, delta ); }
void r_uADD( Critter& player, Critter@ npc, int delta ) 		{ uADD( player, npc, 0, delta ); }
bool uADD( Critter& player, Critter@ npc, int n, int delta )
{
    GameVar@ var = getGameVar( player, npc, UVAR_TYPE, n );
	if( !valid( var ) )
		return testInfo( player, "TimeoutSet: !valid var #" + n + "." );
	
    if( var < __FullSecond )
		var = __FullSecond;
	var += REAL_SECOND( delta );
	return true;
}

/**
	Проверка на то, что таймаут взаимодействия НПЦ-персонаж (UVAR) ЗАКОНЧИТСЯ через value секунд.
*/
bool b_uLESS( Critter& player, Critter @ npc ) 					 { return  b_uLESS( player, npc, 0, 0 ); }
bool b_uMORE( Critter& player, Critter @ npc ) 					 { return  b_uMORE( player, npc, 0, 0 ); }
bool b_uLESS( Critter& player, Critter @ npc, int n, int value ) { return !b_uMORE( player, npc, n, value ); }
bool b_uMORE( Critter& player, Critter @ npc, int n, int value )
{
    GameVar@ var = getGameVar( player, npc, UVAR_TYPE, n );
    return !valid( var ) || ( __FullSecond + REAL_SECOND( value ) < var.GetValue() );
}
bool b_uLESSm( Critter& player, Critter@ npc, int n, int value ){ return !b_uMORE( player, npc, n, value * 60 ); }
bool b_uMOREm( Critter& player, Critter@ npc, int n, int value ){ return  b_uMORE( player, npc, n, value * 60 ); }
