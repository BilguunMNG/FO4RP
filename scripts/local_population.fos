#ifndef LOCAL_POPULATION
#define LOCAL_POPULATION

#include "_ai.fos"
#include "_utils.fos"
#include "entire_h.fos"
#include "local_population_h.fos"
#include "cimp.fos"
#include "repair_h.fos"
#include "furniture_h.fos"

uint8 timeNum = 0;
uint timeNumb = 0;
/************
   debug
************/

uint8 CheckNpcAi( uint16 crType )
{
    uint8 retn = 0;
    switch( crType )
    {
    case 5:
        retn = AIPACKET_SCORPION;
        break;
    case 9:
        retn = AIPACKET_GENERIC_DOG;
        break;
    case 11:
        retn = AIPACKET_RAT;
        break;
    case 80:
        retn = AIPACKET_GECKO;
        break;
    case 83:
        retn = AIPACKET_GECKO;
        break;
    case 85:
        retn = AIPACKET_DEATHCLAW;
        break;
    case 113:
        retn = AIPACKET_RAT;
        break;
    case 117:
        retn = AIPACKET_RAT;
        break;
    case 119:
        retn = AIPACKET_SUPER_MUTANT;
        break;
    case 177:
        retn = AIPACKET_FLOATER;
        break;
    case 249:
        retn = AIPACKET_CENTAUR;
        break;
    default:
        retn = 0;
        break;
    }
    return retn;
}


void TeleportNpcToMap( Critter& npc )
{
    // Location @ loc = npc.GetMap().GetLocation();
    // Map @ map = loc.GetMapByIndex(0);
    // npc.TransitToMap(map.Id, 1);
    // Map @ map = GetMapByPid(GetCritInfo(npc.GetMap().GetProtoId(),0,4), 0);
    // npc.TransitToMap(map.Id, 1);
}

/****************************************
/***********************GROUPS***********
/***************************************/

void MobsAutoInit() //export to gameplay.fos
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapEvent( maps[i] );
	}
}

uint e_SpawnMobs( int[]@ values )
{
	Map @ map = GetMap( values[ 0 ] );
	if( !valid( map ) )
	{	
		return 0;
	}
	
	AddCritter( map );

	EraseTimeEvent( map.GetData( MAP_TIME_DATA ) );
	timeNumb = CreateTimeEvent( AFTER( DELAY_FOR_MOBS_RESPAWN ), "e_SpawnMobs", values, true );
	map.SetData( MAP_TIME_DATA, timeNumb );
	return 0;
}

void AddCritter( Map& map )
{
	uint[] max_count = {
		LVAR( LMVAR_CRITTER_RATS ),
		LVAR( LMVAR_CRITTER_MANTISS ),
		LVAR( LMVAR_CRITTER_ANTS ),
		LVAR( LMVAR_CRITTER_ANT_LION ),
		LVAR( LMVAR_CRITTER_PIGRATS ),
		LVAR( LMVAR_CRITTER_GRIZRATS ),
		LVAR( LMVAR_CRITTER_GRISRAT_MUTANT ),
		LVAR( LMVAR_CRITTER_GECKO_SILVER ),
		LVAR( LMVAR_CRITTER_GECKO_GOLD ),
		LVAR( LMVAR_CRITTER_GECKO_CAVE ),
		LVAR( LMVAR_CRITTER_DOGS ),
		LVAR( LMVAR_CRITTER_WOLVES ),
		LVAR( LMVAR_CRITTER_RADSCORPIONS ),
		LVAR( LMVAR_CRITTER_RADSCORPIONS_BLACK ),
		LVAR( LMVAR_CRITTER_YAO ),
		LVAR( LMVAR_CRITTER_CAVESCORPIONS ),
		LVAR( LMVAR_CRITTER_BRAMIN ),
		LVAR( LMVAR_CRITTER_EVILPLANTS ),
		LVAR( LMVAR_CRITTER_ALIENS ),
		LVAR( LMVAR_CRITTER_DEATHCLAWS ),
		LVAR( LMVAR_CRITTER_CROC ),
		LVAR( LMVAR_CRITTER_SHADOW_CROC ),
		LVAR( LMVAR_CRITTER_FIREGECKO ),
		LVAR( LMVAR_CRITTER_BRUTES ),
		LVAR( LMVAR_CRITTER_CENTAURS ),
		LVAR( LMVAR_CRITTER_FLOATERS ),
		LVAR( LMVAR_CRITTER_MURLOCKS ),
		LVAR( LMVAR_CRITTER_GIANT_WASPS ),
		LVAR( LMVAR_CRITTER_GIANT_BEETLES ),
		LVAR( LMVAR_CRITTER_WILD_GHOULS )
	};

	for( uint i = 0; i < max_count.length(); i++ ) {
		uint[] mob_array = Critter_list[i];
		uint16 mobPid = 0;
		Critter@[] mobs;
		
		for( uint j = 0; j < mob_array.length; j ++ ) {
			mobPid = mob_array[j];
			map.GetCritters( mobPid, FIND_LIFE_AND_KO | FIND_ONLY_NPC, mobs );
		}
		
		int delta = max_count[i] - mobs.length();
		//Log("дельта" + delta );
		if( delta == 0 ) { 							// next Cycle
			continue;
		} else if ( delta < 0 ) { 					// delete excess pops
			int overPop = delta * -1;
			//Log("перенаселение: " + overPop );
			for( int l = 0; l < overPop; l++ ) {
				if( mobs[l].IsDead() ) {
					DeleteNpc( mobs[l] );
					overPop --;
				}
			}
			for( int m = 0; m < overPop; m++ ) {
				if( valid( mobs[m] ) ) {
					DeleteNpc( mobs[m] );
				}
			}
		} else { 									//add mobs
			uint8 entireId = MAP_MOB_SPAWNER + i;
			
			int entires = map.CountEntire( entireId );
			int range = 2;
			
			if( entires == 0 ) { 
				continue; 
			} else {
				range += max_count[i] / ( entires * 6 );
				
				uint8  teamId = 24 + i;
				for( int k = 0; k < delta; k++ ) {
					uint16 hexX = 0, hexY = 0, tempX = 0, tempY = 0;
					
					map.GetEntireCoords( entireId, Random( 0, entires - 1 ), hexX, hexY );
					
					tempX = hexX;
					tempY = hexY;

					while( !map.IsHexPassed( tempX, tempY ) ) {
						tempX = hexX + Random( -range, range );
						tempY = hexY + Random( -range, range );
					}
					
					uint16 pid = mob_array[Random ( 0, mob_array.length() - 1 ) ];
					//Log( "Adding pid #" + pid + "." );
					Critter@ npc = map.AddNpc( pid, tempX, tempY, Random( 0, 5 ), null, null, "mob@_MobInit" );
					
					if( npc is null ) {	continue; }
					
					npc.SetHomePos( npc.HexX, npc.HexY, npc.Dir );
					npc.StatBase[ ST_AI_ID ] = CheckNpcAi( npc.CrType );
					npc.StatBase[ ST_TEAM_ID ] = teamId;
				}
			}
		}
	}
}	

//~run local_population _InitMobs 0 0 0 
void _InitMobs(Critter& player, int param0, int param1, int param2)
{
	ForceSpawnMobs();
}

void ForceSpawnMobs()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapEvent( maps[i] );
	}
}

bool CheckMapEvent( Map& map )
{
    for( int n = MAP_MOB_SPAWNER, nend = MAP_MOB_SPAWNER  + MOB_SPAWNER_COUNT; n < nend ; n++ )
	{
		if( map.CountEntire( n ) != 0 ) 
		{
			int[] values = { map.Id };
			map.SetData( MAP_TIME_DATA, CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_SpawnMobs", values, true ) );
			//Log( "mob_spawn_started" );
			return true;
		}
	}
    return false;
}

//=============MAP_LOOT_SPAWN================//

void runitemspawn( Critter& player, int param0, int param1, int param2 )
{
    Map @ map = player.GetMap();
    FillContainer( map );
}

void ChangeBrokeAndAmmo( Item& item )
{
    if( item.IsDeteriorable() )                                         // check for detoirable weapon
    {
        SetDeterioration( item, Random( 30, 90 ) );                     // detoirate weapon to 30-90 percents
        if( item.AmmoCount > 0 )
        {
            item.AmmoCount = 0;
        }
    }
}

uint e_SpawnStuff( uint[] @ values )
{
    Map @ map = GetMap( values[ 0 ] );
    if( !valid( map ) )
        return 0;
    FillContainer( map );
    SpawnLO( map );  //disabled by ErlKing

    EraseTimeEvent( map.GetData( MAP_TIME_DATA ) );
    timeNum = CreateTimeEvent( __FullSecond + RESPAWN_TIME, "e_SpawnStuff", values, false );
    map.SetData( MAP_TIME_DATA, timeNum );
    timeNum = 0;
    return 0;
}

string msg;

void Clean_LO( Map& map )
{
    Item@[] containers;
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );
    if( valid( containers ) && containers.length() != 0 )
    {
        for( uint16 i = 0; i < containers.length(); i++ )
        {
            if( containers[ i ] is null )
                continue;
            if( containers[ i ].GetProtoId() == PID_LO_CONTAINER )
            {
                DeleteItem( containers[ i ] );
                continue;
            }
        }
    }
}

//Отключенные контейнеры, в которых лут не спавнится
uint[] special_container_pids = {
	PID_BAG, PID_BACKPACK, PID_AMMO_BELT,
	PID_SUPER_TOOL_KIT, PID_repkit3i, PID_repkit2i, PID_repkit1i, 
	PID_BRIEFCASE, PID_KEIS, PID_FIRST_AID_KIT, PID_FIELD_MEDIC_KIT, PID_DOCTORS_BAG, PID_PARAMEDICS_BAG, 
	
	PID_HANDWRITINGS, PID_PORTMONE, PID_CRAFT_RECIPES, PID_PASSPORT, PID_LETTER, PID_POSTMAN_LETTER, PID_PAPERS_JAMMED,
	PID_ELRON_FIELD_REP, PID_CLIPBOARD, PID_FLIST08, PID_FLIST09, PID_StrpBlt, PID_mgzn01,
	
	PID_KEY_BUNCH,
};

//Отключенные карты, на которых не спавнится рандомный лут в контейнерах
uint[] disabled_map_pids = {
	18, 19,  									 					//sandbox1_5
	22, 23, 									 					//sandbox2_2
	24, 25, 26, 27, 28, 29, 64, 65, 66, 67, 68,  					//sandbox2_3, sandbox2_3dn+, perfection_ext+
	50, 51, 														//sandbox4_4, sandbox4_4dn - форт с подвалом
	73, 74, 									 					//Лагерь в горах 0_2
	69, 70, 71, 72, 							 					//bos
	103, 104, 105, 106, 											//форт ривердейл
	108, 110, 112, 114, 116, 117, 118, 119, 120, 124, 125,			//подземные карты ривердейла
	127, 129, 131, 132, 134, 136,									//подземные карты ривердейла
	107, 109, 111, 113, 115, 123, 126, 128,  						//наземные карты без руин ривердейла
	151, 153, 155, 157, 159, 172, 174,								//наземные карты северного региона
	185, 186, 187, 188, 189, 190, 191, 192, 193, 					//tanker
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361,	 	//Edd Session
	380, 381, 382, 383 							 				 	//intro
	
};
	
void FillContainer( Map& map )  // filling containers with random items
{
	if( disabled_map_pids.find( map.GetProtoId() ) != -1 )
		return; //Костыльное отключение спауна вещей в контейнерах определённого набора карт.
	
    Item@[] containers;
    uint16 itemPid = 0;
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );
    if( valid( containers ) && containers.length() != 0 )
    {
        Item @ item;
        for( uint16 i = 0; i < containers.length(); i++ )
        {
            Item@[] contBag;

            if( containers[ i ] is null )
				continue;
				
            if( containers[ i ].GetProtoId() == PID_LO_CONTAINER )
            {
                DeleteItem( containers[ i ] );
                continue;
            }
			
			if( special_container_pids.find( containers[ i ].GetProtoId() ) != -1 )
			{
				continue;
			}
			
			if( isFurniture( containers[i] ) )
			{
				//map.SetText( containers[i].HexX, containers[i].HexY, COLOR_RED, "!!!" );
				continue;
			}

            containers[ i ].GetItems( ITEM_ACCESSORY, contBag );
            if( valid( contBag ) && contBag.length() == 0 )
            {
                itemPid = Random( 0, (sutterGroup.length()/3) - 1 );
		if(sutterGroup[itemPid*3]>Random(0,9))
			{
			@item = containers[ i ].AddItem( sutterGroup[ itemPid*3 + 2 ], Random( 1, sutterGroup[ itemPid*3 + 1 ] ), ITEM_ACCESSORY );
	                i += Random( 0, Random( 1, 4 ) );
			}
                if( valid( item ) )	ChangeBrokeAndAmmo( item );
            }
        }
    }
}

//=============MAP_CONTAITER_LOOT_SPAWN================//
const uint16[] sutterGroup =
{
//шанс, макс, пид
	3,	1,	PID_FLARE,
	3,	2,	PID_ROCK,
	10,	50,	PID_REAL_BOTTLE_CAPS,
	1,	1,	PID_KNIFE,
	4,	2,	PID_ROPE,
	10,	9,	PID_CRAFT_L_RAGS,
	10,	2,	PID_FLINT,
	10,	2,	PID_EMPTY_JET,
	10,	2,	PID_BOTTLE_GLASS,
	10,	5,	PID_PART_OF_ROPE,
	7,	1,	PID_TUBE,
	5,	1,	PID_CRAFT_M_STEL,
	1,	1,	PID_BRAHMIN_SKIN,
	4,	1,	PID_CIGARETTES,
	1,	1,	PID_SHOVEL,
	1,	1,	PID_IRON_ROD,
	1,	1,	PID_AXE,
	3,	1,	PID_LIGHTER,
	10,	10,	PID_10mm_LOW,
	7,	10,	PID_044mag_LOW,
	3,	12,	PID_14mm_LOW,
	5,	15,	PID_12g_LOW,
	3,	10,	PID_223_LOW,
	1,	1,	PID_CUENCELL_LOW,
	4,	1,	PID_IRON_PROD,
	8,	1,	PID_WOOD_PLANK,
	5,	1,	PID_WATER_TUBE,
	5,	1,	PID_CHAIN,
	3,	1,	PID_IRON_PLATE,
	2,	1,	PID_IRON_DETALS,
	5,	1,	PID_PB_PLATE,
	5,	2,	PID_PB_FOR_AMMO,
	8,	1,	PID_PERED_MEH,
	5,	1,	PID_SOED_MEH,
	4,	1,	PID_OHLAD_MEH,
	8,	1,	PID_DETAL_MEH,
	1,	1,	PID_EMKOCT_MEH,
	4,	1,	PID_HLAM_MEH,
	7,	1,	PID_HLAM2_MEH,
	9,	1,	PID_BANKA_MEH,
	4,	1,	PID_SPIKE_MEH,
	3,	1,	PID_ELECTO_MEH,
	3,	1,	PID_CRAFT_L_HIDE,
	1,	1,	PID_MAG_LENTA,
	1,	1,	PID_DVIGAT_MEH,
	1,	1,	PID_METAL_LIST_MEH,
	1,	1,	PID_HYPODERMIC_NEEDLE,
};

void additemsrndpic( Critter& cr, int id, int x, int y )
{
    Map @ map = cr.GetMap();
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "map" );
        return;
    }

    for( uint8 i = 0; i < x; ++i )
    {
        Item @ item = map.AddItem( cr.HexX + ( Random( -10, 10 ) ), cr.HexY + ( Random( -10, 10 ) ), 2004, 1 );
        if( item is null )
            continue;
        uint hash = GetStrHash( "art\\scenery\\corpse1.png" );


        item.SetMapPic( hash );

        cr.Say( SAY_NETMSG, "add " + hash );
    }

}

void setpic( Critter& cr, int id, int x, int y )
{
    Item @ item = GetItem( id );
    if( item is null )
        return;
    string temp = "art\\scenery\\";
    temp += "boxes3.frm";
    item.SetMapPic( GetLOHash( GROUP_TRASH ) );
    item.Update();
}

void itemrndpic( Critter& cr, int id, int x, int y )
{
    CLO @ clo = CLO( GROUP_TRASH, 100, false );
    Map @ map = cr.GetMap();
    if( clo is null )
    {
        cr.Say( SAY_NETMSG, "clo null" );
    }
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "map null" );
    }

    string msg_ = "fail.";

    if( clo.Add( map ) )
    {
        msg_ = ( "succesfull " + clo.HexX + ":" + clo.HexY + "\n clo : " + clo.Hash );

        if( !cr.TransitToHex( clo.HexX, clo.HexY, 1 ) )
        {
            ShowContainer( cr, clo.Object, 0 );
        }
    }

    cr.Say( SAY_NETMSG, msg_ );
}
void forcespawn( Critter& cr, int id, int x, int y )
{
    Map @ map = ( id <= 0 ? cr.GetMap() : GetMap( id ) );
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "null map" );
        return;
    }
    if( x > 0 )
    {
        FillContainer( map );
    }
    SpawnLO( map );
}


bool SpawnLO( Map& map )
{
    uint[] groups = getAvailableGroups( map );
	uint maxGroup = groups.length() - 1;
	
	if( groups.length() == 0 )
	{
		//Log( "No available groups in the map #" + map.Id + " PID " + map.GetProtoId() );
		return false;
	}

	int rechLvl = MAX_RECH_LEVEL;
    for( uint16 i = 0; i < MAX_LO_COUNT; ++i )
    {
        uint8 temp = Random( 1, 99 );
        rechLvl -= temp;
        if( rechLvl <= 0 )
			break;
		
		CLO @ clo = CLO( groups[ Random( 0, maxGroup ) ], 100, true );

		if( !valid( clo ) || !valid( clo.Group ) )
		{
			Log( "!valid CLO or clo.Group" );
			continue;
		}

		clo.Add( map );
    }
	
    return true;
}

import void PlayerLooting( Critter& player, Map& map ) from "test";

bool GatherItemCell( Critter& player, uint mapId )
{
	Map @ map = GetMap( mapId );
	if( valid( map ) ) 
	{
		PlayerLooting( player, map );
		return true;
	}
	return false;
}

bool SpawnItemCell( uint mapId )
{
    Map @ map = GetMap( mapId );
    if( !(map is null) )
    {
		uint style = 0;
		GameVar@ styleVar = GetGlobalVar( GVAR_LootingStyle );
		if( valid(styleVar) )
			style = styleVar.GetValue();
		
		int[] values = { mapId, 0 };
		
		switch( style )
		{
			case(0): //default
				FillContainer( map );
				
				CreateTimeEvent( AFTER( 0 ), "e_SpawnLO", values, true );
				break;
			case(1): //only static
				FillContainer( map );
				break;
			case(2):// only dynamic
				CreateTimeEvent( AFTER( 0 ), "e_SpawnLO", values, true );
				break;
			default: Log( "Some crasy shit happened." );
		}
		//DebugLog( "Loot spawned at " + mapId + " with settings at " + style + "." );
        return true;
    }

    return false;
}

uint e_SpawnLO( int[] @ values )
{
	if( !valid(values) || values.length() != 2 )
		return 0;
	
	Map @ map = GetMap( values[ 0 ] );
	if( !valid( map ) )
		return 0;
	
	switch( values[1] )
	{
		case(0): Clean_LO( map ); break;
		case(1): SpawnLO( map ); break;
		default: return 0;
	}

	values[1]++;
	return REAL_SECOND(5);
}

#endif // LOCAL_POPULATION