// Author: Anuri

#include "_utils.fos"
#include "_ltp.fos"
#include "STAT_MODS_H.fos"

import bool checkTiredness( Critter& cr, int max, int add ) from "fix_boy";
import void ProccessDrink( Critter& cr, Critter& target, Item& item ) from "food";
import void Cleaning( Critter& player, uint soap_pid, int water_source ) from "main";

#define STATE 						Val0
#define MAX_CHARGE 					Val1
#define REMAINING_CHARGE			Val2
#define EVENT 						Val3
#define BREAK						Val4
#define BUCKET_POSITION				Val6

#define WATER_FILL_TIME 			REAL_HOUR( Random( 1, 3 ) )

#define REMAINING_USES				Val0
#define DNA							Val1
#define EXTRA_WEIGHT				Val2

#define MAP_TIME_DATA   			( 1 )

const string[] WellReelSounds = { "wellReel1.ogg", "wellReel2.ogg" };

// Интерактивное меню ку3, точка входа main.fos
class MenuWell: CenteredMenuHandler {
    uint well_id;
    uint map_id;
	
    MenuWell(Item& well, Map& map) {
        well_id = well.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
		
        Map@ map = GetMap( map_id );
        Item@ well = GetItem( well_id );
		
		if( map is null || well is null ) {
            return false;
        }

		Item@ bucket = well.GetItem( PID_EMPTY_BUCKET, 0 );
		Item@ bucket2 = well.GetItem( PID_WATER_BUCKET, 0 );
		Item@ chain = well.GetItem( PID_CHAIN, 0 );
		
		if( ( valid( bucket ) || valid( bucket2 ) || well.BUCKET_POSITION > 0 ) && valid( chain ) ) 
		{ 
			@ bucket = valid( bucket) ? bucket : bucket2;
			if( well.BUCKET_POSITION == 0 ) {
				if( menu.Button( "Опустить ведро" ) ) {
					well.BUCKET_POSITION = CLAMP( ( 10 - well.REMAINING_CHARGE / 100 ), 1, 10);
					well.REMAINING_CHARGE += bucket.REMAINING_USES;
					
					if( well.REMAINING_CHARGE > well.MAX_CHARGE ) {
						well.REMAINING_CHARGE = well.MAX_CHARGE;
					}
					
					DeleteItem( bucket );
					PlayChainSound( map, well );
					return true;
				}
			} else {
				if( menu.Button( "Поднять ведро" ) ) {
					start_waterwell( cr, well );
					return false;
				}
			}
		}
		if( well.BUCKET_POSITION == 0 ) {
			if( menu.Button( "Осмотреть колодец" ) ) {
				ShowContainer( cr, well, TRANSFER_HEX_CONT_UP );
				return false;
			}
		}
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
		Item@ well = GetItem(well_id);
		string info;
		string chargeInfo;
		string bucketInfo;
		string chainInfo;
		string bucketPos;
		string positionDisc;
		
		if( ( valid( well.GetItem( PID_EMPTY_BUCKET, 0 ) ) || valid(well.GetItem( PID_WATER_BUCKET, 0 ) ) || well.BUCKET_POSITION != 0 ) ) {
			
			well.BUCKET_POSITION > 0 ? bucketInfo = "\nВедро спущено." : bucketInfo = "\nВедро на месте.";
		} else {
			bucketInfo = "\nВедра нет!";
		}

		if( valid( well.GetItem( PID_CHAIN, 0 ) ) ) {
			
		chainInfo =	"\nЦепь на месте.";
		} else {
			chainInfo = "\nВедро не чем привязать.";
		}
		
		well.REMAINING_CHARGE >= 700 ? chargeInfo = "отчетливо видна." : well.REMAINING_CHARGE <= 3 ? chargeInfo = "не видна." : chargeInfo = "поблескивает в глубине.";
		
		if( well.BUCKET_POSITION != 0 ) {
			
			well.BUCKET_POSITION >= 7 ? positionDisc = "почти полностью размотана." : well.BUCKET_POSITION <= 3 ? positionDisc = "практически не размотана." : positionDisc = "размотана на половину.";
			
			bucketPos = "\nЦепь " + positionDisc;
		}
		
		info += "Вода " + chargeInfo;
		info += "\n " + bucketInfo;
		info += "\n " + chainInfo;
		info += "\n " + bucketPos;
        return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
	
    void OnMenuDraw(Critter& cr) {
        cr.Say(SAY_NETMSG, DebugMenu(cr));
    }
}

// точка входа из main.fos при юзе рукой
void StartMenuWell( Critter& cr, Item& well) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuWell(well, map);
    iDialogBox@ menu = OpenMenu( cr, "Колодец", handler );
}

void PlayChainSound( Map& map, Item & well ) {
	map.PlaySound( "wellChain.ogg", well.HexX, well.HexY, 5 );
	uint[] values = {well.Id, map.Id};
	CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_Splash", values, false );
}

uint e_Splash( uint[]@ values ) {
	
	int itemId = values[0];
	Item@ well = GetItem( itemId );
	int mapId = values[1];
	Map@ map = GetMap( mapId );
	map.PlaySound( "BucketSplash.ogg", well.HexX, well.HexY, 5 );
	return 0;
}

// LongTimeProcess
bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_WATERWELL, process_waterwell )
	ltp_inited = true;
}

bool start_waterwell( Critter& cr, Item& well )
{
	if(!ltp_inited) { 
		ltp_init();
	}
	
	Map@ map = cr.GetMap();		
	
	if( valid( well ) ) {
		
		StartProcess( cr, LTP_WATERWELL, 0, 0, well.Id, 0 );
		return true;
	}
	return false;
}

uint process_waterwell( Critter@ cr, int& param0, int& param1, int& param2 )
{
 	LTPROCESS( cr, param0, LTP_WATERWELL )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	Item@ well = GetItem( param2 );
	Map@ map = cr.GetMap();
	
  	if( valid( well ) && valid( map ) ) {
		
		_CritAnimateUse(cr);
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 ) { 
			cr.Say( SAY_EMOTE, "Крутит бабину" );
		}
		
		param0++;
		
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "e_TiredenessTimeout", cr.Id, true);
		
		well.BUCKET_POSITION --; 
		
		map.PlaySound( WellReelSounds[ Random( 0, WellReelSounds.length() -1 ) ], well.HexX, well.HexY, 5 );
		
		if ( well.BUCKET_POSITION != 0 ) {

			return action_pause;
		
		} else if( well.BUCKET_POSITION < 0 ) {
			
			well.BUCKET_POSITION = 0;
			uint[] values = {well.Id, map.Id};
			CreateTimeEvent( AFTER( REAL_SECOND( 3 ) ), "e_Splash", values, false );
			cr.Say( SAY_NETMSG, "|0xFFFF00 Ведро сорвалось и улетело вниз..." );
			return 0;
			
		} else {
			
			if( well.REMAINING_CHARGE > 0 ) {
				Item@ fullBucket = well.AddItem( PID_WATER_BUCKET, 1, 0 );
			
				if( well.REMAINING_CHARGE < fullBucket.Proto.Partial_Item ) {
					fullBucket.REMAINING_USES = well.REMAINING_CHARGE;
					well.REMAINING_CHARGE = 0;
				} else {
					fullBucket.REMAINING_USES = fullBucket.Proto.Partial_Item;
					well.REMAINING_CHARGE -= fullBucket.Proto.Partial_Item;
				}
				
				fullBucket.EXTRA_WEIGHT = fullBucket.REMAINING_USES * 100;
				fullBucket.DNA = PID_GLASS_BOTTLE_DIRTY_FULL_PRT;
				fullBucket.Update();
				
			} else {
				well.AddItem( PID_EMPTY_BUCKET, 1, 0 );
			}
			
			map.SetText( well.HexX, well.HexY, COLOR_LGRAY, ":ведро показалось:" );
		}			
	}
	return 0;
}

void WellsAutoInit() //export to gameplay.fos
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapWellEvent( maps[i] );
	}
}

//~run waterworks _WellsInit 0 0 0
void _WellsInit(Critter& player, int param0, int param1, int param2)
{
	FoceWellsCharge();
}

//import void FoceWellsCharge() from "waterworks";
void FoceWellsCharge()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapWellEvent( maps[i] );
	}
}

bool CheckMapWellEvent( Map& map )
{
	Item@[] activeWells;
	for( int i = 0, iend = Wells.length(); i < iend; i++ ) {
		map.GetItems( Wells[i], activeWells );
	}
	
	if( activeWells.length != 0 ) {
		
		for( int i = 0, iend = activeWells.length(); i < iend; i++ ) {
			Item@ well = activeWells[i];
			
			if( !valid( well ) ) { return false; }
			
			uint[] values = { well.Id };
			well.EVENT = CreateTimeEvent( AFTER( WATER_FILL_TIME ), "e_WellCharge", values, true );
			values.resize(0);
		}
	}

	activeWells.resize(0);
    return false;
} 

uint e_WellCharge( uint[] @ values ) 
{
	Item@ well = GetItem( values[ 0 ] );
	if( !valid( well ) ) { return 0; }
	
	Map@ map = GetMap( well.MapId );
	if( !valid( map ) ) { return 0; }
	
	well.REMAINING_CHARGE += CLAMP( Random( 50, 150 ), 0, well.MAX_CHARGE );
	if( well.REMAINING_CHARGE > well.MAX_CHARGE ) {
		well.REMAINING_CHARGE = well.MAX_CHARGE;
	}
		return WATER_FILL_TIME;
}