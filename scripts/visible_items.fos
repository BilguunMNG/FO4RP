/*********Менеджер видимых предметов**************/
#include "_utils.fos"

dictionary visible_items;

string formatCords( ItemCl& item ) { return formatCords( item.HexX, item.HexY ); }
string formatCords( uint hexX, uint hexY ) { return "[" + hexX + "-" + hexY + "]"; }

string VI_name( ItemCl& item ) { return "#" + item.Id + " " + formatCords( item ) + " " + __mapID; }

ItemCl@ getItemByFullName( string fullname )//deprecated by: ItemCl@ VI_get( string name )
{
	string@[] data;
	data = split( fullname, " " );
	
	int id = 0;
	if( !StrToInt( data[0], id ) )
		return null;
	
	return id == 0 ? null : GetItem( id );
}

uint VI_count() { return visible_items.keys(null); }

string VI_enlist() 
{ 
	string@[] keys;
	visible_items.keys( keys );
	return enlistSTR( keys );
}

string@[] VI_getAll() 
{ 
	string@[] keys;
	visible_items.keys( keys );
	return keys;
}

bool VI_exists( ItemCl@ item )
{
	if( !valid( item ) ) return false;
	return VI_exists( VI_name( item ) );
}
bool VI_exists( string name ) { return visible_items.exists( name ); }

ItemCl@ VI_get( string name ) 
{ 
	ItemCl@ result = null;
	visible_items.get( name, @result );
	return result;
}

//TODO: string[]@ querry&find(string key)
ItemCl@ VI_get( uint hexX, uint hexY ) { return VI_get( hexX, hexY, 0 ); }
ItemCl@ VI_get( uint hexX, uint hexY, uint offset )
{
	string[] result = VI_HEX( hexX, hexY );
	
	if( offset >= result.length() )
		return null;
	
	return VI_get( result[offset] );
}

string[] VI_HEX( ItemCl@ item )
{
	string[] empty;
	return valid( item ) ? VI_HEX( item.HexX, item.HexY ) : empty;
}
string[] VI_HEX( uint hexX, uint hexY )
{
	string[] result;
	string@[] items = VI_getAll();
	if( !valid( items ) ) return result;

	string cords = formatCords( hexX, hexY );
	for( uint i = 0, l = items.length(); i < l; i++ )
		if( findFirst( items[i], cords ) != -1 )
			result.insertLast( items[i] );
		
	return result;
}

bool VI_update( ItemCl@ itemBefore, ItemCl@ itemNow ) 
{
	if( !valid( itemBefore ) || !valid( itemNow ) ) return false;
	VI_delete( VI_name( itemBefore ) );
	VI_set( itemNow );
	return true;
}	
	
bool VI_set( ItemCl@ item )
{
	if( !valid( item ) ) return false;
	visible_items.set( VI_name( item ), @item );
	return true;
}

bool VI_delete( ItemCl@ item )
{
	if( !valid( item ) ) return false;
	return VI_delete( VI_name( item ) );
}
bool VI_delete( string name )
{
	if( !VI_exists( name ) ) return false;
	
	visible_items.delete( name );
	return true;
}

void VI_refresh()
{
	string@[] items = VI_getAll();
	if( !valid( items ) ) return;
	
	for( uint i = 0, l = items.length(); i < l; i++ )
	{
		string@[] data;
		data = split( items[i], " " );
		
		int id = 0;
		if( data.length() != 3 || !StrToInt( data[2], id ) )
			continue;
		
		if( id == 0 || id != int( __mapID ) )
			VI_delete( items[i] );
	}
}