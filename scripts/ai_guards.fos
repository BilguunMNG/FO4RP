#ifndef AI_GUARDS
#define AI_GUARDS

#include "_utils.fos"
#include "npc_planes_h.fos"

void GM_GuardsInit( Critter& npc ) // Export
{
    npc.SetScript( "_AiGuardsInit" );
}

void _AiGuardsInit( Critter& npc, bool firstTime )
{
	npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER,	"_CritterLookAt" );
	npc.SetEvent( CRITTER_EVENT_HIDE_CRITTER,	"_CritterOutOfSight" );
    npc.SetEvent( CRITTER_EVENT_IDLE,			"_Idle" );
    npc.SetEvent( CRITTER_EVENT_PLANE_BEGIN,	"_PlaneBegin" );
	npc.SetEvent( CRITTER_EVENT_PLANE_END,		"_PlaneEnd" );
    npc.SetEvent( CRITTER_EVENT_DEAD,			"_MyDeath" );
    npc.SetEvent( CRITTER_EVENT_ATTACKED,		"_Attacked" );
}

void _CritterLookAt( Critter& npc, Critter& target )
{
	uint16 hx = npc.HexX, hy = npc.HexY;
	uint16 tx = target.HexX, ty = target.HexY;
	uint dir = GetDirection( hx, hy, tx, ty );
	npc.SetDir( dir );
	if( npc.CheckEnemyInStack( target.Id ) ) {
		if( target.IsDead() ) { 
			npc.EraseEnemyFromStack( target.Id );
			return;
		}
		AddAttackPlane( npc, 0, target );
		return;
	}
}

void _CritterOutOfSight( Critter& npc, Critter& target )
{
	if( npc.CheckEnemyInStack( target.Id ) ) {
		npc.DropPlanes();
		uint16 hx = npc.HexX, hy = npc.HexY;
		uint16 tx = target.HexX, ty = target.HexY;
		uint dir = GetDirection( hx, hy, tx, ty );
		if( npc.IsSee( target ) ) {
			if( target.IsDead() ) { 
				npc.EraseEnemyFromStack( target.Id );
				return;
			}
			npc.AddEnemyInStack( target.Id );
			AddAttackPlane( npc, 0, target );
		} else {
			AddWalkPlane( npc, AI_PLANE_ATTACK_PRIORITY - 1, target.HexX, target.HexY, dir, true, 1 );
		}
	}
}

void _Idle( Critter& npc )
{
	if( npc.IsPlayer() ) {
		npc.SetEvent( CRITTER_EVENT_IDLE, null );
		return;
	}

	if( npc.IsDead() || npc.IsKnockout() ) {
		return;
	}

	if( npc.IsBusy() || !npc.IsNoPlanes() ) {
		return;
	}
}

int _PlaneBegin( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( plane.Type == AI_PLANE_ATTACK ) {
        Critter@ target = GetCritter( plane.Attack_TargId );
        if( !valid( target ) ) {
			return PLANE_RUN_GLOBAL;
		}

        if( target.Stat[ ST_TEAM_ID ] == npc.Stat[ ST_TEAM_ID ] ) {
			return PLANE_DISCARD; 
		}

     } else if ( reason == REASON_FROM_SCRIPT ) {
		return PLANE_KEEP;
	}
    return PLANE_RUN_GLOBAL;
}

int _PlaneEnd( Critter& npc, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem ) {
	return PLANE_RUN_GLOBAL;
}

void _MyDeath( Critter& npc, Critter@ killer ) 
{
    npc.ClearEnemyStack();
}

bool _Attacked( Critter& npc, Critter& target )
{
	if( int( target.Id ) == npc.StatBase [ST_FOLLOW_CRIT] ) {
        npc.EraseEnemyFromStack( target.Id );
        EraseAttackPlane( npc, target );
		return true;
	}
	npc.AddEnemyInStack( target.Id );
	AddAttackPlane( npc, 0, target );
    return true;
}

#endif //AI_GUARDS