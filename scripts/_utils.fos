#include "_macros.fos"
///Ётот модуль содержит в себе базовый функционал, используемый во всех остальных модул€х. —читай, macros mk2.

#include "_colors.fos"
#include "_msgstr.fos"

#ifdef __SERVER

	import uint GetAllPlayers( Critter@[]& crs ) from "manager";
	
	import bool isGM( Critter& player ) from "gm";
	import void DIALOG_MENU( Critter& cr, string[] data ) from "gm";

	#ifndef DEBUG_MODULE
		import bool isDebugging() from "debug";
		import bool isDebugging( int level ) from "debug";
		
		import void DebugLog( string text ) from "debug";
		import void DebugLog( string text, int level ) from "debug";
	#endif

	int SNEAK_TIMEOUT( Critter@ cr )
	{
		if( !valid( cr ) ) return 0;
		
		return __FullSecond + REAL_SECOND( MAX( 34 - cr.Stat[ ST_SEQUENCE ], 3 ) );
	}
	
	void setTimeout( Critter@ cr, uint id, int value )
	{
		if( !valid( cr ) ) return;
		if( cr.Timeout[ id ] < int( REAL_SECOND(value) ) )
			cr.TimeoutBase[ id ] = __FullSecond + REAL_SECOND(value);
	}
	
	bool Find( Critter@& link, int id )
	{
		if( id == 0 ) return false;
		@link = GetCritter( uint( id ) );	
		return valid( link );
	}

	bool Warning( string text, bool result = false )
	{
		Log( text );
		return result;
	}

	bool inform( Critter& cr, string text )
	{
		return testInfo( cr, text, SAY_NETMSG, true, true );
	}

	bool inform( Critter& cr, Critter@ target, string text, bool show = false )
	{
		if( !isDebugging(1) ) return false;
		
		testInfo( cr, text );
		if( valid( target ) )
			testInfo( target, text );
		
		return true;
	}

	bool testInfo( Critter& cr, string text, uint8 saytype = 11 /*SAY_NETMSG*/, bool result = false, bool show = false )
	{
		if( show || cr.Param[ QST_GAMEMODE ] == GAME_TEST )
			cr.Say( saytype, text );
		
		return result;
	}

	string genderEnding( Critter& cr )
	{
		switch( cr.Stat[ ST_GENDER ] )
		{
			case(0): return ""; //он
			case(1): return "а"; //онј
			case(2): return "о"; //онќ
		}
		
		return "";
	}

	string itemInfo( Item@ item )
	{
		if( !valid( item ) )
			return "[пусто]";
		
		return "[" + item.GetProtoId() + ":" + item.GetCount() + "]";
	}

	//‘ормат: "[pid:count], [pid:count]"
	string enlist( Item@[] list )
	{
		if( !valid( list ) ) return "[null]";

		uint len = list.length();
		if( len == 0 ) return "[empty]";
		
		string result = itemInfo( list[0] );
		for( uint i = 1; i < len; i++ )
			result += ", " + itemInfo( list[i] );
		
		return result;
	}

	//‘ормат: "[ 1, 2, 3 ]"
	string enlist( int[]@ list )
	{
		if( !valid( list ) ) return "[null]";
		
		uint len = list.length();
		if( len == 0 ) return "[empty]";
		
		string result = "[ " + list[0];
		for( uint i = 1; i < len; i++ )
			result += ", " + list[i];
		
		return result + " ]";
	}

	//‘ормат: "1, 2, 3"
	string enlist( uint[]@ list )
	{ 
		if( !valid( list ) ) return "[null]";

		uint len = list.length();
		if( len == 0 ) return "[empty]";
		
		string result = list[0];
		for( uint i = 1; i < len; i++ )
			result += ", " + list[i];
		
		return result;
	}
	
	Item@[] getItemsAround( Item& target )
	{
		Item@[] empty_result; //Костыль, т.к. нет нормального преобразования типов из null.

		Map@ map = GetMap( target.MapId );
		if( !valid( map ) && Warning( "Can't find items around item #" + target.Id + ", as it's at the global map.", true ) ) return empty_result;
		return getItemsAround( map, target.HexX, target.HexY );

	}
	
	Item@[] getItemsAround( Critter& target )
	{
		Item@[] empty_result; //Костыль, т.к. нет нормального преобразования типов из null.

		Map@ map = target.GetMap( );
		if( !valid( map ) && Warning( "Can't find items around critter #" + target.Id + ", as it's at the global map.", true ) ) return empty_result;
		return getItemsAround( map, target.HexX, target.HexY );
	}

	Item@[] getItemsAround( Map& map, uint16 x, uint16 y ) //TODO: range arg
	{
		Item@[] result;
		
		for( uint i = 0; i < 6; i++ )
		{
			uint16 tx = x, ty = y;
			map.MoveHexByDir( tx, ty, i, 1 );
			map.GetItems( tx, ty, result );
		}
		map.GetItems( x, y, result );
		
		return result;
	}	

#endif