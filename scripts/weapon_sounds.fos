#ifndef WEAPON_SOUNDS
#define WEAPON_SOUNDS

class WeaponSound
{
	uint sound_Id;
	string windup; 
	string single; 	// single
	string burst;  	// burst
	string reload; 	// reload
	string extra;  	// extra
	string blank;
	
	WeaponSound( uint sound_Id, string windup, string single, string burst, string reload, string extra, string blank )
	{
        this.sound_Id = sound_Id;
		this.windup = windup;
		this.single = single;
		this.burst = burst;
		this.reload = reload;
		this.extra = extra;
		this.blank = blank;
	}
}	

class WeaponSoundCollection
{
	WeaponSound@[] weaponSounds;
	WeaponSoundCollection() {
	}

	WeaponSoundCollection@ sound( uint sound_Id, string windup, string single, string burst, string reload, string extra, string blank )
	{
		this.weaponSounds.insertLast( WeaponSound( sound_Id, windup, single, burst, reload, extra, blank ) );
		return this;
	}
	
	WeaponSound@ get_by_soundId( uint soundId ) {
		for( uint i = 0, len = this.weaponSounds.length(); i < len; i++ ) {
			if( this.weaponSounds[i].sound_Id == soundId ) {
				Message("звук передан");
				return this.weaponSounds[i];
			}
		}
		return null;
	}
}

WeaponSoundCollection@ weaponSounds = WeaponSoundCollection()
	//	sound_Id, 		windup, 			single, 				burst, 			reload, 	     	extra, 	   				blank
	.sound( 68, "10mmSMG_windup.mp3", "10mmSMG_single.mp3", "10mmSMG_burst.mp3", "10mmSMP_Reload.mp3", "10mmSMG_single.mp3", "10mmSMG_blank.mp3" )
	;

//get for client
WeaponSound@ GetWeaponSound( const ProtoItem@ proto )
{
	uint soundId = proto.SoundId;
    return weaponSounds.get_by_soundId( soundId );
}

//get for server
WeaponSound@ GetWeaponSound( uint16 pid )
{
	ProtoItem@ proto = GetProtoItem( pid );
	uint soundId = proto.SoundId;
    return weaponSounds.get_by_soundId( soundId );
}

#endif // WEAPON_SOUNDS