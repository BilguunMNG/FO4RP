// Author: Anuri

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "critter_skills_h.fos"
#include "entire_h.fos"

import int  GetDeteriorationProcent( Item& item ) from "repair";
import void SetDeterioration( Item& item, int deteriorationProcent ) from "repair";

const string[] JunkSounds = {"junk1.ogg", "junk2.ogg", "junk3.ogg", "junk4.ogg", "junk5.ogg", "junk6.ogg", "junk7.ogg", "junk8.ogg"};

//=============JUNK_PROPERTIES=============//
#define	RESOURCE_CAPACITY			Val1 		// тут записано макс кол-во подходов. Используется как текущее.
#define EVENT 						Val3 		// валка для записи тайм-ивента 

#define MAP_TIME_DATA   			( 1 )

const uint16[] tools = { PID_CROWBAR, PID_SHOVEL, PID_IRON_PROD, PID_MULTI_TOOL };
const uint16[] JunkPileArtList = { 2116, 2117, 2118, 2252, 2253, 2254, 2255, 2256, 2275, 2276, 2311, 2314, 2315, 8095, 8096, 8098, 8099, 16584, 16585, 16586, 16687, 16590, 16591 };
const uint16[] lootList = { PID_CRAFT_L_LINT, PID_CRAFT_M_JUNK, PID_HLAM_MEH, PID_HLAM2_MEH, PID_BANKA_MEH, PID_METAL_LIST_MEH, PID_WATER_TUBE, PID_IRON_ROD, PID_BOTTLE_GLASS, PID_EMPTY_JET, PID_MPARTS, PID_NAILS, PID_PART_OF_ROPE,
							PID_SPIKE_MEH, PID_BOLT, PID_CRAFT_L_RAGS, PID_TUBE, PID_CRAFT_M_BARS };

// LTP (long time process)
bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_SCAVENGING, process_scavenging )
	ltp_inited = true;
}
//exported to main.fos - checks before start
bool PrepareScavenging( Critter& cr, Item@ tool, Item@ target ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) { return false; }
	if( !valid( tool ) || !valid(target) ) { return false; }
   	
	uint toolPid = tool.GetProtoId();
	if( tools.find( toolPid ) == -1 ) { return false; }
	
	uint targetPid = target.GetProtoId();
	if( targetPid != PID_JUNK_SALVAGE )	{ return false; }
	
	if( tool.CritSlot != SLOT_HAND1 ) { cr.Say( SAY_NETMSG, "|0xFFFF00 Возьмите инструмент в руку." ); return false; }

	if( IsTired( cr ) ) { return false; }
	if( IsWounded( cr ) ) { return false; }

	start_scavenging( cr, tool, target );
	return true;
}

bool start_scavenging( Critter& cr, Item& tool, Item& target )
{
	if(!ltp_inited) 
		ltp_init();

	if( valid( tool ) && valid( target ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		uint[] values = { cr.Id, tool.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ScavengingSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		StartProcess( cr, LTP_SCAVENGING, 0, tool.Id, target.Id, action_pause );
		return true;
	}
	return false;
}

uint process_scavenging( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SCAVENGING )
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
    Item@ tool = GetItem( param1 );
  	Item@ target = GetItem( param2 );
  	if( valid( tool ) && valid( target ) )
    {
      	param0++;
		Item@ tool = cr.GetItem( 0, SLOT_HAND1 );
		if( valid( tool ) )
		{
			uint object_dpa = ( cr.Skill[SK_SCAVENGING] ) + ( cr.Stat[ST_STRENGTH] * 10 ) + OBJECT_DPA_BASE; 
			int sequence_length = ceil( float( OBJECT_HP_BASE / ( CLAMP( object_dpa, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );

			if( param0 > sequence_length )
			{
				Profit( cr, tool, target );
				int skillNum = SK_SCAVENGING;
				Accident( cr, skillNum );
			}
			else
			{
				uint toolPid = tool.GetProtoId();
				switch( toolPid ){
					case( PID_MULTI_TOOL ):
						_CritAnimateUse(cr);
						break;
					default:
						_CritAnimateSwing(cr);
						break;
				}
				uint[] values = { cr.Id, tool.Id };
				CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ScavengingSound", values, true);
			}

			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
			return action_pause;
		}
    }
	return 0;
}

uint e_ScavengingSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	map.PlaySound( JunkSounds[ Random( 0, JunkSounds.length() -1 ) ], cr.HexX, cr.HexY, 5 );
	return 0;
}

//Loot
bool Profit(  Critter& cr, Item@ tool, Item@ target )
{
	int amount = 0;
	uint toolMod = tool.GetProtoId();
	switch( toolMod )
	{	
		case( PID_IRON_PROD ):
		case( PID_SHOVEL ):
			amount--;
			break;
		case( PID_MULTI_TOOL ):
			amount++;
			break;
	}
	
	uint lootRoll = ( Random( 0, 2 ) + ( cr.ParamBase[ SK_SCAVENGING ] / 50 ) );
	amount+= lootRoll;
	if( amount < 1 ) {
		cr.Say( SAY_NETMSG, "|0xFFFF00 Вы не добыли ничего полезного." );
	
	} else {
		
		int skillNum = SK_SCAVENGING;
		raiseSkill( cr, skillNum );
		
		string inform = "Вы добыли: \n";
		if( Random( 0, 1 ) == 1 ) {
			cr.AddItem( PID_CRAFT_M_JUNK, 1 );
			inform += "- ";
			inform += "|0xFFFF00 " + _GetProtoName( PID_CRAFT_M_JUNK );
			inform += "|0x3CF800 ;\n";
		}
		
		for( int i = 0; i < amount; i++ ) {
			ProtoItem@ loot = GetProtoItem(  lootList[ Random( 0, lootList.length() - 1 ) ] );
			cr.AddItem( loot.ProtoId, 1 );
			uint lootPid = loot.ProtoId;
			inform += "- ";
			inform += "|0xFFFF00 " + _GetProtoName( lootPid );
			inform += "|0x3CF800 ;\n";
		}
	
		inform[ inform.length() - 2 ] = '.';
		inform[ inform.length() - 1 ] = ' ';
		cr.Say( SAY_NETMSG, inform );
		
		cr.StatBase[ST_EXPERIENCE] += 25;
		
		DeleteItem( target );	
	}
	return true;
}
//===============JUNK_SPAWNER_MECHANIC===============//

void JunkAutoInit() //export to gameplay.fos
{    
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapEvent( maps[i] );
	}
}

uint e_SpawnJunk( int[] @ values )
{
	Map @ map = GetMap( values[ 0 ] );
	if( !valid( map ) ) { return 0; }
	
	SpawnJunk( map );

	EraseTimeEvent( map.GetData( MAP_TIME_DATA ) );
	map.SetData( MAP_TIME_DATA, CreateTimeEvent( AFTER( DELAY_FOR_HARVESTABLE_LOOT_RESPAWN ), "e_SpawnJunk", values, true ) );
	return 0;
}

bool SpawnJunk( Map& map )
{
	int entireId = JUNK_ENTIRE;
	int entires = map.CountEntire( entireId );

	uint16 hx=0, hy=0;
	for( int j = 0; j < entires; j++ )
	{
		map.GetEntireCoords( entireId, j, hx, hy );
		if( map.IsHexPassed( hx, hy ) && Random( 0, 2 ) == 2 )
		{	
			Item@ JunkSalvage = map.AddItem( hx, hy, PID_JUNK_SALVAGE, 1 );
			ProtoItem@ proto = GetProtoItem(  JunkPileArtList [ Random( 0, JunkPileArtList.length() - 1 ) ] );
			JunkSalvage.PicMap = proto.PicMap;
			JunkSalvage.Update();
		}
	}
	return true;
}

//Forced Spawn
void _JunkInit(Critter& player, int param0, int param1, int param2)
{
	FoceSpawnJunk();
}

//import void FoceSpawnJunk() from "scavenging";
void FoceSpawnJunk()
{
    Map@[] maps;
    for( int i = 0, iend = GetAllMaps( 0, maps ); i < iend; i++)
	{   
		CheckMapEvent( maps[i] );
	}
}

bool CheckMapEvent( Map& map )
{
    int n = JUNK_ENTIRE;
	if( map.CountEntire( n ) != 0 ) 
	{
		int[] values = {map.Id};
        map.SetData( MAP_TIME_DATA, CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_SpawnJunk", values, true ) );
		//Log("junk_event_started");
        return true;
    } 
    return false;
} 