#ifndef TIME
#define TIME
// Some stuff for work with time.

// import uint GetNearFullSecond(uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second) from "time";
// Result is greather than __FullSecond at least on one.

// For client:
// import string@ GetTimeString(const string& format, uint fullSecond) from "time";
// import string@ GetTimeString(const string& format, int year, int month, int day, int dayOfWeek, int hour, int minute, int second) from "time";
// Tags format:
//  %YEAR% - year,
//  %MONTH% - month,
//  %DAY% - day,
//  %DOW% - day of week,
//  %HOUR% - hour,
//  %MINUTE% - minute;
//  %SECOND% - second;
// To show names of values add "-STR" to format tag (%MONTH% -> %MONTH-STR%), supported by month and day of week.
// Example: GetTimeString("%HOUR%:%MINUTE% %DAY% (%DOW-STR%) %MONTH-STR% %YEAR%",fullSecond) -> "14:05 23 (Sunday)

#include "_utils.fos"
#include "time_h.fos"

#ifdef __SERVER
uint GetNearFullSecond( uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second )
{
    int jump = 0;   // 1 - years, 2 - months, 3 - days
    if( year == 0 )
    {
        year = __Year;
        jump = 1;
    }
    if( month == 0 )
    {
        month = __Month;
        jump = 2;
    }
    if( day == 0 )
    {
        day = __Day;
        jump = 3;
    }

    uint fullSecond = ::GetFullSecond( year, month, day, hour, minute, second );
    while( fullSecond <= __FullSecond )
    {
        switch( jump )
        {
        case 0:
            return __FullSecond + 1;           // Time expired, call faster
        case 1:
            year++;
            break;
        case 2:
            month++;
            if( month > 12 )
            {
                month = 1;
                year++;
            }
            break;
        case 3:
            day++;
            if( day > 28 && day > GetDaysInMonth( year, month ) )
            {
                day = 1;
                month++;
                if( month > 12 )
                {
                    month = 1;
                    year++;
                }
            }
            break;
        default:
            break;
        }

        fullSecond = ::GetFullSecond( year, month, day, hour, minute, second );
    }
    return fullSecond;
}

uint GetDaysInMonth( uint16 year, uint16 month )
{
    switch( month )
    {
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			return 31;
		case 2:
		{
			if( year % 400 == 0 || ( year % 4 == 0 && year % 100 != 0 ) )
			{
				return 29;
			}
			return 28;
		}
		default:
			return 30;
    }
    return 0;
}
#endif //__SERVER
#ifdef __CLIENT
string@ GetTimeString( const string& format, uint fullSecond )
{
    uint16 year = 0, month = 0, day = 0, dayOfWeek = 0, hour = 0, minute = 0, second = 0;
    ::GetGameTime( fullSecond, year, month, day, dayOfWeek, hour, minute, second );
    return GetTimeString( format, year, month, day, dayOfWeek, hour, minute, second );
}

string@ GetTimeString( const string& format, int year, int month, int day, int dayOfWeek, int hour, int minute, int second )
{
    string result = format;

    if( year != -1 )
        result = ReplaceText( result, "%YEAR%", year );
    if( month != -1 )
    {
        result = ReplaceText( result, "%MONTH%", month );
        result = ReplaceText( result, "%MONTH-STR%", GetMsgStr( TEXTMSG_GAME, STR_MONTH( month ) ) );
    }
    if( day != -1 )
        result = ReplaceText( result, "%DAY%", day );
    if( dayOfWeek != -1 )
    {
        result = ReplaceText( result, "%DOW%", dayOfWeek );
        result = ReplaceText( result, "%DOW-STR%", GetMsgStr( TEXTMSG_GAME, STR_MONTH( dayOfWeek ) ) );
    }
    if( hour != -1 )
        result = ReplaceText( result, "%HOUR%", hour );
    if( minute != -1 )
        result = ReplaceText( result, "%MINUTE%", minute );
    if( second != -1 )
        result = ReplaceText( result, "%SECOND%", second );

    return result;
}
#endif
#ifdef __SERVER
void unsafe_getIngameTime( Critter& cr, int param0, int param1, int param2, string@ param3, int[]@ param4 )
{
	getIngameTime( cr );
}

void getIngameTime( Critter& cr )
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	uint16[] timeItems = { PID_GOLD_WATCH, PID_CLOCK, PID_PIPBOY3K, PID_PIPBOY2K_ON };
	uint16 year = 0, month = 0, day = 0, hour = 0, minute = 0, var = 0;
	GetTime( year, month, day, var, hour, minute, var, var );
	year += __YearShift + GetLocationTimeDeltaYears( map );
	
	string dayStr = int( day - 10 ) <= 0 ? "0" + day : "" + day;
	
	if( isGM( cr ) || hasItems( cr, timeItems ) )
	{
		string hourStr = int( hour - 10 ) <= 0 ? "0" + hour : "" + hour;
		string minuteStr = int( minute - 10 ) <= 0 ? "0" + minute : "" + minute;
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_LOCAL_TIME, "$year" + year + "$month@msg game " + ( month + 20 ) + "@$day" + dayStr + "$hour" + hourStr + "$minute" + minuteStr );
	}
	else
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_LOCAL_DATE, "$year" + year + "$month@msg game " + ( month + 20 ) + "@$day" + dayStr );
	}
}

int GetRealYear()
{
	uint16 year = 0, month = 0, day = 0, hour = 0, minute = 0, var = 0;
	GetTime( year, month, day, var, hour, minute, var, var );
	
	return year;
}

int GetRealHour()
{
	uint16 year = 0, month = 0, day = 0, hour = 0, minute = 0, var = 0;
	GetTime( year, month, day, var, hour, minute, var, var );
	
	return hour;
}

int GetRealMinute()
{
	uint16 year = 0, month = 0, day = 0, hour = 0, minute = 0, var = 0;
	GetTime( year, month, day, var, hour, minute, var, var );
	
	return minute;
}


int GetGlobalYear()
{
	uint16 year = 0, month = 0, day = 0, hour = 0, minute = 0, var = 0;
	GetTime( year, month, day, var, hour, minute, var, var );
	year += __YearShift;
	
	return year;
}

int GetLocalYear( Map& map )
{
	uint16 year = 0, month = 0, day = 0, hour = 0, minute = 0, var = 0;
	GetTime( year, month, day, var, hour, minute, var, var );
	GameVar@ DELTA_YEARS = GetLocalVar( LMVAR_DELTA_YEARS, map.Id );
	int localDelta = DELTA_YEARS.GetValue();
	year += __YearShift + localDelta;
	
	return year;
}

int GetLocationTimeDeltaYears( Map@ map )
{
	if( !valid( map ) )
	{
		return 0;
	}
	GameVar@ DELTA_YEARS = GetLocalVar( LMVAR_DELTA_YEARS, map.Id );
	return DELTA_YEARS.GetValue();
}
#endif // __SERVER
#endif // TIME