#ifndef TRAPS_MODULE
#define TRAPS_MODULE

// Traps by Jonathan Joestar for FO4RP

#include "_utils.fos"
#include "traps_h.fos"
#include "scripting_object.fos"
#include "combat_h.fos"

import Lookup@ getClassesLookup() from "scripting_objects_lookup";

void registerTraps()
{
	getClassesLookup().appendScriptingObjects(DeactivatedTrap());
	getClassesLookup().appendScriptingObjects(ActiveTrap());
	getClassesLookup().appendScriptingObjects(Camouflage());
}

class DeactivatedTrap : GenericObject
{

	bool itemUse( Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )	
	{
		Item@ handItem = _CritGetItemHand( crit );
		if( item.Accessory == ACCESSORY_CRITTER && item.CritSlot != SLOT_HAND1 )
		{
			crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HOLD_SNARE );
			return true;
		}
		
		Map@ map = crit.GetMap();
		
		if( !valid( map ) )
		{
			return true;
		}
		
		if( valid( map.GetItem( crit.HexX, crit.HexY, PID_TRAP_ACTIVE ) ) )
		{
			crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SNARE_HEX_BUSY );
			return true;
		}
		
		int roll = Random( 0, 100 );
		int skill = crit.Param[ SK_TRAPS ];
		int hardness = 0;
		crit.StatBase[ ST_CURRENT_AP ] -= 7000;
		
		if( skill <= 100 )
		{
			if( roll > skill )
			{
				InjureCritter( crit, Random( item.Proto.Weapon_DmgMin_0, item.Proto.Weapon_DmgMax_0 ), item.Proto.Weapon_DmgType_0, crit.Dir, crit.Id, Random( 0, 1 ) == 0 ? HIT_LOCATION_LEFT_ARM : HIT_LOCATION_RIGHT_ARM, false );
				crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SNARE_FAILED );
				this.playTrapSound( map, crit.HexX, crit.HexY );
				
				return true;
			}
		}
		else if( skill <= 200 )
		{
			if( roll < skill - 100 )
			{
				hardness = Random( 10, 20 );
			}
		}
		else
		{
			if( roll < skill - 200 )
			{
				hardness = Random( 30, 60 );
			}
			else
			{
				hardness = Random( 10, 20 );
			}
		}
		
		if( item.IsStackable() )
		{
			if( item.GetCount() > 1 )
			{
				item.SetCount( item.GetCount()-1 );
			}
			else
			{
				DeleteItem(item);
			}
		}
		item.Update();
		
		Item@ activeTrap = map.AddItem( crit.HexX, crit.HexY, PID_TRAP_ACTIVE, 1 );
		
		activeTrap.TRAP_HARDNESS = hardness;	
		activeTrap.TRAP_SKILL = skill;
		activeTrap.TRAP_OWNER = crit.Id;
		activeTrap.TRAP_CRITICAL_CHANCE = crit.Stat[ ST_CRITICAL_CHANCE ];
        activeTrap.TrapValue = skill;
		
		crit.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_SET_UP_SNARE );
		this.playTrapSetup( map, crit.HexX, crit.HexY );
		
		return true;
	}

	void playTrapSound(Map@ map, uint16 hexX, uint16 hexY)
	{
		PlayGenericSound( map, hexX, hexY, "gotcha.ogg", 10 );
	}
	
	void playTrapSetup( Map@ map, uint16 hexX, uint16 hexY )
	{
		PlayGenericSound( map, hexX, hexY, "trapsetup2.ogg", 5 );
	}
	
	array<int> getProtoIds()
	{
		array<int> protoIds = { PID_TRAP_DEACTIVATED };
		return protoIds;
	}
}

class ActiveTrap : GenericObject
{

	bool itemSkillUse(Item& item, Critter& crit, int skill)
	{
		Map@ map = crit.GetMap();
		Item@ deactivatedTrap = map.AddItem( item.HexX, item.HexY, PID_TRAP_DEACTIVATED, 1 );
		this.playTrapSound( map, item.HexX, item.HexY );

		DeleteItem(item);
		item.Update();
		
		return true;
	}
	
	void itemWalk( Item& item, Critter& crit, bool entered, uint8 dir )
	{
		if( entered )
		{
			crit.Wait(0);
			
			int hardness = item.TRAP_HARDNESS;

			if( ( crit.Param[ ST_LUCK ] * 2 ) > Random( 0, 100 ) )
			{
				crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SNARE_LUCKY );
				return;
			}
			
			crit.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_STEP_SNARE );
			Map@ map = crit.GetMap();
			
			bool isCritical = TrapCritRoll( item, crit );
			InjureCritter( crit, Random( item.Proto.Weapon_DmgMin_0, item.Proto.Weapon_DmgMax_0 ), item.Proto.Weapon_DmgType_0, dir, item.TRAP_OWNER, Random( 0, 1 ) == 0 ? HIT_LOCATION_LEFT_LEG : HIT_LOCATION_RIGHT_LEG, isCritical );
			
			if( hardness > 0 )
			{
				HookHoldAttack( crit, hardness );
			}
			
			this.playTrapSound(map, item.HexX, item.HexY);
			
			Item@ deactivatedTrap = map.AddItem( item.HexX, item.HexY, PID_TRAP_DEACTIVATED, 1);
			
			DeleteItem(item);
			item.Update();
		}	
	}
	
	void playTrapSound(Map@ map, uint16 hexX, uint16 hexY)
	{
		PlayGenericSound( map, hexX, hexY, "gotcha.ogg", 10 );
	}
	
	array<int> getProtoIds()
	{
		array<int> protoIds = {PID_TRAP_ACTIVE};
		return protoIds;
	}
}

class Camouflage : GenericObject
{

	bool itemSkillUse(Item& item, Critter& crit, int skill)
	{
		if(skill == SK_TRAPS)
		{
			MoveItem( item, 1, crit );
			return true;
		}

		return false;
	}
	
	array<int> getProtoIds()
	{
		array<int> protoIds = {
			PID_CAMO_01,
			PID_CAMO_02,
			PID_CAMO_03,
			PID_CAMO_04,
			PID_CAMO_05,
			PID_CAMO_06,
			PID_CAMO_07,
			PID_CAMO_08,
			PID_CAMO_09,
			PID_CAMO_10,
			PID_CAMO_11,
			PID_CAMO_12,
			PID_CAMO_13,
			PID_CAMO_14,
			PID_CAMO_15,
			PID_CAMO_16,
			PID_CAMO_17,
			PID_CAMO_18,
			PID_CAMO_19				
		};
		return protoIds;
	}
}

bool TrapCritRoll( Item& trap, Critter& target )
{
	bool isCritical = false;
	
	float critBase = trap.TRAP_CRITICAL_CHANCE; 
	
	float critArmor = target.Stat[ ST_LUCK ] + target.Stat[ ST_ARMOR_CLASS ];
	float critMult = ( 100 - critArmor ) * 0.01;
	float roll = Random( 1, 100 );
	
	float critResult = critBase * critMult;
	isCritical = critResult >= roll;
	
	if( target.Param[ QST_GAMEMODE ] == GAME_TEST )
	{
		target.Say( SAY_NETMSG, boolValue( isCritical, "|0xFFFF00 Critroll ", "|0x00FFFF SUCCEED", "|0xFFFF00 FAILED" ) + "\n"
			+ StyledText( "|", "Base: ", critBase )
			+ StyledText( "|", "Armor: ", critArmor )
			+ StyledText( "\n", "Mult: ", critMult )
			+ StyledText( "|", "Result: ", critResult )								
			+ StyledText( "\n", "Roll: ", roll )
		);
	}
	
	return isCritical;
}
#endif // TRAPS_MODULE