#ifndef DOOR_SOUNDS
#define DOOR_SOUNDS

class DoorSound
{
	uint sound_Id;
	string windup; 
	string single; 	// single
	string burst;  	// burst
	string reload; 	// reload
	string extra;  	// extra
	string blank;
	
	DoorSound( uint sound_Id, string windup, string single, string burst, string reload, string extra, string blank )
	{
        this.sound_Id = sound_Id;
		this.windup = windup;
		this.single = single;
		this.burst = burst;
		this.reload = reload;
		this.extra = extra;
		this.blank = blank;
	}
}	

class DoorSoundCollection
{
	DoorSound@[] weaponSounds;
	DoorSoundCollection()
	{
	}

	DoorSoundCollection@ sound( uint sound_Id, string windup, string single, string burst, string reload, string extra, string blank )
	{
		this.weaponSounds.insertLast( DoorSound( sound_Id, windup, single, burst, reload, extra, blank ) );
		return this;
	}
	
	DoorSound@ get_by_soundId( uint soundId )
	{
		for( uint i = 0, len = this.weaponSounds.length(); i < len; i++ )
		{
			if( this.weaponSounds[i].sound_Id == soundId )
			{
				return this.weaponSounds[i];
			}
		}
		return null;
	}
}

DoorSoundCollection@ doorSounds = DoorSoundCollection()
	//	sound_Id, 		DOOR_OPEN, 				DOOR_LOCK, 				DOOR_CLOSE, 		SOUND_DOOR_NOT_OPEN	
	.sound( 100,	".mp3",	".mp3",		".mp3",		".mp3"	)

	;

//get for client
DoorSound@ GetDoorSound( const ProtoItem@ proto )
{
	uint soundId = proto.SoundId;
    return doorSounds.get_by_soundId( soundId );
}

//get for server
DoorSound@ GetDoorSound( uint16 pid )
{
	ProtoItem@ proto = GetProtoItem( pid );
	uint soundId = proto.SoundId;
    return doorSounds.get_by_soundId( soundId );
}

#endif // DOOR_SOUNDS