#include "_defines.fos"

//for draw text and sinf
#include "_client_defines.fos"

import string@ GetName(uint id) from "client_names";

bool overlay_hide = false;

bool want_connect = false;
bool want_disconnect = false;

# pragma bindfunc "void OverlayConnect(string&, string&) -> rust_dll/client.dll connect_to_overlay"
// import void overlay_connect() from "overlay";
void overlay_connect() {
    string web = __Host+":8000";
    OverlayConnect("127.0.0.1:33741", web);
}

# pragma bindfunc "void OverlayDisconnect(bool) -> rust_dll/client.dll disconnect_from_overlay"
// import void overlay_finish() from "overlay";
void overlay_disconnect() {
    OverlayDisconnect(true);
}

# pragma bindfunc "void OverlayHide(bool) -> rust_dll/client.dll hide_overlay"
// import void overlay_visibility() from "overlay";
void overlay_visibility() {
    overlay_hide = !overlay_hide;
    OverlayHide(overlay_hide);
}

# pragma bindfunc "void UpdateAvatars(CritterCl@ []&) -> rust_dll/client.dll update_avatars"
// import void overlay_loop(bool show) from "overlay";

void overlay_loop(bool show) {
    CritterCl@ [] critters;
    if( show ) {        
        uint len = GetCritters(0, FIND_ALL, critters);
    }
    UpdateAvatars(critters);
}

# pragma bindfunc "void OverlayMessage(string&, int, uint, uint, string@) -> rust_dll/client.dll message_in"
// import void overlay_message(string& message, int& sayType, uint& critterId, uint& delay) from "overlay";

void overlay_message(string& message, int& sayType, uint& critterId, uint& delay) {
    string@ name = null;
    if( sayType == SAY_RADIO ) {
        @name = "Рация";
    } else if ( sayType > SAY_WHISP_ON_HEAD ) {
        return;
    } else {
        if( critterId != 0 ) {
            @name = GetName(critterId);
        }
        if( critterId >= 5000000) {
            if ( name is null ) {
                CritterCl@ npc = GetCritter(critterId);
                if( npc !is null && npc.IsNpc()) {
                    @name = npc.Name;
                }
            }
        } else {
            if ( critterId != 0 && ( __sinf & SINF_LOGIN ) != 0 ) {
                CritterCl@ player = GetCritter(critterId);
                if( player !is null && player.IsPlayer() ) {
                    if( name is null ) {
                        @name = "("+player.Name+")";
                    } else {
                        @name = name + " ("+player.Name+")";
                    }
                }
            }
        }
    }
    OverlayMessage(message, sayType, critterId, delay, name);
}

/*
# pragma bindfunc "void UpdateAvatars(int[]&) -> rust_dll/client.dll update_avatars"
// import void overlay_loop(bool show) from "overlay";

void overlay_loop(bool show) {
    int[] data;
    if( show ) {
        CritterCl@ [] critters;
        uint len = GetCritters(0, FIND_ALL, critters);
        
        // 0 - id
        // 1 - ver
        // 2 - secret
        // 3 - pos x
        // 4 - pos y
        for(uint i=0; i<len; i++) {
            CritterCl@ cr = critters[i];
            int ver = cr.ParamBase[QST_CHAR_VER];
            int secret = cr.ParamBase[QST_CHAR_SECRET];
            if( ver == 0 || secret == 0) {
                continue;
            }
            NativeSprite@ sprite = GetSpriteDOT(29, cr.HexX, cr.HexY);
            if (sprite is null) {
                continue;
            }
            int x = 0, y = 0;
            sprite.GetPos( x, y );
            y-=80;
            x-=16;
            
            data.insertLast(cr.Id);
            data.insertLast(ver);
            data.insertLast(secret);

            data.insertLast(x);
            data.insertLast(y);
            //DrawText("id: "+cr.Id+" ver: "+ver+" secret: "+secret, x, y, 250, 20, 0, FONT_FALLOUT, FT_NOBREAK);
        }
    }
    UpdateAvatars(data);
}
*/