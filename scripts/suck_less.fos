#define __SUCK_LESS__

#include "_defines.fos"
#include "_dialogbox.fos"

import string Centering( string list ) from "mio_control";

class Menu: iDialogBox {
    uint m_cr_id;
    uint m_state;
    string m_name;
    string[] m_buttons;

    Menu(string& name, uint cr_id) {
        m_cr_id = cr_id;
        m_state = uint(-1);
        m_name = name;
    }

    bool Button(string& text) {
        if( m_state == uint(-1) ) {
            m_buttons.insertLast(text);
            return false;
        }
        return m_state == uint( m_buttons.find(text) );
    }
    bool ButtonCenter(string& text) {
        return Button(Centering(text));
    }
    void Finish(string& callback) {
        Critter@ cr = GetCritter(m_cr_id);
        if(cr is null || cr.IsNpc()) {
            //shouldn't be
            return;
        }
        uint count = m_buttons.length();
        if( count > 0 ) {
            cr.ShowScreen( SCREEN_DIALOGBOX, count, callback );
            for(uint i = 0; i < count; i++) {
                cr.Say( SAY_DIALOGBOX_BUTTON( i ), m_buttons[i] );
            }
        } else {
            cr.ShowScreen(SCREEN_CLOSE, 0, null);
        }
    }
}

dictionary menus;

//export
iDialogBox@ OpenMenu(Critter& cr, string& name) {
    string@ key = ""+cr.Id;
    Menu@ menu = Menu(name, cr.Id);
    menus.set(key, @menu);

    Menu@ menu2 = null;
    menus.get(key, @menu2);
    return menu2;
}

//export
iDialogBox@ CloseMenu(Critter& cr, string& name, uint answerI) {
    Menu@ menu = null;
    string@ key = ""+cr.Id;
    if( menus.get(key, @menu) ) {
        menus.delete(key);
        if( menu.m_name != name ) {
            return null;
        }
        menu.m_state = answerI;
    }
    return menu;
}


////
/*
bool fired_up = false;
uint fuel = 0;

bool MenuFireBarrel( Critter& cr, Map& map, Item& target, Menu& menu )
{
    if ( fired_up ) {
        if( menu.Button("Потушить огонь") ) {
            cr.Say(SAY_EMOTE_ON_HEAD, "Тушит огонь");
            fired_up = false;
            return true;
        }
    } else {
        if( menu.Button("Разжечь огонь") ) {
            cr.Say(SAY_EMOTE_ON_HEAD, "Разжигает огонь");
            fired_up = true;
            return true;
        }
    }
    
    if ( fuel < 5 && menu.Button("Подкинуть горючее") ) {
        fuel += 1;
        cr.Say(SAY_EMOTE_ON_HEAD, "Подкидывает горючее, теперь его "+fuel);
        return true; //TryFeedTheFire( cr );
    }
  
    if ( menu.Button("Открепить бочку") ) {
        cr.Say(SAY_EMOTE_ON_HEAD, "Открепляет бочку");
        return true; //TryLockInPlace( cr );
    }
  
    if ( menu.Button("Ничего не делать") ) {
        cr.Say(SAY_EMOTE_ON_HEAD, "Ничего не делает.");
        return true;
    }
  
    return true;
}

bool StartMenuFireBarrel( Critter& cr, Item& target) //exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return false;
    }
    cr.StatBase[ST_VAR7] = target.Id;

    Menu@ menu = OpenMenu(cr, "Бочка");
    MenuFireBarrel(cr, map, target, menu);
    menu.Finish("answer_fire_barrel");

    return true;
}


void answer_fire_barrel( Critter& cr, uint answerI, string& answerS )
{
    Map@ map = cr.GetMap();
    Item@ target = GetItem(cr.StatBase[ST_VAR7]);

    if( map is null || target is null ) {
        return;
    }

    Menu@ menu = CloseMenu(cr, "Бочка", answerI);
  
    if( menu is null || !MenuFireBarrel( cr, map, target, menu ) ) {
        cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
    }
}

void TestBarrel( Critter& player, int param0, int param1, int param2 )  {
    Item@ item = GetItem(param0);
    if( item is null ) {
        return;
    }
    StartMenuFireBarrel(player, item);
}
*/