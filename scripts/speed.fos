// critter speed

#include "_utils.fos"

#define CRITTER_BASE_RUN     ( 200 )
#define CRITTER_BASE_WALK    ( 400 )

import bool F_Dragging( Critter& player ) from "mio_social";

#include "_starter.fos"
START( "speed", "InitSpeedArray" );

int[] SpeedArray( 2000, 0 );

void InitSpeedArray() // Export
{
    file crTypes;
    if( crTypes.open( "./data/CritterTypes.cfg", "r" ) < 0 )
        return;

    int i = 0;
	while( !crTypes.isEndOfFile() )
    {
        string str;
        crTypes.readLine( str );
        if( str.length() < 10 || str[ 0 ] != '@' )
            continue;

		string@[] @ line = splitExSpaces( str );
		
		i++;
		//DebugLog( "#" + i + ") " + enlistSTR( line ) );

        int num = 0, walk = 0, run = 0;
        if( !StrToInt( line[ 1 ], num ) || num < 0 || num > 999 || !StrToInt( line[ 37 ], walk ) || !StrToInt( line[ 38 ], run ) )
            continue;

        SpeedArray[ num * 2 ] = walk;
        SpeedArray[ num * 2 + 1 ] = run;
    }
    crTypes.close();
}

void reset()
{
    Critter@[] crs;
    GetAllPlayers( crs );

    for( uint i = 0, j = crs.length(); i < j; i++ )
    {
        ChangeCritterSpeed( crs[ i ] );
    }
}

void reset( Critter& cr, int p0, int p1, int )
{
    reset();
}

void testISA( Critter& cr, int p0, int p1, int )
{
    InitSpeedArray();
    reset();
}

void ChangeCritterSpeed( Critter& cr )
{
	if( cr.ParamBase[ CR_FIXED_SPEED ] != 0 ) return;
	
	if( isGM( cr ) ) //Если не фиксированная скорость, и ты ГМ - ты не страдаешь от перегруза.
	{
		cr.ModeBase[ MODE_NO_RUN ] = 0;
		cr.StatBase[ ST_WALK_TIME ] = 400;
		cr.StatBase[ ST_RUN_TIME ] = 200;
		return;
	}
	
    uint16 run = 0, walk = 0;
    float    curHp = cr.Stat[ ST_CURRENT_HP ], maxHp = cr.Stat[ ST_MAX_LIFE ];
    float   carry = cr.Stat[ ST_CARRY_WEIGHT ], weight = ItemsWeight( cr ), carryMod = 0;

    Item @ armor = cr.GetItem( 0, SLOT_ARMOR );
    bool apa = false;
    if( @armor != null )
    {
        uint16 pid = armor.GetProtoId();

        apa = ( pid == PID_POWERED_ARMOR ||
                pid == PID_HARDENED_POWER_ARMOR ||
                pid == PID_ADVANCED_POWER_ARMOR ||
                pid == PID_ADVANCED_POWER_ARMOR_MK2 );
    }

    if( carry == 0 )
        carry += 1;
    float weight_cantRun = carry * 0.71,
         weight_limitWalk = carry,
         weight_cantWalk = carry * 1.5;

	Item@ shacklesCheck = cr.GetItem( 0, SLOT_MISC );
	bool shackles = false;
	if( @shacklesCheck != null)
	{
			uint16 pid = shacklesCheck.GetProtoId();
			
			shackles = ( pid == PID_SHACKLES);
	}
	
    bool CanRun = ( ( SpeedArray[ cr.CrType * 2 + 1 ] != 0 ) && ( weight < weight_cantRun ) /*&& !apa */ && !shackles );
    cr.ModeBase[ MODE_NO_RUN ] = ( CanRun ? 0 : 1 );
	
	if( cr.GetTimeEvents( CTE_SLOWRELOAD, null, null, null ) > 0 )
		cr.ModeBase[ MODE_NO_RUN ] = 2;
	
    if( curHp <= 0 )
        curHp = 1;
	if( curHp >= maxHp * 0.25 )
		curHp = maxHp * 0.25;
    float hpPERCENT = curHp * 1.0 / ( maxHp * 0.25 );
	float healthMod = 2.0 - hpPERCENT;

    walk = uint16( SpeedArray[ cr.CrType * 2 ] );
    run  = uint16( SpeedArray[ cr.CrType * 2 + 1 ] );
	
	float dragging = FurnitureDraggingSpeedMod( cr );
	
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )    
		cr.Say( SAY_NORM, "w " + walk + " r " + run + " h " + healthMod + " d " + dragging );
	
	cr.ModeBase[ MODE_NO_WALK ] = weight > weight_cantWalk ? 1 : 0;
	
	walk = CLAMP( walk * healthMod * dragging, 400, 1000 );
    run = CLAMP( run * healthMod * dragging, 200, walk );

	if( F_Dragging( cr ) ) { walk += 1200 - ( cr.Stat[ ST_STRENGTH ] * 100 ); run = walk; }

    cr.StatBase[ ST_WALK_TIME ] = walk;
    cr.StatBase[ ST_RUN_TIME ] = run;

	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )    
		cr.Say( SAY_NORM, "w " + cr.StatBase[ ST_WALK_TIME ] + " r " + cr.StatBase[ ST_RUN_TIME ] );
}

float FurnitureDraggingSpeedMod( Critter& cr )
{
	if( cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) == 0 )
		return 1;
	
	Item@ furniture = GetItem( cr.StatBase[ ST_LAST_CONT_ID ] );
	if( !valid( furniture ) ) 
		return 1;
	
	float furniture_weight = ItemsWeight( furniture );
	float max_weight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture );
	float min_weight = max_weight / 2;
	
	float weight_capacity = max_weight - min_weight;
	float weight_used = furniture_weight - min_weight;

	float result = 2 - ( weight_capacity - weight_used ) / weight_capacity;
	
	if( result < 1 )
		result = 1;
	
	if( result > 2 )
		result = 2;
	
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
	{
		cr.Say( SAY_NORM, "result " + result + " max_weight " + max_weight + " furniture_weight " + furniture_weight );
		cr.Say( SAY_NORM, "weight_capacity " + weight_capacity + " weight_used " + weight_used );
	}
	
	return result;
}
