#ifndef CONSUMABLES_ACTIVE_DRUG
#define CONSUMABLES_ACTIVE_DRUG

#include "CTE.fos"

///Обертка вокруг CTE, сравнивает различные cte_drug_process для нахождения наиболее "старого".

class ActiveDrug 
{
	CTE cte;
	
	uint pid() 			{ return cte.group_id; }
	uint phase() 		{ return cte.rate; }
	uint time_left() 	{ return cte.time_left; }
	uint event_id() 	{ return cte.event_id; }
	
	ActiveDrug( uint pid, uint event_id, uint phase, uint time_left ) 
	{
		cte = CTE( pid, event_id, phase, time_left );
	}
	
	bool isOlderThan( ActiveDrug@ other )
	{
		if( this.phase() == DRUG_ADDICTION_PHASE ) return false;
		
		if( !valid( other ) ) return true;
		if( this.phase() > other.phase() ) return true;
		if( this.time_left() <= other.time_left() ) return true;
		
		return false;
	}
	
	string toString()
	{
		return "ActiveDrug(" + itemName( pid() ) + ")#" + pid() + ":" + event_id() + " at " + phase() + " phase on " + DeltaTime_HMS( time_left() );
	}
}

#endif