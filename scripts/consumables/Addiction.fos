#ifndef CONSUMABLES_ADDICTION
#define CONSUMABLES_ADDICTION

#include "Consumable.fos" 
#include "Roll.fos"

///Связывает эффект зависимости, спасбросок на её получение и обновление текущего состояния зависимости ( менеджмент "ломки" )
///Убирает под капот проверки, имеет дефолтную заглушку "noAddiction".

class Addiction
{
	uint param;
	uint chance;
	Addiction( uint param, uint chance )
	{
		this.param = param;
		this.chance = chance;
	}	
	
	Effect@ effect;
	Addiction@ on( Effect@ effect ) 
	{
		@this.effect = @effect;
		this.effect.name = PARAM_NAME(param) + " .onAddiction";
		
		return this;
	}	
	
	bool roll( Critter& cr )
	{//FORMAT: Returns true if Critter have Addiction
		if( cr.Addiction[ param ] != DRUG_ADDICTION_IS_NONE )
			return true;

		uint difficulty = chance;

		if( cr.Trait[ TRAIT_CHEM_RELIANT ] != 0 )
			difficulty *= 2;
		
		if( cr.Trait[ TRAIT_CHEM_RESISTANT ] != 0 )
			difficulty /= 2;	
		
		if( Roll( 1, 100 ).failed( difficulty ) )
		{
			cr.AddictionBase[ param ] = DRUG_ADDICTION_IS_WAITING;
			return true;
		}
		
		return false;
	}
	
	void check( Critter& cr, bool on_drugs )
	{ //NOTE: Look at SetParameterChangeBehaviour(AddictionBase) for more info!
		if( cr.Addiction[ param ] == DRUG_ADDICTION_IS_NONE ) return;

		cr.AddictionBase[ param ] = DRUG_ADDICTION_IS_WAITING; 

		if( !on_drugs )
		{//NOTE: Starts the addiction cte if no drugs on stage 1 are present.
			cr.AddictionBase[ param ] = DRUG_ADDICTION_IS_GOING;
		}
	}
	
	string toString() 
	{ //FORMAT: "Addiction#PARAM(%) [effect]"
		return  "Addiction#" + param + "(" + chance + "%) " + STR_INFO( effect );
	}
}

class noAddiction : Addiction
{
	noAddiction() { @effect = noEffect(); }
	bool roll( Critter& cr ) override { return false; }
	void check( Critter& cr, bool on_drugs ) override {}
	string toString() override { return "[noAddiction]"; }
}

#endif