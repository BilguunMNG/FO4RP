#ifndef CONSUMABLES_UTILS
#define CONSUMABLES_UTILS

#define DEFAULT_SOUND_DISTANCE		( 5 ) //According to other use cases, that's default value

#define OVERDOSE_PER_EFFECT			( 100 )
#define OVERDOSE_MAX	    		( 500 )

#define DRUG_PHASE_START			( 0 )
#define DRUG_ADDICTION_IS_NONE		( 0 )
#define DRUG_ADDICTION_IS_WAITING	( 1 )
#define DRUG_ADDICTION_IS_GOING		( 2 )
#define DRUG_ADDICTION_PHASE		( 4 )

#define AP_DENOMINATOR 				( 100 )
#define POISON_DENOMINATOR 			( 10 )
#define RADIATION_DENOMINATOR 		( 10 )

#define RED 	( "|0xFF0000 " )
#define GREEN 	( "|0x00FF00 " )
#define YELLOW 	( "|0xFFFF00 " )
#define WHITE 	( "|0xFFFFFF " )

#define STR_INFO		#(link)		( valid(link) ? link.toString() : "[undefined]" )

#define SIGN #(value)	( ( value > 0 ? "+" : "" ) + value )

#define IN_RANGE #( value, min, max )	( ( value >= min ) && ( value <= max ) )

int getBase( CritterMutual@ cr, uint param ) {
	if( !valid( cr ) ) return 0;
	
	if( IN_RANGE( param, STAT_BEGIN, STAT_END ) )			 return cr.StatBase[param];
	if( IN_RANGE( param, SKILL_BEGIN, SKILL_END ) )			 return cr.SkillBase[param];
	if( IN_RANGE( param, TIMEOUT_BEGIN, TIMEOUT_END ) )		 return int( cr.Timeout[param] / __TimeMultiplier );//returns value in REAL_SECONDS
	if( IN_RANGE( param, KILL_BEGIN, KILL_END ) )			 return cr.KillBase[param];
	if( IN_RANGE( param, PERK_BEGIN, PERK_END ) )			 return cr.PerkBase[param];
	if( IN_RANGE( param, AVATAR_BEGIN, AVATAR_END ) )		 return cr.ParamBase[param];
	if( IN_RANGE( param, ADDICTION_BEGIN, ADDICTION_END ) )	 return cr.AddictionBase[param];	
	if( IN_RANGE( param, KARMA_BEGIN, KARMA_END ) )			 return cr.KarmaBase[param];
	if( IN_RANGE( param, DAMAGE_BEGIN, DAMAGE_END ) )		 return cr.DamageBase[param];
	if( IN_RANGE( param, MODE_BEGIN, MODE_END ) )			 return cr.ModeBase[param];
	if( IN_RANGE( param, TRAIT_BEGIN, TRAIT_END ) )			 return cr.TraitBase[param];
	if( IN_RANGE( param, REPUTATION_BEGIN, REPUTATION_END ) )return cr.ReputationBase[param];	
	return cr.ParamBase[param];	
}

int getValue( CritterMutual@ cr, uint param ) {
	if( !valid( cr ) ) return 0;

	if( IN_RANGE( param, STAT_BEGIN, STAT_END ) )			 return cr.Stat[param];
	if( IN_RANGE( param, SKILL_BEGIN, SKILL_END ) )			 return cr.Skill[param];
	if( IN_RANGE( param, TIMEOUT_BEGIN, TIMEOUT_END ) )		 return int( cr.Timeout[param] / __TimeMultiplier );//returns value in REAL_SECONDS
	if( IN_RANGE( param, KILL_BEGIN, KILL_END ) )			 return cr.Kill[param];
	if( IN_RANGE( param, PERK_BEGIN, PERK_END ) )			 return cr.Perk[param];
	if( IN_RANGE( param, AVATAR_BEGIN, AVATAR_END ) )		 return cr.Param[param];
	if( IN_RANGE( param, ADDICTION_BEGIN, ADDICTION_END ) )	 return cr.Addiction[param];	
	if( IN_RANGE( param, KARMA_BEGIN, KARMA_END ) )			 return cr.Karma[param];
	if( IN_RANGE( param, DAMAGE_BEGIN, DAMAGE_END ) )		 return cr.Damage[param];
	if( IN_RANGE( param, MODE_BEGIN, MODE_END ) )			 return cr.Mode[param];
	if( IN_RANGE( param, TRAIT_BEGIN, TRAIT_END ) )			 return cr.Trait[param];
	if( IN_RANGE( param, REPUTATION_BEGIN, REPUTATION_END ) )return cr.Reputation[param];	
	return cr.Param[param];
}			

int setBase( Critter@ cr, uint param, int value ) {
	if( !valid( cr ) ) return value;

		 if( IN_RANGE( param, STAT_BEGIN, STAT_END ) )				cr.StatBase[param] 	     = value;			
	else if( IN_RANGE( param, SKILL_BEGIN, SKILL_END ) )			cr.SkillBase[param]      = value;          
	else if( IN_RANGE( param, TIMEOUT_BEGIN, TIMEOUT_END ) )		cr.TimeoutBase[param]    = __FullSecond + REAL_SECOND(value);        
	else if( IN_RANGE( param, KILL_BEGIN, KILL_END ) )				cr.KillBase[param]       = value;           
	else if( IN_RANGE( param, PERK_BEGIN, PERK_END ) )				cr.PerkBase[param]       = value;           
	else if( IN_RANGE( param, AVATAR_BEGIN, AVATAR_END ) )			cr.ParamBase[param]      = value;          
	else if( IN_RANGE( param, ADDICTION_BEGIN, ADDICTION_END ) )	cr.AddictionBase[param]  = value;	    
	else if( IN_RANGE( param, KARMA_BEGIN, KARMA_END ) )			cr.KarmaBase[param] 	 = value;          
	else if( IN_RANGE( param, DAMAGE_BEGIN, DAMAGE_END ) )			cr.DamageBase[param] 	 = value;         
	else if( IN_RANGE( param, MODE_BEGIN, MODE_END ) )				cr.ModeBase[param] 		 = value;           
	else if( IN_RANGE( param, TRAIT_BEGIN, TRAIT_END ) )			cr.TraitBase[param] 	 = value;          
	else if( IN_RANGE( param, REPUTATION_BEGIN, REPUTATION_END ) )	cr.ReputationBase[param] = value;     
	else 															cr.ParamBase[param] 	 = value;
	
	return getValue( cr, param ); 
}

int addBase( Critter@ cr, uint param, int delta ) 
{
	if( !valid( cr ) ) return delta;	
	int value = getBase( cr, param ) + delta;
	return setBase( cr, param, value );
}

string cut_name( string name )//TODO: rename propertly? idk, sounds legit for me..
{
    string@[]@ parts = splitEx( name, " " );
	
	string shortest = parts[0];
	for( uint i = 0, len = parts.length(); i < len; i++ )
		if( shortest.length() > parts[i].length() )
			shortest = parts[i];
	
	return shortest;
}

#endif