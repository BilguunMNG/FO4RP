#ifndef CONSUMABLES_DRUG_GROUP
#define CONSUMABLES_DRUG_GROUP

#include "Addiction.fos" 
#include "Consumable.fos"
#include "Effect.fos"

///Связывает эффект передозировки, зависимость, длительности фаз и пиды Consumables принадлежащих этой группе.
///Убирает под капот проверки, имеет дефолтную заглушку "noDrugGroup".

class DrugGroup 
{
	uint[] pids;
	string name;
	DrugGroup(string name) { init(name); }
	
	void init( string name )
	{
		pids.resize(0);
		this.name = name;
		@overdose = noEffect();
		@addiction = noAddiction();
	}

	void linkBack( Consumable@ consumable )
	{
		pids.insertLast( consumable.pid );
	}
	
	Effect@ overdose;
	DrugGroup@ onOverdose( Effect@ overdose ) 
	{
		@this.overdose = @overdose;
		this.overdose.name = this.name + " .onOverdose";
		
		return this;
	}
	
	Addiction@ addiction;
	DrugGroup@ set( Addiction@ addiction ) 
	{
		@this.addiction = @addiction;
		
		return this;
	}	
	
	uint[] phases;
	DrugGroup@ addPhase( uint length )
	{
		phases.insertLast( length );
		
		return this;
	}
	
	uint phaseLength( uint index )
	{
		return index < phases.length() ? phases[index] : 0;
	}
	
	string toString() 
	{//FORMAT: "[Name] phases: [list] pids: [list]] overdose: [effect] addicion [addiction]"
		return "[" + name + "]"
				+ "; phases: " + enlistUINT(phases)
				+ "; pids: "  + enlistUINT(pids)
				+ "; overdose: " + STR_INFO( overdose )
				+ "; addiction: "+ STR_INFO( addiction )
				;
	}
}

class noDrugGroup : DrugGroup
{
	noDrugGroup() { super("noDrugGroup"); }
	noDrugGroup( string name ) { super(name); }
	string toString() override { return "[noDrugGroup]"; }
}

#endif