#ifndef CONSUMABLES_CONSUMABLE
#define CONSUMABLES_CONSUMABLE

#include "Sound.fos"
#include "AddItem.fos"
#include "Effect.fos"
#include "DrugGroup.fos"

///Класс-хранилище информации о потребляемом предмете (Consumable) по пиду.
///Имеет дефолтные заглушки во всех полях: звук, возвращаемый предмет, эффекты применения/фазы1/фазы2, группу, флаг потребления предмета внутренней логикой эффектов.

class Consumable 
{
	uint pid;
	Consumable( uint pid ) 
	{
		this.pid = pid;
		
		@sound = noSound();
		@item = noAddItem();
		
		@effect = noEffect();
		@phase1 = noEffect();
		@phase2 = noEffect();
		
		this.setGroup( noDrugGroup() );
		
		isAlreadyConsumed = false;
	}	
	
	Sound@ sound;
	Consumable@ setSound( string name, uint strength = DEFAULT_SOUND_DISTANCE ) { return setSound( Sound( name, strength ) ); }
	Consumable@ setSound( Sound@ sound ) 
	{
		@this.sound = @sound;
		
		return this;
	}	
	
	AddItem@ item;
	Consumable@ returns( uint pid, uint count = 1 ) { return this.returns( AddItem( pid, count ) ); }
	Consumable@ returns( AddItem@ item ) 
	{
		@this.item = @item;
		
		return this;
	}	
	
	Effect@ effect;
	Consumable@ onConsume( Effect@ effect ) 
	{
		@this.effect = @effect;
		this.effect.name = itemName(pid) + " .onConsume";
		
		return this;
	}	
	
	Effect@ phase1;
	Consumable@ onPhase1( Effect@ phase1 ) 
	{
		@this.phase1 = @phase1;
		this.phase1.name = itemName(pid) + " .onPhase1";
		
		return this;
	}
	
	Effect@ phase2;
	Consumable@ onPhase2( Effect@ phase2 ) 
	{
		@this.phase2 = @phase2;
		this.phase2.name = itemName(pid) + " .onPhase2";
		
		return this;
	}	
	
	DrugGroup@ group;
	Consumable@ setGroup( DrugGroup@ group ) 
	{
		@this.group = @group;
		group.linkBack(this);

		syncPhaseTimesWithGroup();

		return this;
	}
	
	void syncPhaseTimesWithGroup()
	{
		if( phase1.time == 0 ) phase1.time = group.phaseLength(0);
		if( phase2.time == 0 ) phase2.time = group.phaseLength(1);			
	}
	
	bool isAlreadyConsumed;
	Consumable@ autoConsumable( bool value ) 
	{
		isAlreadyConsumed = value;
		
		return this;
	}	
	
	string toString() 
	{
		string info = "Consumable '" + itemName(pid) + "' PID#" + pid + ": "
					+ " sound "     + STR_INFO( sound )
					+ " returns "   + STR_INFO( item ) 
					+ " [" + boolValue(isAlreadyConsumed,"autoConsumable") + "]"
					+ " effect "    + STR_INFO( effect )
					+ " phase1 "    + STR_INFO( phase1 )
					+ " phase2 "    + STR_INFO( phase2 )
					+ " drugGroup " + STR_INFO( group );
					
		return info;
	}
}

#endif