#ifndef CLIENT_INPUTBOX
#define CLIENT_INPUTBOX

#include "client_gui_h.fos"
#include "_client_defines.fos"
#include "_utils.fos"

#define CONSOLE    ( '#' )

InputBoxScreen inputboxScreen( 9, FONT_FALLOUT, FT_CENTERY );
void InitScreenInputbox()
{
    GUI_CreateScreen( CLIENT_SCREEN_INPUTBOX, "inputbox_top.png" )
    .CallbackHide( inputboxScreen )
    .CallbackShow( inputboxScreen )
    .Position( 285, 80 )
    .CloseOnMiss( false )
    .CanMove( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    inputboxScreen.InputboxFiledsGraph.resize( 10 );
    inputboxScreen.InputboxTexts.resize( 10 );

    uint16 axistY = 0;

    for( uint8 i = 0; i < 10; i++ )
    {

        if( i != 0 )
		{
            axistY += 22;
		}
		
        InputBoxElement inputboxElement( inputboxScreen, i );
        GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "inputbox_middle.png", 0, 46 + axistY )
        .CallbackInit( inputboxElement );

        InputBoxText inputboxText( inputboxScreen, i );
        GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "inputbox_text.png", 32, 40 + axistY )
        .CallbackInit( inputboxText );
    }
	
    InputBoxBottom inputboxBottom( inputboxScreen );
    GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "inputbox_bottom.png", 0, 61 )
    .CallbackInit( inputboxBottom );

    inputboxScreen.InputboxSign.resize( 3 );
    inputboxScreen.InputboxButtons.resize( 2 );

    InputBoxButton inputboxButtonDone( inputboxScreen, 0 );
    GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "MENUUP.FRM", 55, 74 )
    .CallbackInit( inputboxButtonDone )
    .CallbackMouseClick( inputboxButtonDone )
    .DownPic( "MENUDOWN.FRM" );

    InputBoxButton inputboxButtonExit( inputboxScreen, 1 );
    GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "MENUUP.FRM", 165, 73 )
    .CallbackInit( inputboxButtonExit )
    .CallbackMouseClick( inputboxButtonExit )
    .DownPic( "MENUDOWN.FRM" );

    InputBoxSign inputboxSignDone( inputboxScreen, 1 );
    GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "", 0, 0 )
    .CallbackInit( inputboxSignDone )
    .Position( "InputboxDone" )
    .Text( "DONE", FONT_BIG, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    InputBoxSign inputboxSignExit( inputboxScreen, 2 );
    GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "", 0, 0 )
    .CallbackInit( inputboxSignExit )
    .Position( "InputboxExit" )
    .Text( "EXIT", FONT_BIG, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    InputBoxWindowName inputboxWindowName( inputboxScreen );
    GUI_AddScreenElement( CLIENT_SCREEN_INPUTBOX, "", 0, 0 )
    .Position( "InputboxTitle" )
    .CallbackInit( inputboxWindowName );
}

// ///////////////////
// input box
// //////////////////

string funcName = "";
string windowName = "";

class InputBoxScreen : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    InputBoxBottom@ InputboxBottom;
    InputBoxWindowName@ InputboxWindowName;
    InputBoxElement@[] InputboxFiledsGraph;
    InputBoxButton@[] InputboxButtons;
    InputBoxText@[] InputboxTexts;
    InputBoxSign@[] InputboxSign;

    string Text;
    uint8 LinesCount;
    uint8 LinePosition;
    uint16 TextPosition;
    uint16 TextLength;

    bool CloseOnEnter;

    int Font;
    int FontFlags;

    InputBoxScreen( uint8 lines, int font, int flags )
    {
        LinesCount = lines;
        TextPosition = 0;
        LinePosition = 0;
        Font = font;
        FontFlags = flags;
    }

    void OnShow( int p0, int p1, int p2 )
    {
        Text = "";
        LinePosition = 0;
        TextPosition = 0;
        LinesCount = p2;
        CloseOnEnter = FLAG( p1, INPUTBOX_CLOSE_ON_ENTER );
    }

    void OnHide( int p0, int p1, int p2 )
    {}

    void InsertField()
    {
        if( LinePosition < LinesCount )
        {
            uint8 fieldsLen = InputboxTexts.length(), count = 0;
            if( fieldsLen < 0 )
			{
                return;
			}
			
            while( InputboxTexts[ count ].Options.GetVisible() )
            {
                count++;
            }

            ChangeState( count, true );

            LinePosition = count;
        }
        else
		{
            Message( "Can't fit more text." );
		}
	}

    void RemoveField()
    {
        if( LinePosition > 0 )
        {
            uint8 fieldsLen = InputboxTexts.length(), count = fieldsLen - 1;
            if( count < 1 )
			{
                return;
			}
			
            while( !InputboxTexts[ count ].Options.GetVisible() )
            {
                count--;
            }

            ChangeState( count, false );

            LinePosition = count;
            InputboxTexts[ LinePosition ].Options.Text( "", Font, COLOR_GREEN, COLOR_GREEN, FontFlags );
        }
    }

    void ChangeState( uint8 count, bool state )
    {
        InputboxFiledsGraph[ count ].Options.SetVisible( state );
        InputboxTexts[ count ].Options.SetVisible( state );

        int offsetY = InputboxFiledsGraph[ count ].Options.GetSurfaceHeight();

        if( !state )
        {
            offsetY = ( offsetY - ( offsetY * 2 ) );
        }

        InputboxBottom.Options.Position( 0, InputboxFiledsGraph[ count ].Options.GetPosY() + offsetY );
        InputboxButtons[ 0 ].Options.Position( InputboxButtons[ 0 ].Options.GetPosX(), InputboxButtons[ 0 ].Options.GetPosY() + offsetY );
        InputboxButtons[ 1 ].Options.Position( InputboxButtons[ 1 ].Options.GetPosX(), InputboxButtons[ 1 ].Options.GetPosY() + offsetY );
        InputboxSign[ 1 ].Options.Position( InputboxSign[ 1 ].Options.GetPosX(), InputboxSign[ 1 ].Options.GetPosY() + offsetY );
        InputboxSign[ 2 ].Options.Position( InputboxSign[ 2 ].Options.GetPosX(), InputboxSign[ 2 ].Options.GetPosY() + offsetY );

    }

    bool KeyPressed( uint8 key, uint8 letter )
	{
        if( ( key == DIK_RETURN || key == DIK_NUMPADENTER ) && CloseOnEnter )
        {
            InputboxButtons[ 0 ].OnMouseClick( MOUSE_CLICK_LEFT );
            return true;
        }

        string text = "";
        bool newLine = false;
        do
        {
            text = InputboxTexts[ LinePosition ].Options.GetText();
            string tempText = text;
            InsertSimbol( tempText, letter );
            int w = InputboxTexts[ 0 ].Options.GetSurfaceWidth(), h = InputboxTexts[ 0 ].Options.GetSurfaceHeight(), tw = 0, th = 0, lines = 0;

            GetTextInfo( tempText, w, h, Font, FontFlags, tw, th, lines );

            if( lines > 1 )
                if( LinePosition + 1 > LinesCount )
                {
                    Message( "Can't fit more text." );
                    return false;
                }
                else
                {
                    InsertField();
                    newLine = true;
                    TextPosition = 0;
                }
            else
                newLine = false;
        }
        while( newLine );

        if( key != DIK_BACK )
        {
            InsertSimbol( text, letter );
            TextPosition++;
        }
        else if( text.length() > 0 )
        {
            text.resize( text.length() - 1 );
            TextPosition--;
        }
        else
        {
            RemoveField();
            newLine = true;
            TextPosition = text.length() - 1;
        }

        InputboxTexts[ LinePosition ].Options.Text( text, Font, COLOR_GREEN, COLOR_GREEN, FontFlags );

        return true;
    }

    void InsertSimbol( string& text, uint8 letter )
    {
        text.resize( text.length() + 1 );
        text[ text.length() - 1 ] = letter;
    }

    void InsertSimbols( string& text, uint16 pos, string& insertText )
    {
        string afterText = "", beforeText = "";
        for( uint16 i = 0, j = text.length(); i < j; ++i )
        {
            InsertSimbol( ( pos > i ? afterText : beforeText ), text[ i ] );
        }
        text = "" + afterText + insertText + beforeText;
    }

    void RemoveSimbol( string& text, uint16 pos )
    {
        string afterText = "", beforeText = "";
        for( uint16 i = 0, j = text.length(); i < j; ++i )
        {
            if( i == pos )
			{
                continue;
            }
			InsertSimbol( ( pos > i ? afterText : beforeText ), text[ i ] );
        }

        text = "" + afterText + beforeText;
    }

    void ClipboardInsert()
    {
        string clip = "";
        CBPaste( clip );

        if( clip == "" )
		{
            return;
		}
		
        for( uint16 i = 0, j = clip.length(); i < j; ++i )
        {
            if( !KeyPressed( DIK_LEFT, clip[ i ] ) )
			{
                break;
			}
		}
    }

    bool GetAllText( string& text )
    {
        text = "";
        for( uint8 i = 0, j = InputboxTexts.length(); i < j; ++i )
        {
            text += InputboxTexts[ i ].Options.GetText();
        }

        return text == "" ? false : true;
    }

    void MoveCursorLeft( string& text )
    {
        string textBefore = "", textAfter = "";
        for( uint16 i = 0, j = text.length(); i < j; ++i )
        {
            if( TextPosition < i )
            {
                InsertSimbol( textBefore, text[ i ] );
            }
            else if( TextPosition > i )
            {
                InsertSimbol( textAfter, text[ i ] );
            }
            else
            {
                InsertSimbol( textBefore, CONSOLE );
            }
        }

        text = "" + textBefore + textAfter;
    }

    void MoveCursorRight( string& text )
    {
        string textBefore = "", textAfter = "#";
        for( uint16 i = 0, j = text.length(); i < j; ++i )
        {
            if( TextPosition < i )
            {
                InsertSimbol( textBefore, text[ i ] );
            }
            else if( TextPosition > i )
            {
                InsertSimbol( textAfter, text[ i ] );
            }
        }
        text = "" + textBefore + textAfter;
    }
}

class InputBoxButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    IGUIElementOpt@ Options;
    InputBoxScreen@ Instance;
    uint8 ButtonType;

    InputBoxButton( InputBoxScreen & instance, uint8 btnType )
    {
        @Instance = instance;
        ButtonType = btnType;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputboxButtons[ ButtonType ] = this;
    }

    void OnMouseClick( int click )
    {
        string text = "";
        if( ButtonType == 0 )
		{
            if( Instance.GetAllText( text ) )
			{
                RunServerScriptUnsafe( funcName, 0, 0, 0, text, null );
            }
			else
            {
                Message( "Empty text." );
                return;
            }
		}
        ::HideScreen( 0, 0, 0, 0 );
    }
}

class InputBoxElement : IGUIElementCallbackInit
{
    InputBoxScreen@ Instance;
    IGUIElementOpt@ Options;
    uint8 Type;

    InputBoxElement( InputBoxScreen & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputboxFiledsGraph[ Type ] = this;

        if( Type > 0 )
		{
            Options.SetVisible( false );
		}
    }
}

class InputBoxWindowName : IGUIElementCallbackInit
{
    InputBoxScreen@ Instance;
    IGUIElementOpt@ Options;

    InputBoxWindowName( InputBoxScreen & instance )
    {
        @Instance = instance;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputboxWindowName = this;

        string text = ( windowName.length() > 0 ? windowName : "Input text:" );

        Options.Text( "" + text, FONT_BIG, COLOR_SAND, COLOR_SAND, FT_CENTERX | FT_CENTERY );
    }

}

class InputBoxText : IGUIElementCallbackInit
{
    InputBoxScreen@ Instance;
    IGUIElementOpt@ Options;
    uint8 Type;

    InputBoxText( InputBoxScreen & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputboxTexts[ Type ] = this;

        if( Type > 0 )
		{
            Options.SetVisible( false );
		}
    }
}

class InputBoxBottom : IGUIElementCallbackInit
{
    InputBoxScreen@ Instance;
    IGUIElementOpt@ Options;

    InputBoxBottom( InputBoxScreen & instance )
    {
        @Instance = instance;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputboxBottom = this;
    }

}

class InputBoxSign : IGUIElementCallbackInit
{
    InputBoxScreen@ Instance;
    IGUIElementOpt@ Options;
    uint8           Type;

    InputBoxSign( InputBoxScreen & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputboxSign[ Type ] = this;
    }

}

void ShowInputBox( int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    string@[] @ text = split( param3, "#" );
    if( text.length() > 1 )
    {
        funcName = text[ 0 ];
        windowName = text[ 1 ];
    }
    else
	{
        funcName = param3;
	}
	
    ShowScreen( CLIENT_SCREEN_INPUTBOX, param0, param1, 0 );
}

void InputBoxKeyPressed( uint8 key, uint8 kbData )
{
    inputboxScreen.KeyPressed( key, kbData );
}

void InputBoxClipboardInsert()
{
    inputboxScreen.ClipboardInsert();
}

#endif // CLIENT_INPUTBOX