//Color palette, for choosing colors
#ifndef CLIENT_SCREEN_PALETTE_MODULE
#define CLIENT_SCREEN_PALETTE_MODULE

#include "client_gui_h.fos"
#include "_utils.fos"
#include "client_screen_palette_h.fos"
#include "client_karma_h.fos"

class ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt@ screenOpt;
    PaletteElement@ Palette;
	PaletteOkButton@ OkButton;
    int ScreenType; // Current type for screen (colorizing critter, etc.)
    int Arg0;
    int Arg1;

    void OnShow( int type, int arg0, int arg1 )
    {
        @screenOpt = GUI_GetScreenOptions();
        ScreenType = type;
        Arg0 = arg0;
        Arg1 = arg1;
    }

    void OnHide( int p0, int p1, int p2 )
    {}
}

class PaletteElement : IGUIElementCallbackMouseClick
{
	IGUIElementOpt @ elementOpt;
    ScreenMain@ Instance;
	
	uint color = 0;

    PaletteElement( ScreenMain& instance )
    {
        @Instance = instance;
    }

    void OnMouseClick( int click )
    {
        uint posX = __MouseX - Instance.screenOpt.GetPosX() - 51;
        uint posY = __MouseY - Instance.screenOpt.GetPosY() - 51;

        if( posX < 256 && posX >= 0 && posY < 256 && posY >= 0 )
        {
            uint r = 0, g = 0, b = 0, bright = 0;
            // Red
            if( posX < 43 || posX >= 213 ) r = 255;
            else if( posX >= 43 && posX < 85 ) r = 255 - ( posX - 43 ) * 6;
            else if( posX >= 85 && posX < 171 ) r = 0;
            else if( posX >= 171 && posX < 213 ) r = ( posX - 171 ) * 6;
            // Green
            if( posX < 43 ) g = ( posX ) * 6;
            else if( posX >= 43 && posX < 128 ) g = 255;
            else if( posX >= 128 && posX < 171 ) g = 255 - ( posX - 128 ) * 6;
            else if( posX >= 171 ) g = 0;
            // Blue
            if( posX < 85 ) b = 0;
            else if( posX >= 85 && posX < 128 ) b = ( posX - 85 ) * 6;
            else if( posX >= 128 && posX < 213 ) b = 255;
            else if( posX >= 213 ) b = 255 - ( posX - 213 ) * 6;
            // Bright
            if( posY < 128 )
            {
                bright = ( 128 - posY ) * 2;
                r = r + bright;
                g = g + bright;
                b = b + bright;
            }
            else
            {
                bright = ( posY - 128 ) * 2;
                r = r - bright;
                g = g - bright;
                b = b - bright;
            }
            color = __GetColor( r, g, b );
            Message( "|" + color + " Sample." );
        }
    }
}

class PaletteOkButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    IGUIElementOpt@ Options;
    ScreenMain@ Instance;

    PaletteOkButton( ScreenMain& instance )
    {
        @Instance = instance;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.OkButton = this;
    }

    void OnMouseClick( int click )
    {
		if(Instance.ScreenType == PALETTE_TYPE_CRITTER)
        {
            if(Instance.Palette.color != 0 && Instance.Arg0 != 0)
            {
                SetCritterColor(Instance.Arg0, Instance.Palette.color);
                SaveKarma();
            }
        }

        HideScreen( 0, 0, 0, 0 );
		ChangeCursor( GetLastCursor() );
    }
}

void InitPaletteScreen()
{
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_PALETTE, "color_palette.png" )
    .CallbackHide( screenMain )
    .CallbackShow( screenMain )
    .AutoCursor( true, CURSOR_DEFAULT );
	
    PaletteElement palette( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_PALETTE, "", 305, 348 )
    .CallbackMouseClick( palette )
    .Position( 0, 0, 350, 380 );
    @screenMain.Palette = @palette;

	PaletteOkButton OkButton( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_PALETTE, "MENUUP.FRM", 305, 348 )
    .CallbackInit( OkButton )
    .CallbackMouseClick( OkButton )
    .DownPic( "MENUDOWN.FRM" );
    @screenMain.OkButton = @OkButton;
}

void OpenPaletteScreen(int scrType, int arg0, int arg1)
{
	ShowScreen( CLIENT_SCREEN_PALETTE, scrType, arg0, arg1 );
}

#endif //CLIENT_SCREEN_PALETTE_MODULE