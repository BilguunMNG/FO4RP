// Author: cvet, rifleman17 - rewritten by Frank Kost, eddited by Anuri&Terpsic Mims

#include "_macros.fos"
#include "_colors.fos"
#include "_msgstr.fos"

#define MIN_BET                ( 25 )
#define MAX_BET                ( 100 )
#define STR_ONEHANDED_RING     ( 2000 )

bool SlotMachineCheck( Critter& cr, Item@ cash, Item@ target ) //exported - проверки на разное перед началом работы
{
    Map@ map = cr.GetMap();
    if( !valid( map ) ) 
    {
        return false;
    }
    if( !valid( cash ) || !valid(target) )
    {
        return false;
    }
       uint16 cashPid = cash.GetProtoId();
    if( cashPid != PID_BOTTLE_CAPS )
    {
        return false;
    }
    uint16 SlotMachine = target.GetProtoId();
    if( SlotMachine != PID_SLOT_MACHINE && SlotMachine != PID_SLOT_MACHINE2 )
    {
        return false;
    }
    SlotMachineWork( cr, cash, target );
    return true;
}

bool SlotMachineWork( Critter& cr, Item& cash, Item& target )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
		return false;
	
	uint bet = MIN_BET;
    if( valid( cash ) )
    {
        bet = cash.GetCount();
    }
    else
    {
        bet = _CritCountItem( cr, PID_BOTTLE_CAPS );
        if( bet < MIN_BET )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
            return false;
        }
    }
    if( cash.CritSlot != SLOT_HAND1 && bet > MAX_BET ) // деньги из руки играем минимальную ставку, инвентарь - до максимальной
        bet = MAX_BET;
	else
		bet = MIN_BET;

	Item@ machineCaps = target.GetItem( PID_BOTTLE_CAPS, 0 );
	if(!valid(machineCaps)) // денег вообще нет, совсем
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 В автомате закончились деньги." );
		return false; 
	}
	else
	{
		uint machineCapsCount = machineCaps.GetCount(); // айтем есть, достаем кол-во.
		if(machineCapsCount < bet)
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 В автомате не хватает денег для  для покрытия ставки." );
			return false; 
		}
		
		cr.DeleteItem( PID_BOTTLE_CAPS, bet );
		cr.Say( SAY_NETMSG, "-" + bet + "$" );
		target.AddItem( PID_BOTTLE_CAPS, bet, 0 );
		map.SetTextMsg( target.HexX, target.HexY, COLOR_GRAY, TEXTMSG_TEXT, STR_ONEHANDED_RING );
			
		uint8 roll = Random( 1, 100 );
		if( roll >= ( 82 - cr.Skill[ SK_GAMBLING ] / 10 ) )
		{
			if( Random( 1, 100 ) == 100 )
			{
				if( machineCapsCount >= 5000 )
					bet*=10;
				else if( machineCapsCount <= 4999 && machineCapsCount >= 4500 )
					bet*=9;
				else if( machineCapsCount <= 4499 && machineCapsCount >= 4000 )
					bet*=8;
				else if( machineCapsCount <= 3999 && machineCapsCount >= 3500 )
					bet*=7;
				else if( machineCapsCount <= 3499 && machineCapsCount >= 3000 )
					bet*=6;
				else if( machineCapsCount <= 2999 && machineCapsCount >= 2500 )
					bet*=5;
				else if( machineCapsCount <= 2499 && machineCapsCount >= 2000 )
					bet*=4;
				else if( machineCapsCount <= 1999 && machineCapsCount >= 300 )
					bet*=3;
				cr.AddItem( PID_BOTTLE_CAPS, bet );
				cr.Say( SAY_NETMSG, "|0xFFFF00 ДЖЕЕЕЕЕЕКПОТ!!! " + bet + "$" );
				map.PlaySound( "BIGWIN1.ACM", cr.HexX, cr.HexY, 20 );
				target.AddItem( PID_BOTTLE_CAPS, -bet, 0 );
				return true;
			}
			else
			{
				cr.AddItem( PID_BOTTLE_CAPS, bet*2 );
				cr.Say( SAY_NETMSG, "|0xFFFF00 Выигрыш: " + bet*2 + "$" );
				map.PlaySound( "BIGWIN.ACM", cr.HexX, cr.HexY, 10 );
				target.AddItem( PID_BOTTLE_CAPS, -bet*2, 0 );
				return true;
			}
		}
		else
		{
			cr.Say( SAY_NETMSG, "|0xFF0000 Проигрыш!" );
			map.PlaySound( "LOSER.ACM", cr.HexX, cr.HexY, 10 );
		}
	}
	return true;
}

/*
// создание слот-машины из айтема с нужным пидом, возможный анахронизм.
void _SlotMachine( Critter& cr, int param0, int param1, int param2 )
{
	if( param0 == 0 || param1 != 0 || param2 != 0 )
	{
		cr.Say( SAY_NETMSG, "Параметры вызова ф-и: номер автомата, 0, 0." );
		return;
	}
	
	Item@ target = GetItem( param0 );
	if(!valid(target) )
	{
		cr.Say( SAY_NETMSG, "Объект не найден." );
		return;
	}
	
	if( target.GetProtoId() != PID_SLOT_MACHINE && target.GetProtoId() != PID_SLOT_MACHINE2 )
	{
		cr.Say( SAY_NETMSG, "Данный объект не является слот-машиной! Подходящие прототипы: 832 и 834." );
		return;
	}
	
	cr.Say( SAY_NETMSG, "Слот-машина активирована." );
    target.SetScript( "item@_InitSlotMachine" );
    target.Update();
}

// инициализация
void _InitSlotMachine( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_SlotMachineUse" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "e_SlotMachineOnMe" );
}

bool e_SlotMachineOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    if( usedItem.GetProtoId() != PID_BOTTLE_CAPS )
		return false;
    SlotMachineWork( cr, item, SKILL_PICK_ON_GROUND, usedItem );
    return true;
}

bool e_SlotMachineUse( Item& item, Critter& cr, int skill )
{
	Map@ map = cr.GetMap();
	if(!valid(map))return true;
	
    Item@ key1 = cr.GetItem( PID_SLOT_MACHINE_KEY, int( -1 ) );
    switch( skill )
    {
    case SK_REPAIR: {
        if( item.LockerComplexity != 0 )
        {
            cr.Say( SAY_NETMSG, "Замок на автомате впорядке." );
            return true;
        }
		if( valid( key1 ) )
		{
            item.LockerId = key1.LockerId;
            item.LockerComplexity = 400;
            item.Update();
            cr.Say( SAY_NETMSG, "Вы настроили замок на автомате под ваш универсальный ключ." );
            return true;
		}
        else
        {
            Item @ key = cr.AddItem( PID_SLOT_MACHINE_KEY, 1 );
            uint16 rnd = Random( 1, 65534 );
            key.LockerId = rnd;
            item.LockerId = rnd;
            item.LockerComplexity = 400;
            item.Update();
            key.Update();
            cr.Say( SAY_NETMSG, "Вы сделали новый замок на автомате, универсальный ключ в кармане." );
            return true;
        }
	}
    case SK_LOCKPICK: {
		if( isGM( cr ) )
		{
			item.LockerComplexity = 0;
			cr.Say( SAY_NETMSG, "Вы убрали замок с автомата." );
			return true;
		}
		
		cr.Animate( 0, ANIM2_USE, null, false, true );
        cr.Say( SAY_EMOTE_ON_HEAD, "Пытается взломать автомат" );
		map.SetText( item.HexX, item.HexY, COLOR_RED, ":скрежет:" );
		
        if( cr.StatBase[ ST_AGILITY ] * 2 > Random( 15, 25 - ( cr.StatBase[ ST_LUCK ] / 2 ) ) )
        {
			cr.Say( SAY_NETMSG, "Попытка сзлома безуспешна." );
            return true;
        }
        else
        {
			cr.Say( SAY_NETMSG, "Вы взломали.. ложный контейнер для воров. Вот досада! Вы не имеете понятия, где спрятаны настоящие деньги." );
			cr.ParamBase[ ST_LAST_CONT_ID ] = 0;
            cr.ShowContainer( null, item, item.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            return true;
        }
	}
    case SKILL_PICK_ON_GROUND: {
        if( item.LockerComplexity == 0 || ( @key1 != null && key1.LockerId == item.LockerId ) ) {
			if( item.LockerComplexity != 0 )
				cr.Say( SAY_EMOTE_ON_HEAD, "Открывает автомат спецключом" );
			cr.ParamBase[ ST_LAST_CONT_ID ] = 0;
            cr.ShowContainer( null, item, item.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
			return true;
        }
		if( cr.CountItem( PID_BOTTLE_CAPS ) >= 25 )
        {
            SlotMachineWork( cr, item, skill, null );
            return true;
        }
        else
        {
            cr.Say( SAY_NETMSG, "Вам нужно хотя бы 25$ для начала игры." );
            return true;
        }
	}
	case SK_TRAPS: {
		if( item.LockerComplexity == 0 || ( @key1 != null && key1.LockerId == item.LockerId ) ) {
			cr.Say( SAY_EMOTE_ON_HEAD, "Возится с автоматом" );
			if( item.Val6 > 0 )
			{
				map.SetText( item.HexX, item.HexY, COLOR_GRAY, ":звон монет:" );
				item.AddItem( PID_BOTTLE_CAPS, item.Val6, 0 );
				item.Val6 = 0;
			}
			if( item.Val6 < 0 )
			{
				cr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_fillMoneyInSlotMachine" );
				cr.Say( SAY_DIALOGBOX_TEXT, "В автомате нехватка налички размером в " + item.Val6 + "$." );
				cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Засыпать " + item.Val6 + "$" );
				cr.ParamBase[ ST_LAST_CONT_ID ] = item.Id;
			}
			return true;
		}
		break; }
	}

    return false;
}

void answer_fillMoneyInSlotMachine( Critter& cr, uint answerI, string& answerS )
{
	Map@ map = cr.GetMap();
	if(!valid(map))return;
	
	if( cr.ParamBase[ ST_LAST_CONT_ID ] == 0 ) return;
	Item@ onehanded = GetItem( cr.ParamBase[ ST_LAST_CONT_ID ] );
	if( !valid( onehanded ) || onehanded.Val6 >= 0 ) return;
	
	int count = CLAMP( -onehanded.Val6, 0, int( cr.CountItem( PID_BOTTLE_CAPS ) ) );
	if( count == 0 ) return;
	
	cr.Say( SAY_EMOTE_ON_HEAD, "Засыпает деньги в автомат" );
	map.SetText( onehanded.HexX, onehanded.HexY, COLOR_GRAY, ":звон монет:" );
	onehanded.Val6 += count;
	_CritDeleteItem( cr, PID_BOTTLE_CAPS, count );
} */

/* bool SlotMachineWork( Critter& cr, Item& onehanded, int skill, Item@ item )
{
    if( skill != SKILL_PICK_ON_GROUND || ( valid( item ) && item.GetProtoId() != PID_BOTTLE_CAPS ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
        return true;
    }
    // Сheck map weekly OneHanded limit Expire
    Map@ map = cr.GetMap();
    if( !valid( map ) )
		return true;
		
	// Count bet
    uint bet = MIN_BET;
    if( valid( item ) )
    {
        // Set all money
        bet = item.GetCount();
    }
    else
    {
        // Check money
        bet = _CritCountItem( cr, PID_BOTTLE_CAPS );
        if( bet < MIN_BET )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
            return true;
        }
    }
    // Check max bet
    if( item.CritSlot != SLOT_HAND1 && bet > MAX_BET ) // деньги из руки играем минимальную ставку, инвентарь - до максимальной
        bet = MAX_BET;
	else
		bet = MIN_BET;
    // Set text
	Item@ machineCaps = onehanded.GetItem( PID_BOTTLE_CAPS, 0 );
	if(!valid(machineCaps)) // денег вообще нет, совсем
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 В автомате закончились деньги." );
		return true; 
	}
	else
	{
		uint machineCapsCount = machineCaps.GetCount(); // айтем есть, достаем кол-во.
		if(machineCapsCount < bet)
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 В автомате не хватает денег для  для покрытия ставки." );
			return true; 
		}
		if( valid( map ) )
		{
		map.SetTextMsg( onehanded.HexX, onehanded.HexY, COLOR_GRAY, TEXTMSG_TEXT, STR_ONEHANDED_RING );
		if( Random( 1, 100 ) >= ( 81 - cr.Skill[ SK_GAMBLING ] / 10 ) )
			{
			// win
				cr.AddItem( PID_BOTTLE_CAPS, bet );
				cr.Say( SAY_NETMSG, "+" + bet + "$" );
				map.PlaySound( "BIGWIN.ACM", cr.HexX, cr.HexY, 10 );

				if( onehanded.GetType() == ITEM_TYPE_CONTAINER )
					onehanded.AddItem( PID_BOTTLE_CAPS, -bet, 0 );
			}
			// Loose
			else
			{
				cr.DeleteItem( PID_BOTTLE_CAPS, bet );
				cr.Say( SAY_NETMSG, "-" + bet + "$" );
				map.PlaySound( "LOOSER.ACM", cr.HexX, cr.HexY, 10 );

				if( onehanded.GetType() == ITEM_TYPE_CONTAINER )
					onehanded.AddItem( PID_BOTTLE_CAPS, bet, 0 );	
			}
		}
	}
	return true;
} */

// Старый код, убрал все вниз, чтобы не мешалось	

/* #define MapLimitGet            GetData( 60 )
#define MapLimitSet            # (value)  SetData( 60, value )
#define TimeRenewGet           GetData( 61 )
#define TimeRenewSet           # (value) SetData( 61, value )
#define RENEW_TIME             ( 60 * 60 * 24 * 7 ) // Обновление лимитов карты на автоматы раз в неделю
#define MAX_ONEHANDED_LIMIT    ( 8000 )             // Максимальная сумма, которую можно выжать из автоматов(без учета джекпотов)
#define STR_EMPTY              ( 2001 )             // Реплика "деньги в автомате закончились"
#define START_BET              ( 25 )

bool s_Onehanded( Critter& cr, Scenery& onehanded, int skill, Item@ item )
{
    if( skill != SKILL_PICK_ON_GROUND || ( valid( item ) && item.GetProtoId() != PID_BOTTLE_CAPS ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
        return true;
    }
	
    Map@ map = cr.GetMap();
    if( !valid( map ) )
        return true;

    // Count bet
    uint bet = START_BET;
    if( valid( item ) )
    {
        // Set all money
        bet = item.GetCount();
    }
    else
    {
        // Check money
        bet = _CritCountItem( cr, PID_BOTTLE_CAPS );
        if( bet < MIN_BET )
        {
            cr.Say( SAY_NETMSG, "Вам нужно хотя бы 5$ для начала игры." );
            return true;
        }
        if( bet > START_BET )
            bet = START_BET;
    }

    // Check max bet
    if( bet > MAX_BET )
        bet = MAX_BET;

    // Set text
    if( valid( map ) )
        map.SetTextMsg( onehanded.HexX, onehanded.HexY, COLOR_GRAY, TEXTMSG_TEXT, STR_ONEHANDED_RING );

    // Win
    if( Random( 1, 100 ) >= ( 80 - cr.Skill[ SK_GAMBLING ] / 10 ) )
    {
        cr.AddItem( PID_BOTTLE_CAPS, bet );
        cr.Say( SAY_NETMSG, "+" + bet + "$" );
    }
    // Loose
    else
    {
        cr.DeleteItem( PID_BOTTLE_CAPS, bet );
        cr.Say( SAY_NETMSG, "-" + bet + "$" );
    }

    return true;
	
  if(skill!=SKILL_PICK_ON_GROUND || (valid(item) && item.GetProtoId()!=PID_BOTTLE_CAPS))
        {
                cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
                return true;
        }

        // Сheck map weekly OneHanded limit Expire
        Map@ map=cr.GetMap();
        if(!valid(map)) return true;

        if(map.TimeRenewGet<int(__FullSecond))
        {
                map.MapLimitSet(MAX_ONEHANDED_LIMIT);
                map.TimeRenewSet(__FullSecond+RENEW_TIME);
        }

        int OnehandedMoney=map.MapLimitGet;

        if(OnehandedMoney<=0)
        {
                cr.SayMsg(SAY_NETMSG,TEXTMSG_TEXT,STR_EMPTY);
                return true;
        }

        // Count bet
        uint bet=START_BET;
        if(valid(item))
        {
                // Set all money
                bet=item.GetCount();
        }
        else
        {
                // Check money
                bet=_CritCountItem(cr,PID_BOTTLE_CAPS);
                if(bet<MIN_BET)
                {
                        cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
                        return true;
                }
                if(bet>START_BET) bet=START_BET;
        }

        // Check max bet
        if(bet>MAX_BET) bet=MAX_BET;

        // Set text
        if(valid(map)) map.SetTextMsg(onehanded.HexX,onehanded.HexY,COLOR_GRAY,TEXTMSG_TEXT,STR_ONEHANDED_RING);

        // Calculate
        int gambling=cr.Skill[SK_GAMBLING];
        if(OnehandedMoney<0) gambling+=OnehandedMoney;
        gambling=CLAMP(gambling,6,95);

        // Win
        if(Random(1,100)>=(70-cr.Skill[SK_GAMBLING]/10))
        {
                // Bonuses
                if(Random(0,99)==77) bet*=10;
                if(Random(0,999)==777) bet*=100;
                if(Random(0,9999)==7777) bet*=1000;

                // Add money
                cr.AddItem(PID_BOTTLE_CAPS,bet);
                if(bet>MAX_BET) cr.Say(SAY_NETMSG,"***JACKPOT***");
                cr.Say(SAY_NETMSG,"+"+bet+"$");
                OnehandedMoney-=bet;

        }
        // Loose
        else
        {
                // Sub money
                cr.DeleteItem(PID_BOTTLE_CAPS,bet);
                cr.Say(SAY_NETMSG,"-"+bet+"$");
                OnehandedMoney+=bet;

        }

        map.MapLimitSet(OnehandedMoney);
        return true;
}
}*/


// из ф-ции bool SlotMachineWork( Critter& cr, Item& onehanded, int skill, Item@ item )
/*	if(skill!=SKILL_PICK_ON_GROUND || (valid(item) && item.GetProtoId()!=PID_BOTTLE_CAPS))
        {
                cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
                return true;
        }

        // Сheck map weekly OneHanded limit Expire
        Map@ map=cr.GetMap();
        if(!valid(map)) return true;

        if(map.TimeRenewGet<int(__FullSecond))
        {
                map.MapLimitSet(MAX_ONEHANDED_LIMIT);
                map.TimeRenewSet(__FullSecond+RENEW_TIME);
        }
        Item @ money = onehanded.GetItem(PID_BOTTLE_CAPS, 0);
        int OnehandedMoney=(valid(money)?money.GetCount():0);//map.MapLimitGet;

        if(OnehandedMoney<=0)
        {
                cr.SayMsg(SAY_NETMSG,TEXTMSG_TEXT,STR_EMPTY);
                return true;
        }

        // Count bet
        uint bet=START_BET;
        if(valid(item))
        {
                // Set all money
                bet=item.GetCount();
        }
        else
        {
                // Check money
                bet=_CritCountItem(cr,PID_BOTTLE_CAPS);
                if(bet<MIN_BET)
                {
                        cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
                        return true;
                }
                if(bet>START_BET) bet=START_BET;
        }

        // Check max bet
        if(bet>MAX_BET) bet=MAX_BET;

        // Set text
        if(valid(map)) map.SetTextMsg(onehanded.HexX,onehanded.HexY,COLOR_GRAY,TEXTMSG_TEXT,STR_ONEHANDED_RING);

        // Calculate
        int gambling=cr.Skill[SK_GAMBLING];
        if(OnehandedMoney<0) gambling+=OnehandedMoney;
        gambling=CLAMP(gambling,6,95);

        // Win
        if(gambling>=Random(1,100))
        {
                // Bonuses
                if(Random(0,99)==77) bet*=10;
                if(Random(0,999)==777) bet*=100;
                if(Random(0,9999)==7777) bet*=1000;

                // Add money
                cr.AddItem(PID_BOTTLE_CAPS,bet);
                if(bet>MAX_BET) cr.Say(SAY_NETMSG,"***JACKPOT***");
                cr.Say(SAY_NETMSG,"+"+bet+"$");
                if(bet < 50) cr.StatBase[ST_EXPERIENCE]+=Random(1,2); else cr.StatBase[ST_EXPERIENCE]+= bet / 10;
                OnehandedMoney-=bet;

        }
        // Loose
        else
        {
                // Sub money
                cr.DeleteItem(PID_BOTTLE_CAPS,bet);
                cr.Say(SAY_NETMSG,"-"+bet+"$");
                OnehandedMoney+=bet;
        }

        //map.MapLimitSet(OnehandedMoney);
        if(OnehandedMoney>bet) money.SetCount(OnehandedMoney); else DeleteItem(money);
        return true;*/

