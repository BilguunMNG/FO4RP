#ifndef FOFMOD_MODULE
#define FOFMOD_MODULE


#include "fofmod_h.fos"
#include "_macros.fos"



// Read fofmod.cpp in scripts/fmod/src directory for documentation AS interface registering section
// API exposes fmod features as directly as possible, fmod documentation should explain on how fofmod API supposed to work.
// https://fmod.com/resources/documentation-api?version=2.0&page=core-api.html



#define FOFMOD_CHANNEL_COUNT ( 32 ) // 32 is okay, Range: [0, 4095]


//Translate hex coordinates into more human coordinates: X is right and Y is down
void CoordinatesHexToGrid(int x, int y, float &out ox, float &out oy)
{
	const float sqrt3 = 1.732050807;
	int div = x / 2;
	y += div;

	ox = sqrt3 * (x - y / 2.0);
	oy = y * 3.0 / 2.0;
}


#ifdef __CLIENT

#pragma bindfunc "void dummy_fmod() -> fofmod_client.dll CLIENT"	// to trigger entry point from engine

#define FOFMOD_DEBUG

dictionary PlayingSounds;

bool FOFMOD_Initialize()
{
	bool result = FMOD_Initialize( FOFMOD_CHANNEL_COUNT );
	if( result )
	{
		FMOD_Set3DListenerUp( 0.0f, 0.0f, 1.0f ); // UP is towards Camera, right handedness
		FMOD_Set3DListenerForward( 0.0f, -1.0f, 0.0f ); // Negative Y is forward
		#ifdef FOFMOD_DEBUG
		FOFMOD_Test();
		#endif
	}

	return result;
}

void FOFMOD_Update()
{
	CritterCl@ chosen = GetChosen();
	if( valid ( chosen ) )	
	{
		float ox = 0.0f, oy = 0.0f;
		CoordinatesHexToGrid( chosen.HexX, chosen.HexY, ox, oy );
		FMOD_Set3DListenerPosition( ox, oy, 0.0f );
		Message(" Position update " + ox + ":"  + oy );
	}
	else
	{
		FMOD_Set3DListenerPosition( 0.0f, 0.0f, 0.0f );
	}
	
	FMOD_Update();
}


void FOFMOD_Test()
{
	Log("Preloading sounds directory at test");
	//FMOD_PreloadSounds( ".\\test" );
	FMOD_TouchArchive("./data/forp_content.zip");
	FOFMOD_TestSounds();
}

void FOFMOD_TestSounds()
{	
	//FMODChannel@ testSound = FMOD_PlayMusic("drugs1.ogg", false);
	//FMODChannel@ testSound1 = FMOD_PlaySound("sounds/music/drugs1.ogg", false);

	//FMODChannel@ testSound2 = FMOD_PlaySound("./test/sounds/sfx/c.ogg", false);

	// uint i = 32;
	// while( ( (i--) > 0) )
	// {
	// 	FMOD_PlaySound("./test/sounds/sfx/c.ogg", false);
	// }
}

void __PlaySoundFile( int hexX, int hexY, int soundId, string@ path, int[]@ param4)
{
	Log("Playing from remote sound id " + soundId + " " + path );
	FMODChannel@ sound = FMOD_PlaySound( path, false );
	//if( ( hexX > 0 ) && ( hexY > 0 ) )
	//{
		float ox = 0.0f, oy = 0.0f;
		CoordinatesHexToGrid( hexX, hexY, ox, oy );
		sound.Set3DPosition( ox, oy, 0.0f );
		sound.Set3DMinMaxDistance( 3.0f, 12.0f ); 
		Log("Play at position " + ox + ":" + oy );
	//}

	PlayingSounds.set( ""+soundId, @sound );
}

#endif // __CLIENT



#ifdef __SERVER


#endif // __SERVER

#endif // FOFMOD_MODULE