#ifndef PLAYER_MENU
#define PLAYER_MENU

#include "_utils.fos"

import void unsafe_VoiceVolumeAdjust( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_sleep( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_selfLex( Critter& player, int, int, int, string@ text, int[]@ ) from "general_unsafe";
import void unsafe_addLexem( Critter& player, int, int, int, string@ text, int[]@ ) from "general_unsafe";
import void ArmorEffects( Critter& cr, int8 sign ) from "critter_item_movement";
import void unsafe_killself( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) from "suicide";

void unsafe_StartPlayerMenu( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	StartPlayerMenu( player );
}

void StartPlayerMenu( Critter& player )
{
    Map@ map = player.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenu( map );
    iDialogBox@ menu = OpenMenu( player, "Player menu", handler );
}

class PlayerMenu: CenteredMenuHandler
{
    uint map_id;
	
    PlayerMenu( Map& map )
	{
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( map is null )
		{
            return false;
        }

		if( menu.Button( "Hide Face" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE );
			int8 sign = FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) ? 1 : 0;
			ArmorEffects( player, sign );
			return true;
		}
		
		if( menu.Button( "Hide Desc." ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC );
			return true;
		}
		
		if( menu.Button( "Hide Typing" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING );
			return true;
		}
		
		if( menu.Button( "Radio Safety" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY );
			return true;
		}
		
		if( menu.Button( "Item Visor" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS );
			return true;
		}

		if( menu.Button( "Increase Speech" ) )
		{
			unsafe_VoiceVolumeAdjust( player, -5, 0, 0, null, null );
			return true;
		}
		
		if( menu.Button( "Decrease Speech" ) )
		{
			unsafe_VoiceVolumeAdjust( player, 5, 0, 0, null, null );
			return true;
		}
		
		if( menu.Button( "Actions" ) )
		{
			StartPlayerMenuActions( player );
			return false;
		}
		return true;
	}
	
    string@ Description( Critter& player )
	{
		string info = "";

		info += "Hide face: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nHide description: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nHide typing: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nRadio safety: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nItem visor: [ |0xFFFF00 " + ( FLAG( player.Param[PLAYER_FLAGS], PLAYER_FLAG_SHOW_ITEMS ) ? "On" : "Off" ) + " |0x3CF800 ]";
		
		int volume = CLAMP( 50 - player.Stat[ ST_SPEECH_VOLUME ], 1, 50 );
		info += "\nSpeech volume: [ |0xFFFF00 " + volume + " |0x3CF800 ]";
		
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}


void StartPlayerMenuActions( Critter& player )
{
    Map@ map = player.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenuActions( map );
    iDialogBox@ menu = OpenMenu( player, "Player Action menu", handler );
}

class PlayerMenuActions: CenteredMenuHandler
{
    uint map_id;
	
    PlayerMenuActions( Map& map )
	{
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( map is null )
		{
            return false;
        }

		if( player.ParamBase[ CR_SLEEPING_STATE ] == 0 )
		{
			if( menu.Button( "Lie on belly" ) )
			{
				unsafe_sleep( player, 1, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Lie on back" ) )
			{
				unsafe_sleep( player, 0, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Attempt Suicide" ) )
			{
				unsafe_killself( player, 0, 0, 0, null, null );
				return false;
			}
		}
		else
		{
			if( menu.Button( "Get up" ) )
			{
				unsafe_sleep( player, 0, 0, 0, null, null );
				return true;
			}
		}

		if( menu.ButtonSay( "Describe self", "input description" ) )
		{
            string lex = menu.GetSayValue();
			unsafe_selfLex( player, 0, 0, 0, lex, null );
			return false;
		}
		
		Item@ hand = _CritGetItemHand( player );
		if( valid( hand ) )
		{			
			if( menu.ButtonSay( "Describe item", "input description" ) )
			{
				string lex = menu.GetSayValue();
				unsafe_addLexem( player, 0, 0, 0, lex, null );
				return false;
			}
		}
		
		if( menu.Button( "Load Avatar" ) )
		{
            player.RunClientScript( "linc@unsafe_PlayerAuth", 0, 0, 0, null, null );
			return true;
		}
		
		if( menu.Button( "Check Id" ) )
		{
            player.Say( SAY_NETMSG, "Your Id: |0xFFFF00 " + player.Id );
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			StartPlayerMenu( player );
			return false;
		}
		return true;
	}
	
    string@ Description( Critter& player )
	{
		string info = "Choose your action:";
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}
#endif // PLAYER_MENU