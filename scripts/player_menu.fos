#ifndef PLAYER_MENU
#define PLAYER_MENU

#include "_utils.fos"
#include "critter_item_movement_h.fos"

import void unsafe_VoiceVolumeAdjust( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_sleep( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";
import void unsafe_selfLex( Critter& player, int param0, int param1, int param2, string@ text, int[]@ param4 ) from "general_unsafe";
import void unsafe_addLexem( Critter& player, int param0, int param1, int param2, string@ text, int[]@ param4 ) from "general_unsafe";
import void unsafe_rolling( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) from "general_unsafe";
import void unsafe_relax ( Critter& player, int isBack, int isRemote, int param2, string@ param3, int[] @ param4 ) from "general_unsafe";

import void unsafe_killself( Critter& player, int param0, int param1, int param2, string@ param3, int[]@ param4 ) from "suicide";

void unsafe_StartPlayerMenu( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	StartPlayerMenu( player );
}

void StartPlayerMenu( Critter& player )
{
    Map@ map = player.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenu( map );
    iDialogBox@ menu = OpenMenu( player, "Player menu", handler );
}

void unsafe_SwapItemVisor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	SwapItemVisor(player);
}

void SwapItemVisor( Critter& player )
{
	FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_SHOW_ITEMS );
}

class PlayerMenu: CenteredMenuHandler
{
    uint map_id;
	
    PlayerMenu( Map& map )
	{
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( map is null )
		{
            return false;
        }
		
		Item@ armor = _CritGetItemArmor( player );
		
		if( menu.Button( "Hide Face" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE );
			ArmorEffects( player, armor );
			return true;
		}
		
		if( ( valid( armor ) && ( HidefaceArmor.find( armor.GetProtoId() ) != -1 || ArmorHelmets.find( armor.GetProtoId() ) != -1 ) )|| hasItem( player, PID_STA_VISOR, SLOT_HEAD ) )
		{
			if( menu.Button( "Smart Target Assist" ) )
			{
				FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_STA ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_STA ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_STA );
				return true;
			}
		}
		
		if( menu.Button( "Hide Desc." ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC );
			return true;
		}
		
		if( menu.Button( "Hide Typing" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING );
			return true;
		}
		
		if( menu.Button( "Radio Safety" ) )
		{
			FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) ? UNSETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) : SETFLAG( player.ParamBase[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY );
			return true;
		}
		
		if( menu.Button( "Item Visor" ) )
		{
			SwapItemVisor( player );
			return true;
		}

		string wallAlpha = player.Param[ WALL_ALPHA ];
		if( menu.ButtonExtSay( "Wall alpha: ", wallAlpha, "Input between 0 and 200"  ) )
		{
			string rainStr = menu.GetSayValue();
			int val = 0;
			StrToInt( rainStr, val );
			val = CLAMP( val, 0, 200 );
			player.ParamBase[ WALL_ALPHA ] = val;
			return true;
		}

		if( menu.Button( "Increase Speech" ) )
		{
			unsafe_VoiceVolumeAdjust( player, -5, 0, 0, null, null );
			return true;
		}
		
		if( menu.Button( "Decrease Speech" ) )
		{
			unsafe_VoiceVolumeAdjust( player, 5, 0, 0, null, null );
			return true;
		}
		
		if( menu.Button( "Rolls" ) )
		{
			StartPlayerMenuRolls( player );
			return false;
		}
		
		if( menu.Button( "Animations" ) )
		{
			StartPlayerMenuAnimations( player );
			return false;
		}
		
		if( menu.Button( "Actions" ) )
		{
			StartPlayerMenuActions( player );
			return false;
		}
		return true;
	}
	
    string@ Description( Critter& player )
	{
		string info = "";
		string sta_status = " ";
		Item@ armor = _CritGetItemArmor( player );
		if( ( valid( armor ) && ( HidefaceArmor.find( armor.GetProtoId() ) != -1 || ArmorHelmets.find( armor.GetProtoId() ) != -1 ) ) || hasItem( player, PID_STA_VISOR, SLOT_HEAD ) )
		{
			sta_status = "          STA: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_STA ) ? "On" : "Off" ) + " |0x3CF800 ]";
		}
		
		info += "Hide face: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_FACE ) ? "On" : "Off" ) + " |0x3CF800 ]" + sta_status;
		info += "\nHide description: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_DESC ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nHide typing: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_HIDE_TYPING ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nRadio safety: [ |0xFFFF00 " + ( FLAG( player.Param[ PLAYER_FLAGS ], PLAYER_FLAG_RADIO_SAFETY ) ? "On" : "Off" ) + " |0x3CF800 ]";
		info += "\nItem visor: [ |0xFFFF00 " + ( FLAG( player.Param[PLAYER_FLAGS], PLAYER_FLAG_SHOW_ITEMS ) ? "On" : "Off" ) + " |0x3CF800 ]";
		
		int volume = CLAMP( 50 - player.Stat[ ST_SPEECH_VOLUME ], 1, 50 );
		info += "\nSpeech volume: [ |0xFFFF00 " + volume + " |0x3CF800 ]";
		
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

void StartPlayerMenuRolls( Critter& player )
{
    Map@ map = player.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenuRolls( map );
    iDialogBox@ menu = OpenMenu( player, "PlayerMenu Rolls", handler );
}

class PlayerMenuRolls: CenteredMenuHandler
{
    uint map_id;
	
    PlayerMenuRolls( Map& map )
	{
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( map is null )
		{
            return false;
        }

		if( menu.Button( "Roll Strength" )  )
		{
			unsafe_rolling( player, 1, 2, 6, null, null );
			return false;
		}
		
		if( menu.Button( "Roll Perception" )  )
		{
			unsafe_rolling( player, 2, 2, 6, null, null );
			return false;
		}
		
		if( menu.Button( "Roll Endurance" )  )
		{
			unsafe_rolling( player, 3, 2, 6, null, null );
			return false;
		}
		
		if( menu.Button( "Roll Charisma" )  )
		{
			unsafe_rolling( player, 4, 2, 6, null, null );
			return false;
		}
		
		if( menu.Button( "Roll Intellect" )  )
		{
			unsafe_rolling( player, 5, 2, 6, null, null );
			return false;
		}
		
		if( menu.Button( "Roll Agility" )  )
		{
			unsafe_rolling( player, 6, 2, 6, null, null );
			return false;
		}
		
		if( menu.Button( "Roll Luck" )  )
		{
			unsafe_rolling( player, 7, 2, 6, null, null );
			return false;
		}
		
		if( menu.ButtonSay( "Roll d6", "Input dice ammount: d6" ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 6, null, null );
			}
			else
			{
				player.Say( SAY_NETMSG, "|0xFFFF00 Dice amount must be a number" );
			}
			return false;
		}
		
		if( menu.ButtonSay( "Roll d10", "Input dice ammount: d10" ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 10, null, null );
			}
			else
			{
				player.Say( SAY_NETMSG, "|0xFFFF00 Dice amount must be a number" );
			}
			return false;
		}
		
		if( menu.ButtonSay( "Roll d20", "Input dice ammount: d20" ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 20, null, null );
			}
			else
			{
				player.Say( SAY_NETMSG, "|0xFFFF00 Dice amount must be a number" );
			}
			return false;
		}
		
		if( menu.ButtonSay( "Roll d100", "Input dice ammount: d100" ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 100, null, null );
			}
			else
			{
				player.Say( SAY_NETMSG, "|0xFFFF00 Dice amount must be a number" );
			}
			return false;
		}
		
		if( menu.ButtonSay( "Roll d300", "Input dice ammount: d300" ) )
		{				
			string dice = menu.GetSayValue();
			int val = 0;
			StrToInt( dice, val );
			if( val != 0 )
			{
				unsafe_rolling( player, 0, val, 300, null, null );
			}
			else
			{
				player.Say( SAY_NETMSG, "|0xFFFF00 Dice amount must be a number" );
			}
			return false;
		}
		
		if( menu.Button( "Return" ) )
		{
			StartPlayerMenu( player );
			return false;
		}
		return true;
	}
	
    string@ Description( Critter& player )
	{
		string info = "Choose Stat or type of dice to roll. \nIf stat is chosen the result will be your current stat value + 2d6.";
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

void StartPlayerMenuActions( Critter& player )
{
    Map@ map = player.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenuActions( map );
    iDialogBox@ menu = OpenMenu( player, "Player Action menu", handler );
}

class PlayerMenuActions: CenteredMenuHandler
{
    uint map_id;
	
    PlayerMenuActions( Map& map )
	{
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( map is null )
		{
            return false;
        }

		if( player.Param[ CR_SLEEPING_STATE ] == 0 )
		{
			if( menu.Button( "Lie on belly" ) )
			{
				unsafe_sleep( player, 1, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Lie on back" ) )
			{
				unsafe_sleep( player, 0, 0, 0, null, null );
				return true;
			}
			
			if( player.Stat[ ST_BODY_TYPE ] == BT_DOG )
			{
				if( menu.Button( "Devour" ) )
				{
					player.RunClientScript( "client_main@__InitDevour", 0, 0, 0, null, null );
					CrimeLog( player, crInfo( player ) + " attempts to devour target." );
					return false;
				}
			}
			
			if( menu.Button( "Attempt Suicide" ) )
			{
				unsafe_killself( player, 0, 0, 0, null, null );
				return false;
			}
			
			if( menu.Button( "Suggest sex" ) )
			{
				player.RunClientScript( "client_main@__InitSex", 0, 0, 0, null, null );
				CrimeLog( player, crInfo( player ) + " attempts to initiate sex." );
				return false;
			}
		}
		else
		{
			if( menu.Button( "Get up" ) )
			{
				unsafe_sleep( player, 0, 0, 0, null, null );
				return true;
			}
		}

		if( player.Param[ CR_AFK_MODE ] != 1 )
		{
			if( menu.ButtonSay( "AFK Mode", "input AFK action" ) )
			{
				string lex = menu.GetSayValue();
				string@ lexem = player.GetLexems() + "_" + lex;
				if( lexem.length() >= 127 )
				{
					player.Say( SAY_NETMSG, "lexem is too long." );
					return false;
				}
				player.SetLexems( lexem );
				player.ParamBase[ CR_AFK_MODE ] = 1;
				player.AddTimeEvent( "cte_AFK_mode", 0, CTE_AFK, 0 );
				return false;
			}
		}
		else
		{
			if( menu.Button( "Disable AFK Mode" ) )
			{
				player.ParamBase[ CR_AFK_MODE ] = 0;
				return false;
			}
		}
		
		if( menu.ButtonSay( "Describe self", "input description" ) )
		{
            string lex = menu.GetSayValue();
			unsafe_selfLex( player, 0, 0, 0, lex, null );
			return false;
		}
		
		Item@ hand = _CritGetItemHand( player );
		if( valid( hand ) )
		{			
			if( menu.ButtonSay( "Describe item", "input description" ) )
			{
				string lex = menu.GetSayValue();
				unsafe_addLexem( player, 0, 0, 0, lex, null );
				return false;
			}
		}
		
		if( menu.Button( "Load Avatar" ) )
		{
			player.RunClientScript( "link@__PlayerAuth", 0, 0, 0, null, null );
			return true;
		}
		
		if( menu.Button( "Check Id" ) )
		{
            player.Say( SAY_NETMSG, "Your Id: |0xFFFF00 " + player.Id );
			return true;
		}
		
		if( menu.Button( "Return" ) )
		{
			StartPlayerMenu( player );
			return false;
		}
		return true;
	}
	
    string@ Description( Critter& player )
	{
		string info = "Choose your action:";
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

uint cte_AFK_mode( Critter& cr, int identifier, uint& rate )
{
	if( cr.Param[ CR_AFK_MODE ] != 1 )
	{
		StopAFK( cr );
		return 0;
	}
	
	if( MovementState( cr ) > 0 )
	{
		StopAFK( cr );
		return 0;
	}
	return REAL_MS( 500 );	
}

void StopAFK( Critter& cr )
{
	string@ lexem = cr.GetLexems();
	uint index = findFirstOf( lexem, "_", 0 );
	string oldLex = substring( lexem, 0, index );
	cr.SetLexems( oldLex );
	cr.ParamBase[ CR_AFK_MODE ] = 0;
	Log( "oldlex" + oldLex );
}

void StartPlayerMenuAnimations( Critter& player )
{
    Map@ map = player.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = PlayerMenuAnimations( map );
    iDialogBox@ menu = OpenMenu( player, "Player Animations menu", handler );
}

class PlayerMenuAnimations: CenteredMenuHandler
{
    uint map_id;
	
    PlayerMenuAnimations( Map& map )
	{
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& player, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
	
        if( map is null )
		{
            return false;
        }
		
		if( player.Param[ CR_SLEEPING_STATE ] == 0 && player.Param[ CR_IS_RELAXING ] > 0 )
		{
			if( menu.Button( "Get Up" ) )
			{
				unsafe_relax( player, 0, 0, 0, null, null );
				return false;
			}
		}
		
		if( player.Param[ CR_SLEEPING_STATE ] == 0 && player.Param[ CR_IS_RELAXING ] == 0 )
		{
			if( menu.Button( "Prone1" ) )
			{
				unsafe_relax( player, 1, 0, 0, null, null );
				return true;
			}

			if( menu.Button( "Prone2" ) )
			{
				unsafe_relax( player, 2, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Lean" ) )
			{
				unsafe_relax( player, 3, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Lean2" ) )
			{
				unsafe_relax( player, 4, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Crouch" ) )
			{
				unsafe_relax( player, 5, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Kneel" ) )
			{
				unsafe_relax( player, 6, 0, 0, null, null );
				return true;
			}
			
			if( menu.Button( "Kneel2" ) )
			{
				unsafe_relax( player, 7, 0, 0, null, null );
				return true;
			}
		}
		
		if( menu.Button( "Return" ) )
		{
			StartPlayerMenu( player );
			return false;
		}
		return true;
	}
	
    string@ Description( Critter& player )
	{
		string info = "Choose your action:";
		return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Hide menu", null );
    }
}

#endif // PLAYER_MENU