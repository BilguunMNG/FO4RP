#ifndef __DELAYS__
#define __DELAYS__

#include "_utils.fos"
#include "delays_h.fos"

dictionary delays;

//~run delays test delay times 0
void test( Critter& cr, int delay, int times, int )
{
	if( times == 0 ) times = 1;
	
	for( int i = 1; i <= times; i++ )
	{
		wait( cr, delay );
	}
}

void wait( Critter& cr, uint time_ms ) // exported
{
	string key = cr.Id;
	
	uint last_tick = 0;
	if( delays.exists( key ) )
	{
		delays.get( key, last_tick );
	}
	
	uint current_time = GetTick();	
	if( last_tick < current_time )
	{
		last_tick = current_time;
	}
		
	uint delay_ms = last_tick - current_time;
	
	uint[] values = { cr.Id, time_ms };
	CreateTimeEvent( AFTER( REAL_MS( delay_ms ) ), "delays@e_wait", values, false );
	
	last_tick = current_time + delay_ms + time_ms;
	delays.set( key, last_tick );
}

uint e_wait( uint[]@ values )
{
	if( !valid( values ) || values.length() != 2 )
	{	
		return 0;
	}	
	
	uint cr_id = values[0];
	uint time_ms = values[1];
	
	Critter@ cr = GetCritter( cr_id );
	if( valid( cr ) )
	{
		cr.Wait( time_ms );
	}
	
	return 0;
}

#endif // __DELAYS__
