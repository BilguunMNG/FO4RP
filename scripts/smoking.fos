#include "_utils.fos"
#include "_defines.fos"
#include "_dialogbox.fos"

const string[] cigSounds = { "cig_rustling_1.ogg", "cig_rustling_2.ogg",
							 "cig_rustling_3.ogg", "cig_rustling_4.ogg" };

//	Курение сигарет

//	Функция считает сколько проверяемых предметов в контейнере, фильтруя ненужные
uint howMuchIn( Item@ item, uint pid = 0, bool countStacks = true )
{
	if( !valid( item ) ) 																			//Проверка на то, не потерян ли айтем в котором осуществляется поиск, присутствует ли в мире
	{
		return 0;
	}
	
	Item@[] itemsIn;																				//Перечень всех сущностей в контейнере
	uint countItemsIn = item.GetItems( 0, itemsIn );												//Подсчет числа сущностей в контейнере, стаков и единичных
	
	if( pid != 0 ) 
	{
		for( uint i = 0, l = countItemsIn; i < l; i++ ) 
		{
			if( valid( itemsIn[i] ) && pid != itemsIn[i].GetProtoId() ) 							//Если элемент переченя сущностей существует и элемент массива пидов не равен искомому пиду
			{
				countItemsIn--;																		//Уменьшение рассматриваемого числа сущностей на 1
				@itemsIn[i] = null;																	//Пометка проверенного элемента массива как нул (типа уже провереный)
			}
		}
	}
	
	if( countStacks == true ) 																		//Проверка если искомый предмет в стаках
	{
		countItemsIn = 0;																			//Обнуляем итоговый счетчик предметов
		
		for( uint i = 0, l = itemsIn.length(); i < l; i++ ) 
		{
			if ( valid( itemsIn[i] ) ) 																//Если элемент переченя сущностей существует
			{
				countItemsIn += itemsIn[i].GetCount();												//К итоговому количеству предметов прибавляется количество стаков с искомым предметом с учетом количества предметов в стаке.
			}
		}
	}
	
	return countItemsIn;																			//Получаем искомое количество предметов
}

//	Функция просматривает предметы в инвентаре и берет первый, подходящий
//	Богоугодная хуйня, берет сущность из конкретно указанного слота. Обход косяка с значением слота "0" в cr.GetItem( pid, slot )
Item@ getItem( Critter@ cr, uint pid, uint slot = 0 ) 
{
	Item@[] itemsInInv;
	uint countItemsIn = cr.GetItems( slot, itemsInInv );
	
	for( uint i = 0, l = countItemsIn; i < l; i++ ) 
	{
		if( valid( itemsInInv[i] ) && itemsInInv[i].GetProtoId() == pid ) 
		{
			return itemsInInv[i];
		}
	}
	
	return null;
}

//	Функция открывания новой запечатанной пачки
bool openNewPack ( Critter& cr, Item& item ) 
{
	Map@ map = cr.GetMap();
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_PACK_OPEN );
	map.PlaySound( "arm_fishing_rod.ogg", cr.HexX, cr.HexY, 2 );
	_SubItem( item, 1 );
	
	Item@ cigarettePack = cr.AddItem( PID_CIGARETTES_PRT, 1 );
	
	createFullPack( cigarettePack );
	
	return true;
}

//	Функция заполняет контенер (пачку) сигаретами
bool createFullPack ( Item& item ) 
{
	if ( !valid( item )) 
	{
		return false;
	}
	
	item.AddItem( PID_CIGARETTE, 20, 0 );
	
	return true;
}

//	Функция выкидывания пустой пачки
void throwEmpty ( Critter@ cr, Item@ item ) 
{
	Map@ map = cr.GetMap();
	cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_PACK_REMOVE );
	map.PlaySound( "arm_fishing_rod.ogg", cr.HexX, cr.HexY, 2 );
	_SubItem( item, 1 );
	
	//map.PlaySound( SoundNames[ Random( 0, SoundNames.length() -1 ) ], cr.HexX, cr.HexY, 5 );			рандомизатор для массива звуков
}

//	Функция выкуривания сигареты
bool smokingCigarettes ( Critter@ cr, Item@ item ) 
{
	uint16 pid = item.GetProtoId();
	
	if ( pid == PID_CIGARETTE ) 
	{
		Item@ respirator = _CritGetItemHandExt( cr );
	
		if ( !( respirator is null ) && respirator.GetProtoId() == PID_RESPIRATOR )
		{
			cr.Say( SAY_NETMSG, "|0xFF0000 Вы не можете курить через респиратор." );
			
			return true;
		}
	
		if ( item.CritSlot != SLOT_HAND1 )
		{
			cr.Say(SAY_NETMSG, "|0xFFFF00 Возьмите сигарету в руку, чтобы закурить.");
			
			return true;
		}
	
		if ( ( _CritCountItem( cr, PID_LIGHTER ) > 0 || _CritCountItem( cr, PID_FIREPLACE_TOKEN ) > 0 ) ) 
		{
			Map@ map = cr.GetMap();
			
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_SMOKE );	
						
			_SubItem( item, 1 );
			cr.StatBase[ ST_DYSPNEA ] -= Random( 0, 5 );
			cr.StatBase[ ST_HUNGER ] -= Random( 0, 1 );
			cr.StatBase[ ST_THIRST ] -= Random( 0, 1 );
			
			int time = cr.Timeout[ TO_TIREDNESS ];
			
			if( time > 0 )
			{
				time = CLAMP( time - REAL_SECOND( Random( 15, 30 ) ), 0, time );
				cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + time;
			}
			
			if ( Random( 0, 1 ) > 0 ) 
			{
				map.PlaySound( "smoking.ogg", cr.HexX, cr.HexY, 1 );
			}
			
			else 
			{
				map.PlaySound( "drugs2.wav", cr.HexX, cr.HexY, 1 );
			}
		}
	
		else 
		{
			cr.Say( SAY_NETMSG, "|0xFF0000 Вам нужен источник огня, что бы прикурить." );
		}
	}
	
	return true;
}

//	Функция открывания пачки как контейнера
bool openCigContainer ( Critter@ cr, Item@ item ) 
{
	cr.ParamBase[ ST_LAST_CONT_ID ] = item.Id;
	//cr.Say( SAY_NORM, "" + item.Id );
	cr.ShowContainer( null, item, TRANSFER_SELF_CONT );
	
	return true;
}


//	При использовании "на себе"
//	Функция открывает меню
bool startMenuCigPack( Critter &cr, Item &item )
{
    Map@ map = cr.GetMap();
    if( map is null ) 
	{
        return false;
    }
    cr.StatBase[ST_VAR7] = item.Id;

    iDialogBox@ menu = OpenMenu(cr, "Пачка сигарет");
    menuCigPack(cr, map, item, menu);
    menu.Finish("smoking@answer_CigPack");

    return true;
}

//	Функция отрисовывает варианты меню и обрабатывает нажатие кнопок
bool menuCigPack( Critter &cr, Map &map, Item &item, iDialogBox &menu )
{	
	menu.description( "Выбирите действие" + "\n" + "Сигарет в пачке: " + "|0xFFFF00 " + howMuchIn( item, PID_CIGARETTE ) );

    if( howMuchIn( item, PID_CIGARETTE, false ) == 0 )
	{
        if( menu.ButtonCenter( "Выкинуть пачку" ) )
		{
            throwEmpty( cr, item );
			return true;
        }
    }
	
	else 
	{
        if( menu.ButtonCenter( "Взять сигарету" ) ) 
		{
			Item @cigFromPack = item.GetItem( PID_CIGARETTE, 0 );		
			MoveItem( cigFromPack, 1, cr );
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_MOVE );
			Map@ map = cr.GetMap();
			map.PlaySound( cigSounds[ Random( 0, cigSounds.length() -1 ) ], cr.HexX, cr.HexY, 1 );
			return SayReturn( cr, "|0xFFFF00 Вы вынули сигарету из пачки.", SAY_NETMSG, true );
        }
    }

    if( menu.ButtonCenter( "Закурить" ) )
	{
        if( howMuchIn( item, PID_CIGARETTE, true ) == 0 ) 
		{	
			openCigContainer( cr, item );	
			return SayReturn( cr, "|0xFFFF00 В пачке закончились сигареты.", SAY_NETMSG, false );
		}
		
		Item @hand = cr.GetItem( 0, SLOT_HAND1 );
		bool emptyHand = !valid( hand );
		bool cigInHand = !emptyHand && hand.GetProtoId() == PID_CIGARETTE;
		
		if( cigInHand ) 
		{
			smokingCigarettes ( cr, hand );
			return SayReturn( cr, "|0xFFFF00 Вы курите сигарету которая уже была в руке.", SAY_NETMSG, true );
		}
		
		if( !emptyHand ) 
		{	
			return SayReturn( cr, "|0xFFFF00 Слот занят.", SAY_NETMSG, true );
		}
		
		Item @cigFromPack = item.GetItem( PID_CIGARETTE, 0 );
		
		if( !valid( cigFromPack ) ) 
		{
			return SayReturn( cr, "|0xFFFF00 Сигарет в пачке не обнаружено.", SAY_NETMSG, false );
		}
		
		MoveItem( cigFromPack, 1, cr );	
		
		@cigFromPack = getItem( cr, PID_CIGARETTE, uint( -1 ) );
		
		if( !valid( cigFromPack ) ) 
		{
			return SayReturn( cr, "|0xFFFF00 Сигарета потеряна. Исправляйте.", SAY_NETMSG, true );
		}
		
		if( !cr.MoveItem( cigFromPack.Id, 1, SLOT_HAND1 ) ) 
		{
			return SayReturn( cr, "|0xFFFF00 Не удалось взять сигарету в руки.", SAY_NETMSG, true );
		}
		
		smokingCigarettes( cr, cigFromPack );
		return SayReturn( cr, "|0xFFFF00 Вы выкурили вынутую из пачки сигарету.", SAY_NETMSG, true );
    }
  
    if( menu.ButtonCenter( "Открыть пачку" ) ) 
	{
        openCigContainer ( cr, item );
		return false;
    }
  
    return true;
}

//	Функция повторно вызывает диалоговое меню после нажатия
void startMenuAgain( Critter &cr, Item &item ) 
{
	Map@ map = cr.GetMap();
	iDialogBox@ menu = OpenMenu(cr, "Пачка сигарет");
	
	if( menuCigPack( cr, map, item, menu ) ) 
	{
		Item@ item = GetItem( cr.StatBase[ ST_VAR7 ] );
		startMenuCigPack( cr, item );
	}
}

//	Функция закрывает меню после нажатия и вызывает повторно
void answer_CigPack( Critter& cr, uint answerI, string& answerS )
{
    Map@ map = cr.GetMap();
    Item@ item = GetItem( cr.StatBase[ST_VAR7] );

    if( map is null || item is null ) 
	{
        return;
    }

    iDialogBox@ menu = CloseMenu(cr, "Пачка сигарет", answerI);
  
    if( menu is null ) 
	{
        cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
    }
	
	if( menuCigPack( cr, map, item, menu ) ) 
	{
        startMenuAgain( cr, item );
    }
}


//	При использовании на цели-игроке
//	Функция открывает меню
bool startMenuCigPackTarget( Critter& cr, Item& item, Critter @targetCr ) 
{
    Map@ map = cr.GetMap();
    if( map is null ) 
	{
        return false;
    }
	
    targetCr.StatBase[ST_VAR7] = item.Id;
	targetCr.StatBase[ST_VAR8] = cr.Id;

    iDialogBox@ menu = OpenMenu( targetCr, "Предложение закурить" );
    menuCigPackTarget( cr, map, item, menu, targetCr );
    menu.Finish( "smoking@answer_CigPackTarget" );

    return true;
}


//	Функция отрисовывает варианты меню и обрабатывает нажатие кнопок
bool menuCigPackTarget( Critter &cr, Map &map, Item &item, iDialogBox &menu, Critter @targetCr )
{	
	menu.description( "Вам предложили закурить. Вы согласны?" + "\n" + "Сигарет в пачке: " + "|0xFFFF00 " + howMuchIn( item, PID_CIGARETTE ) );

	if( menu.ButtonCenter( "Взять сигарету" ) ) 
	{
		if( howMuchIn( item, PID_CIGARETTE, false ) == 0 )
		{
			targetCr.Say( SAY_NETMSG, "|0xFF0000 Кажется вас разыграли." );
			return true;
		}
		
		Item @hand = targetCr.GetItem( 0, SLOT_HAND1 );
		bool emptyHand = !valid( hand );
		
		Item @cigFromPack = item.GetItem( PID_CIGARETTE, 0 );
		
		if( !emptyHand ) 
		{	
			targetCr.MoveItem( hand.Id, 1, SLOT_INV );
			
			if( !valid( cigFromPack ) ) 
			{
				return SayReturn( targetCr, "|0xFFFF00 Сигарета потеряна. Исправляйте.", SAY_NETMSG, false );
			}
			
			MoveItem( cigFromPack, 1, targetCr );
			
			@cigFromPack = getItem( targetCr, PID_CIGARETTE, uint( -1 ) );
			
			if( !valid( cigFromPack ) ) 
			{
				return SayReturn( targetCr, "|0xFFFF00 Сигарета потеряна. Исправляйте.", SAY_NETMSG, false );
			}
			
			if( !targetCr.MoveItem( cigFromPack.Id, 1, SLOT_HAND1 ) ) 
			{
				return SayReturn( targetCr, "|0xFFFF00 Не удалось взять сигарету в руки.", SAY_NETMSG, false );
			}
			
			targetCr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_CIGARETTES_MOVE );
			Map@ map = targetCr.GetMap();
			map.PlaySound( cigSounds[ Random( 0, cigSounds.length() -1 ) ], targetCr.HexX, targetCr.HexY, 1 );
			
			return SayReturn( targetCr, "|0xFFFF00 Вы положили ваши вещи в сумку и взяли сигарету.", SAY_NETMSG, true );
		}
	}
	
	return true;
}

//	Функция закрывает меню после нажатия
void answer_CigPackTarget( Critter& targetCr, uint answerI, string& answerS )
{
	
    Map@ map = targetCr.GetMap();
    Item@ item = GetItem( targetCr.StatBase[ST_VAR7] );
	Critter @cr = GetCritter( targetCr.StatBase[ST_VAR8] );
	
	if( map is null || item is null ) 
	{
        return;
    }
	
	iDialogBox@ menu = CloseMenu( targetCr, "Предложение закурить", answerI );

	if( !valid( cr ) )
	{
		cr.Say( SAY_NETMSG, "|0xFF0000 Тот кто предложил закурить - пропал." );
	}
	
	if( menu is null ) 
	{
        cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
		targetCr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );
    }
	
	if( !menuCigPackTarget( cr, map, item, menu, targetCr ) ) 
	{
        cr.Say( SAY_NETMSG, "|0xFF0000 Что-то пошло не так." );
		targetCr.Say( SAY_NETMSG, "|0xFF0000 Что-то пошло не так." );
    }
}



























/*
// Cigar smoking
	
	if( pid == PID_PREWAR_CIGAR1_PRT || pid == PID_PREWAR_CIGAR2_PRT || pid == PID_PREWAR_CIGAR1 || pid == PID_PREWAR_CIGAR2 )
	{
		if( item.CritSlot != SLOT_HAND1 )
		{
			cr.Say(SAY_NETMSG, "|0xFFFF00 Возьмите сигару в руку, чтобы раскурить.");
			return true;
		}
			if( ( _CritCountItem( cr, PID_LIGHTER ) < 1 ) ) 
				{ 
					cr.Say( SAY_NETMSG, "|0xFF0000 Вам нужна зажигалка, что бы прикурить." );
					return true;
				}
				else
				{
					if(  pid == PID_PREWAR_CIGAR1 || pid == PID_PREWAR_CIGAR2 )
					{
						cr.Say( SAY_EMOTE, "Раскуривает сигару" );
						cr.MoveItem( item.Id, item.GetCount(), SLOT_INV );
						_SubItem( item, 1 );
						Item@ okurok = cr.AddItem( ( pid == PID_PREWAR_CIGAR1 ) ? PID_PREWAR_CIGAR1_PRT : PID_PREWAR_CIGAR2_PRT, 1  );
							if(valid(okurok))
							{
								cr.MoveItem( okurok.Id, okurok.GetCount(), SLOT_HAND1 );
							}
					}
					else if(  pid == PID_PREWAR_CIGAR1_PRT || pid == PID_PREWAR_CIGAR2_PRT )
					{
						cr.Say( SAY_EMOTE, "Курит сигару" );
						item.Val0--;
						switch( item.Val0 )
						{
							case(8):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st2_inv.png" );
							break;
							case(7):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st3_inv.png" );
							break;
							case(6):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st4_inv.png" );
							break;
							case(5):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st5_inv.png" );
							break;
							case(4):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st6_inv.png" );
							break;
							case(3):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st7_inv.png" );
							break;							
							case(2):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st8_inv.png" );
							break;
							case(1):
							item.PicInv = GetStrHash( "art\\inven\\misc\\cigar\\cigar_st9_inv.png" );
							break;
						}
						item.Update();
						
						if( item.Val0 < 1 )
						{
							cr.Say( SAY_EMOTE, "Докурил сигару" );
							_SubItem( item, 1 );
						}
					}
					cr.StatBase[ ST_DYSPNEA ] -= Random( 0, 5 );
					cr.StatBase[ ST_THRIST ] -= Random( 0, 1 );
					int time = cr.Timeout[ TO_TIREDNESS ];
						if( time > 0 )
						{
							time = CLAMP( time - REAL_SECOND( Random( 15, 30 ) ), 0, time );
							cr.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + time;
						}
					
					map.PlaySound( "smoking.ogg", cr.HexX, cr.HexY, 1 );
				}
		return true;
	}

*/



//курение косяков находится в item.fos строка 1414, перенести сюда позже.




	















