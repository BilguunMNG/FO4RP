#include "_macros.fos"

#define State		Val0

void _InitFurniture( Item& furniture, bool firstTime )
{
    furniture.SetEvent( ITEM_EVENT_SKILL, "_UseFurniture" );
}

bool _UseFurniture( Item& furniture, Critter& cr, int skill )
{
    if( skill == SK_TRAPS )
		return Rotate( furniture );
	
	return false;
}

//import bool Rotate( Item& furniture ) from "furniture";
bool Rotate( Item& furniture ) //exported
{
	InitFurnitures();
	return furnitures.rotate( furniture );
}

FurnitureList@ furnitures;
void InitFurnitures()
{
	if( valid( furnitures ) ) return;
	//TODO: Нормально проименовать все эти циферки пидов сценери.
	@furnitures = @CreateFurniture( "Единый список мебели")
	//	.add( Furniture( "Имя для скрипта", PID_крафтаемого_объекта, изображения "при повороте" ) )
		.add( Furniture( "Деревянный стул", 873 ).add(2666).add(2670).add(2676).add(2663) )
		;
}


#ifndef __FURNITURE__TESTS
	#define __FURNITURE__TESTS
	
	//~run furniture go 0 0 0
	void go( Critter& cr, int p0, int p1, int p2 )
	{
		cr.Say( SAY_NETMSG, "Put firniture tests here." );
		TestUse( cr, p0, p1 );
	}

	void TestUse( Critter& cr, int furniture_id, int skill )
	{
		Item@ target = GetItem( furniture_id );
		if( !valid( target ) )
		{
			cr.Say( SAY_NETMSG, "Предмет не найден." );
			return;
		}
		
		if( _UseFurniture( target, cr, skill ) )
		{
			cr.Say( SAY_NETMSG, "Тест успешен, дополнительная информация могла быть здесь." );
		}
		else
		{
			cr.Say( SAY_NETMSG, "Тест провален, дополнительная информация могла быть здесь." );
		}
	}
#endif

#ifndef __FURNITURE__CLASSES
	#define __FURNITURE__CLASSES
	
	FurnitureList@ CreateFurniture( string name )
	{
		return FurnitureList( name );
	}
	
	class FurnitureList
	{
		string name;
		Furniture@[] list;
		
		FurnitureList( string name )
		{
			this.name = name;
		}
		
		FurnitureList@ add( Furniture@ item )
		{
			list.insertLast( item );
			return this;
		}
		
		bool rotate( Item& furniture )
		{
			for( uint i = 0; i < list.length(); i++ )
				if( list[i].Rotate( furniture ) )
					return true;
				
			return false;
		}
	}

	Furniture@ CreateFurniture( string name, uint basePID )
	{
		return Furniture( name, basePID );
	}

	class Furniture
	{
		uint basePID;
		string name;
		uint[] pids;
		
		Furniture( string name, uint basePID )
		{
			this.name = name;
			this.basePID = basePID;
		}
		
		void set( uint[] pids )
		{
			this.pids = pids;
		}
		
		Furniture@ add( uint rotation_picture_pid )
		{
			if( rotation_picture_pid != 0 )
				pids.insertLast( rotation_picture_pid );
			
			return this;
		}
		
		bool setPic( Item& target )
		{
			return setPic( target, target.State );
		}

		bool setPic( Item& target, uint index )
		{
			if( index >= pids.length() ) 
				return false;
			
			return setItemPic( target, pids[index] );
		}
		
		bool ChangeState( Item& target, bool clockwise = true )
		{
			if( clockwise )
				target.State++;
			else
				target.State--;

			int state = target.State;
			
			if( state >= pids.length() )
			{
				target.State = 0;
				return true;
			}
			
			if( state < 0 )
			{
				target.State = pids.length() - 1;
				return true;
			}
			
			return true;
		}
		
		bool Rotate( Item& target, bool clockwise = true )
		{
			if( target.GetProtoId() != basePID || pids.length() == 0 ) return false;
			
			ChangeState( target, clockwise );
			setPic( target );
			return true;
		}
	}
#endif

#ifndef __FURNITURE__UTILS
	#define __FURNITURE__UTILS
	
	bool setItemPic( Item& target, uint protoPID )
	{
		if( protoPID == 0 ) return false;
		
		ProtoItem@ proto = GetProtoItem( protoPID );
		if( !valid( proto ) ) return false;
		
		target.PicMap = proto.PicMap;
		target.Update();
		return true;
	}
#endif