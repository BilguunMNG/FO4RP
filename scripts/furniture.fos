#include "_utils.fos"
#include "_dialogbox.fos"

#define SK_DESTROY	SK_REPAIR
#define SK_MIN		100

#define State		Val9
#define Durability	Val8
#define HolderCr	Val7
#define Holding		Val0

#define MAX_POWER	100
#define GetPower	#(item, power)		item.Durability * CLAMP( MAX_POWER - power, 0, MAX_POWER )

import void LockerBudge( Item& item ) from "lockers";
import bool UseItemOnLocker( Critter& cr, Item& locker, Item& item ) from "lockers";
import bool IsKeyAviable( Critter& cr, uint lockerId ) from "lockers";
import bool UseSkillOnLocker( Critter& cr, Item& locker, int skill ) from "lockers";
import bool _TryRemoveTrap( Item& door, Critter& player ) from "trap";
import bool UseSkillOnTrappedItem( Item& trappedItem, Critter& cr, int skill ) from "trap";
import void Item_SetFrame( Item& item, uint8 frame ) from "item";
#ifndef __FURNITURE_DATA_HOLDERS
	#define __FURNITURE_DATA_HOLDERS

	FurnitureList@ furnitures;
	void InitFurnitures()
	{
		if( valid( furnitures ) ) return;
		//TODO: Нормально проименовать все эти циферки пидов сценери.
		@furnitures = @CreateFurniture( "Единый список мебели")
		//	.add( Furniture( "Имя для скрипта", PID_крафтаемого_объекта, изображения "при повороте" ) )
			.add( Furniture( "Деревянный стул", PID_CR_WOOD_CHAIR ).add(2670).add(2676).add(2663) )
			.add( Furniture( "Удобный стул", PID_CR_CMFRT_CHAIR ).add(2672).add(2677).add(2662) )
			.add( Furniture( "Металлический стул", PID_CR_METAL_CHAIR ).add(2673).add(2674).add(2664) )
			.add( Furniture( "Стул с тканевой обивкой", PID_CR_RAGS_CHAIR ).add(2671).add(2675).add(2665) )
			.add( Furniture( "Спальный мешок", PID_CR_SLP_BAG ).add(2209) )
			.add( Furniture( "Матрас", PID_CR_MTRS ).add(2207) )
			.add( Furniture( "Двойная кровать", PID_CR_BD_DBL_BED ).add(2211) )
			.add( Furniture( "Простенькая кровать'", PID_CR_JNK_BED ).add(2212) )
			.add( Furniture( "Лежак", PID_CR_SUN_BED).add(2949) )
			.add( Furniture( "Удобная кровать", PID_CR_WOOD_BED ).add(2680) )
			.add( Furniture( "Роскошная кровать", PID_CR_LUX_BED ).add(2681) )
			.add( Furniture( "Деревянный стол", PID_CR_WOOD_TBL ) )
			.add( Furniture( "Круглый деревянный стол", PID_CR_WOOD_TBL_GD ) )
			.add( Furniture( "Небольшой металлический стол", PID_CR_MT_TBL_SMALL ) )
			.add( Furniture( "Овальный металлический стол", PID_CR_MT_TBL_OVAL ) )
			.add( Furniture( "Большой металлический стол", PID_CR_MT_TBL_BG ).add(2606) )
			.add( Furniture( "Большой металлический стол с покрытием", PID_CR_MT_TBL_BG_ALT ).add(2607) )
			.add( Furniture( "Металлический рабочий стол", PID_CR_MT_TBL_WR ).add(187) )
			.add( Furniture( "Ржавый рабочий стол", PID_CR_JNK_TBL_WR ).add(184) )
			.add( Furniture( "Большой деревянный стол", PID_CR_WOOD_TBL_DINNER ).add(167) )
			.add( Furniture( "Деревянный рабочий стол", PID_CR_WOOD_TBL_WR ).add(8248) )
			.add( Furniture( "Ящик", PID_CR_BOX ).add(8254).add(368).add(370) )
			.add( Furniture( "Деревянный шкаф", PID_CR_WOOD_CAB_SMALL ).add(63).add(15440) )
			.add( Furniture( "Деревянный полки", PID_CR_WOOD_SHELF ).add(246).add(8260) )
			.add( Furniture( "Шкафчик", PID_CR_JNK_CAB ).add(189).add(8252).add(8253).add(132).add(134).add(133).add(135) )
			.add( Furniture( "Грибная грядка", PID_MUSHBED_EMPTY ).add(1628) )
			.add( Furniture( "Офисное кресло", PID_CR_OF_CHAIR ).add(2052).add(2053).add(2054) )
			.add( Furniture( "Офисное кресло", PID_CR_OF_CHAIR_2 ).add(2058).add(2059).add(2060) )
			.add( Furniture( "Кустарный диванчик", PID_CR_JNK_SOFA ).add(2096).add(2097).add(2098) )
			.add( Furniture( "Ковер", PID_CR_CARPET ).add(2377).add(2378) .add(16505) .add(16506) .add(16507) .add(16508) )
			.add( Furniture( "Сушилка для шкур", PID_CR_CARPET ) )
			.add( Furniture( "Алтарь", PID_CR_ALTAR ).add(4502).add(4503).add(4504) )
			.add( Furniture( "Дикарская подставка", PID_CR_STAND ).add(4506).add(4507).add(4508) )
			.add( Furniture( "Деревянный стол с настольной лампой", PID_CR_WOOD_TBL_LP ).add(3644) )
			.add( Furniture( "Кол", PID_CR_STAKE ).add(3225).add(3226).add(3227) )
			.add( Furniture( "Тачка", PID_CR_CART) )
			.add( Furniture( "Больше кресло", PID_CR_ARM_CHAIR ).add(2231) )
			.add( Furniture( "Армейская кровать", PID_CR_ARM_BED ) )
			.add( Furniture( "Компостная бочка", PID_SHIT_BAREL_EMPTY ).add( PID_SHIT_BAREL_FULL ) )
			.add( Furniture( "Компостная ванна", PID_SHIT_BATH_X_EMPTY ).add( PID_SHIT_BATH2_Y_EMPTY ).add( PID_SHIT_BATH1_X_FULL ).add( PID_SHIT_BATH2_Y_FULL ) )
			.add( Furniture( "Сундук", PID_CR_CHEST ).add(367).add(369) )
			;
	}

	Tools@ ToolsList;
	void InitTools()
	{
		if( valid( ToolsList ) ) return;
		
		@ToolsList = @CreateToolsList()
			.add( PID_AXE, 15 )
			.add( PID_SLEDGEHAMMER, 30 )
			.add( PID_CROWBAR, 45 )
			.add( PID_WELDING, 60 )
		;
	}
#endif

#ifndef __FURNITURE_DIALOG_MENU
	#define __FURNITURE_DIALOG_MENU
	import bool critter_use_item( Critter& cr, Item& item, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint param ) from "main";
	
	bool MenuFuriture( Critter& cr, Map& map, Item& furniture, iDialogBox& menu )
	{
		float max_weight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ) * 0.001;
		string info = StyledText( "", "Вес: ", ItemsWeight( furniture ) * 0.001 + " / " + max_weight );
		if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
			info += " [" + cr.Stat[ ST_CARRY_WEIGHT ] * 0.001 + " x " + ContainerBonusWeight( furniture ) + "]";
		info += "\n";
		
		if( isContainer( furniture ) )
			info += StyledText( "\n", "Объём: ", ContainmentVolume( furniture ) + " / " + furniture.Proto.Container_Volume );
		
		menu.description( info );
		
		bool isDragging = cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) > 0;

		if ( canSwitchLootability( cr, furniture ) ) 
		{
			if( menu.ButtonCenter( FLAG( furniture.Flags, ITEM_CAN_PICKUP ) ? "Закрепить" : "Открепить" ) ) 
			{
				if( isDragging ) StopDragging( cr, furniture );
				SwitchLootability( cr, furniture );
				return true;
			}
		}
		else
		{
			if( furniture.LockerId != 0 )
			{
				if( menu.ButtonCenter( FLAG( furniture.LockerCondition, LOCKER_LOCKED ) ? "Отпереть" : "Запереть" ) )
				{
					if( !IsKeyAviable( cr, furniture.LockerId ) )
					{
						LogItemMovement( cr, furniture, "не может без ключа открыть мебель", 2 ); 
						cr.Say( SAY_NETMSG, "У вас нет подходящего ключа." );
						LockerBudge( furniture );
					}
					else
					{
						Item@ hand = cr.GetItem( 0, SLOT_HAND1 );
						if( !valid( hand ) )
							cr.Say( SAY_NETMSG, "Возьмите ключ или ключницу в руку." );
						else
							critter_use_item( cr, hand, null, furniture, null, 0 );
					}
					return true;
				}
			}
			else if( menu.ButtonCenter( "Демонтировать" ) )
			{
				if( isDragging ) StopDragging( cr, furniture );
				
				Item@ hand = cr.GetItem( 0, SLOT_HAND1 );
				if( !_Tools( furniture, cr, hand ) )
					critter_use_item( cr, hand, null, furniture, null, 0 );

				return true;
			}			
		}
		
		if( menu.ButtonCenter("Повернуть") ) 
		{
			Rotate( cr, furniture );
			return true;
		}
		
		if( menu.ButtonCenter( ( isDragging ? "Перестать" : "Начать" ) + " толкать" ) )
		{
			Drag( cr, furniture );	
			return false;
		}
		
		bool canUse = true;
		string text = "";
		if( canPickup( cr, furniture ) )
		{
			if( menu.ButtonCenter( "Поднять" ) )
			{
				if( isDragging ) StopDragging( cr, furniture );
				Pickup( cr, furniture );	
				return false;
			}
		}
		else if( isContainer( furniture ) )
		{
			string action = "";
			bool isChangeble = furniture.Proto.Container_Changeble;
			if( isChangeble )
				action = FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ? "Закрыть" : "Открыть";
			else
				action = "Содержимое";
			
			if( menu.ButtonCenter( action ) )
			{
				if( isDragging ) StopDragging( cr, furniture );
				UseSkillOnLocker( cr, furniture, SKILL_PICK_ON_GROUND );	
				return false;
			}
			
			if( menu.ButtonCenter( "Осмотреть" ) )
			{
				if( isDragging ) StopDragging( cr, furniture );
				UseSkillOnLocker( cr, furniture, SK_LOCKPICK );	
				return false;
			}
		}
		
		return true;
	}

	void StopDragging( Critter& cr, Item& item )
	{
		item.SetScript( "_InitStopped" );
		cr.Say( SAY_NORM, "*перестаёт толкать*" );
		cr.EraseTimeEvents( CTE_FURNITURE_DRAGGING );
		LogItemMovement( cr, item, "перестаёт толкать мебель (" + cr.HexX + ", " + cr.HexY + ")", 2 ); 
	}

	bool StartMenuFuriture( Critter& cr, Item& target)
	{
		Map@ map = cr.GetMap();
		if( map is null ) {
			return false;
		}
		cr.StatBase[ST_VAR7] = target.Id;

		iDialogBox@ menu = OpenMenu(cr, "Мебель");
		MenuFuriture(cr, map, target, menu);
		menu.Finish("furniture@answer_MenuFuriture");

		return true;
	}

	void answer_MenuFuriture( Critter& cr, uint answerI, string& answerS )
	{
		Map@ map = cr.GetMap();
		Item@ target = GetItem( cr.StatBase[ST_VAR7] );

		if( map is null || target is null ) {
			return;
		}

		iDialogBox@ menu = CloseMenu(cr, "Мебель", answerI);
	  
		if( menu is null )
			cr.Say( SAY_NETMSG, "|0xFF0000 Из этого ничего не вышло." );

		if( MenuFuriture( cr, map, target, menu ) )
			StartMenuFuriture( cr, target );
	}
#endif

#ifndef __FURNITURE_EVENTS
	#define __FURNITURE_EVENTS
	
	void _InitFurniture( Item& furniture, bool firstTime )
	{
		furniture.SetEvent( ITEM_EVENT_USE, "_Use" );
		furniture.SetEvent( ITEM_EVENT_SKILL, "_Skill" );
		furniture.SetEvent( ITEM_EVENT_USE_ON_ME, "_Tools" );
	}

	bool _Use( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
	{
		return false;
	}
		
	bool _Skill( Item& furniture, Critter& cr, int skill )
	{
		if( UseSkillOnTrappedItem( furniture, cr, skill ) ) return true;
		
		switch( skill )
		{
			case( SK_FIRST_AID ): return Drag( cr, furniture );			
			case( SK_TRAPS ): 
				if( _TryRemoveTrap( furniture, cr ) ) return true;
				return Rotate( cr, furniture, false );
			//case( SK_SCIENCE ): return SwitchLootability( cr, furniture );
			case( SK_REPAIR ): return SwitchLootability( cr, furniture ); //Rotate( cr, furniture );
			case( SKILL_PICK_ON_GROUND ): return StartMenuFuriture( cr, furniture );
			case( SKILL_PUT_CONT ): return FailedAttempt( cr, "Это сюда не влезет." );
		}
		return false;
	}

	bool _Tools( Item& item, Critter& cr, Item@ usedItem )
	{
		InitTools();
		
		return ToolsList.check( cr, item, usedItem );
	}
#endif

#ifndef __FURNITURE_ACTIONS
	#define __FURNITURE_ACTIONS
	
	bool FailedAttempt( Critter& cr, string text )
	{
		cr.Say( SAY_NETMSG, text );
		return true;
	}

	bool canPickup( Critter& cr, Item& furniture ) 
	{
		bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
		bool isPickingUp = true;

		if( !isGM(cr) && furniture.Holding > 0 ) 
			return false;
		
		if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) )
		{
			if( DoorOrContainer )
				isPickingUp = false;
			else 
				return false;
		}
		
		return isPickingUp;
	}
	
	//Должен вернуть false что бы движок поднял предмет обычным путём.
	bool Pickup( Critter& cr, Item& furniture ) 
	{
		bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
		bool isPickingUp = true;

		if( !isGM(cr) && furniture.Holding > 0 ) 
		{
			if( DoorOrContainer )
				isPickingUp = false;
			else 
			{
				LogItemMovement( cr, furniture, "не может поднять мебель", 2 ); 
				cr.Say( SAY_NETMSG, "Это вам не под силу." );
				return true;
			}
		}

		if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) )
		{
			if( DoorOrContainer )
				isPickingUp = false;
			else 
			{
				LogItemMovement( cr, furniture, "не может поднять вмонтированную мебель", 2 ); 
				cr.Say( SAY_NETMSG, "Требуется демонтаж." );
				return true;
			}
		}
		
		if( DoorOrContainer && !isPickingUp )
		{
			if( furniture.Proto.Container_Changeble )
			{
				if( FLAG( furniture.LockerCondition, LOCKER_JAMMED ) || FLAG( furniture.LockerCondition, LOCKER_BROKEN ) || FLAG( furniture.LockerCondition, LOCKER_NOOPEN ) )
				{
					LogItemMovement( cr, furniture, "не может поднять запертую мебель", 2 ); 
					cr.Say( SAY_NETMSG, "Из этого ничего не вышло." );
					return true;
				}
				
				if( FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) )
				{
					LogItemMovement( cr, furniture, "закрывает мебель-контейнер", 2 ); 
					furniture.LockerClose();
					return true;
				}
				
				if( FLAG( furniture.LockerCondition, LOCKER_ELECTRO ) )
				{
					LogItemMovement( cr, furniture, "вводит код электронного для замка мебели", 2 ); 
					cr.RunClientScript( "client_screen_codedoor@ShowScreen", furniture.Id, furniture.Val1, 0, "Введите код", null );
					return true;
				}

				if( FLAG( furniture.LockerCondition, LOCKER_LOCKED ) )
				{
					if( !IsKeyAviable( cr, furniture.LockerId ) )
					{
						LogItemMovement( cr, furniture, "не может без ключа открыть мебель", 2 ); 
						cr.Say( SAY_NETMSG, "Заперто." );
						LockerBudge( furniture );
						return true;
					}
				}
			}
			
			if( !furniture.Proto.Container_Changeble || !FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) )
			{
                if( furniture.Proto.Container_Changeble )
					furniture.LockerOpen();
				
				cr.ParamBase[ ST_LAST_CONT_ID ] = furniture.Id;
				cr.ShowContainer( null, furniture, furniture.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
				LogItemMovement( cr, furniture, "заглядывает внутрь", 2 ); 
				return true;
			}
			
			cr.Say( SAY_NETMSG, "Что-то пошло не так." );
			LogItemMovement( cr, furniture, "безуспешно взаимодействует с", 2 ); 			
			return true;
		}
		
		if( DoorOrContainer && furniture.Proto.Container_Changeble )
		{
			LogItemMovement( cr, furniture, "закрывает мебель", 2 );
			furniture.LockerClose();
		}

		int freeWeight = cr.Stat[ ST_CARRY_WEIGHT ] - ItemsWeight( cr ),
			contWeight = ItemsWeight( furniture );
			
		if( !isGM(cr) && freeWeight < contWeight )
		{
			cr.Say( SAY_NETMSG, "Слишком тяжело." );
			LogItemMovement( cr, furniture, "не может поднять тяжёлую мебель", 2 );
			return true;
		}

		if( DoorOrContainer ) 
			UNSETFLAG( furniture.Flags, ITEM_CAN_USE );
		
		MoveItem( furniture, 1, cr );
		LogItemMovement( cr, furniture, "поднимает мебель (" + cr.HexX + ", " + cr.HexY + ")", 2 );
		return true;
	}


	bool canSwitchLootability( Critter& cr, Item& furniture )
	{
		if( !isGM(cr) && furniture.Durability > 0 )
			return false;
		
		if( !isGM(cr) && furniture.Holding > 0 )
			return false;
		
		return true;
	}
	
	bool SwitchLootability( Critter& cr, Item& furniture )
	{
		if( !isGM(cr) && furniture.Durability > 0 )
		{
			cr.Say( SAY_NETMSG, "Объект вмонтирован. Сначала демонтируйте его инструментом." );	
			LogItemMovement( cr, furniture, "не может изменить поднимаемость вмонтированной мебели" );
			if( valid( ToolsList ) ) ToolsList.hint(cr);
			return true;
		}
		
		if( !isGM(cr) && furniture.LockerId != 0 )
		{
			LogItemMovement( cr, furniture, "не может сдвинуть мебель, запертую на замок" );
			cr.Say( SAY_NETMSG, "Данный объект так просто не сдвинуть. Сначала снимите замок." );	
			return true;
		}
		
		if( !isGM(cr) && furniture.Holding > 0 )
		{
			LogItemMovement( cr, furniture, "не может сдвинуть мебель, специально фиксированную ГМом" );
			cr.Say( SAY_NETMSG, "Данный объект так просто не сдвинуть. Прийдётся проявить сноровку и фантазию." );	
			return true;
		}
		
		bool DoorOrContainer = ( isContainer( furniture ) || furniture.GetType() == ITEM_TYPE_DOOR );
		
		string state = "";
		if( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) )
		{
			UNSETFLAG( furniture.Flags, ITEM_CAN_USE );
			SETFLAG( furniture.Flags, ITEM_CAN_PICKUP );
			state = "поднимаем";
		}
		else 
		{
			//if( DoorOrContainer ) 
			SETFLAG( furniture.Flags, ITEM_CAN_USE );
			UNSETFLAG( furniture.Flags, ITEM_CAN_PICKUP );
			state = "неподъёмен";
		}		
		
		cr.Say( SAY_NETMSG, "Предмет " + state + ". Что бы изменить состояние - используйте ремонт." );	
		LogItemMovement( cr, furniture, "меняет состояние мебели на '" + state + "'" );
		return true;
	}

	//import bool Rotate( Critter@ cr, Item& furniture, bool clockwise = true ) from "furniture";
	bool Rotate( Critter@ cr, Item& furniture, bool clockwise = true ) //exported
	{
		InitFurnitures();
		return furnitures.rotate( cr, furniture, clockwise );
	}

	//import bool Drag( Critter@ cr, Item& furniture ) from "furniture";
	bool Drag( Critter@ cr, Item& furniture ) //exported
	{
		if( cr.IsRuning )
		{
			cr.Say( SAY_NETMSG, "Персонаж в режиме бега, шагните разок что бы сбросить режим." );
			return true;
		}
		
		InitFurnitures();
		return furnitures.Drag( cr, furniture );
	}

	void _InitDragging( Item& item, bool firstTime )
	{
		SETFLAG( item.Flags, ITEM_NO_BLOCK );
		item.SetEvent( ITEM_EVENT_WALK, "e_DragMoving" );
		
		_InitFurniture( item, firstTime );
		item.Update();
	}
	
	void _InitStopped( Item& item, bool firstTime )
	{
		UNSETFLAG( item.Flags, ITEM_NO_BLOCK );
		item.SetEvent( ITEM_EVENT_WALK, null );
		item.HolderCr = 0;
		
		_InitFurniture( item, firstTime );
		item.Update();
	}
	
	void e_DragMoving( Item& item, Critter& cr, bool entered, uint8 dir ) 
	{
		if( !entered || item.HolderCr != int(cr.Id) ) return;

		Map@ map = cr.GetMap();
		uint16   x = cr.HexX, y = cr.HexY;
		map.MoveHexByDir( x, y, dir, 1 );
		
		if( !map.IsHexPassed( x, y ) )
		{
			map.SetText( item.HexX, item.HexY, COLOR_LGRAY, ":стук:" );
			StopDragging( cr, item );
			return;
		}
		
		DraggingSound( map, item, x, y );
		
		MoveItem( item, 1, map, x, y );
	}

	uint cte_DraggingFurniture( Critter& cr, int identifier, uint& rate )
	{
		Item@ furniture = GetItem( rate );
		if( !valid( furniture ) )
			return 0;
		
		uint dist = GetDistantion( cr.HexX, cr.HexY, furniture.HexX, furniture.HexY );
		
		Map@ map = cr.GetMap();
		if( map.Id != furniture.MapId )
			dist = 0;
		
		uint16   x = cr.HexX, y = cr.HexY;
		map.MoveHexByDir( x, y, cr.Dir, 1 );

		bool stopped = dist > 2 || !valid( map )
								|| cr.IsRuning || cr.IsDead() || cr.IsKnockout()
								|| cr.StatBase[ ST_LAST_CONT_ID ] != int(rate)
								|| cr.Timeout[ TO_BATTLE ] > 0
								|| !map.IsHexPassed( x, y )
								;

		if( stopped )
		{
			if( !map.IsHexPassed( x, y ) )
			{
				Item@ furniture = GetItem( rate );
				map.SetText( furniture.HexX, furniture.HexY, COLOR_LGRAY, ":стук:" );
			}
			StopDragging( cr, furniture );
			return 0;
		}

		
		setCartPicMap( furniture, cr.Dir );
		
		DraggingSound( map, furniture, x, y );
		MoveItem( furniture, 1, map, x, y );
		
		return REAL_SECOND( 1 );
	}
	
	void DraggingSound( Map& map, Item& furniture, uint x, uint y )
	{
		if( furniture.HexX == x && furniture.HexY == y )
			return;
		
		bool isCart = furniture.GetProtoId() == PID_CR_CART;
		
		//if( Random( 1, 100 ) > int( ( isCart ? 9 : 3 ) ) )
		//	return;
		
		string sound = "";
		
		
		if( isCart )
		{	
			string[]CartSoundNames = { "cart1.ogg",  "cart2.ogg" };
			sound = CartSoundNames[ Random( 0, CartSoundNames.length() - 1 ) ];
		}
		else
		{
			string[] DraggingSoundNames = { "FurnitureDragging1.ogg",  "FurnitureDragging2.ogg", "FurnitureDragging3.ogg", "FurnitureDragging4.ogg", "FurnitureDragging5.ogg" };
			sound = DraggingSoundNames[ Random( 0, DraggingSoundNames.length() - 1 ) ];
		}

		map.PlaySound( sound, furniture.HexX, furniture.HexY, 5 );
	}
	
	void CheckCartPicMap( Item& furniture ) 
	{
		if( furniture.GetProtoId() != PID_CR_CART ) return;
		
		uint[] values = { furniture.Id };
		CreateTimeEvent( __FullSecond + REAL_SECOND( 1 ), "furniture@e_checkCartPicMap", values, true );
	}
	
	uint e_checkCartPicMap( uint[]@ values )
	{
		if( !valid( values ) || values.length() != 1 )
			return 0;
		
		Item@ cart = GetItem( values[0] );
		if( !valid( cart ) ) return 0;
		
		setCartPicMap( cart, cart.State );
		return 0;
	}
	
	bool setCartPicMap( Item& furniture, uint dir )
	{
		if( furniture.GetProtoId() != PID_CR_CART )
			return false;
		
		if( int(dir) != furniture.State )
		{
			furniture.State = dir;
			furniture.PicMap = GetStrHash( "art\\items\\misc\\cart\\cart_dir" + dir + ".fofrm" );
		}
		
		Item_SetFrame( furniture, LoadedPercent( furniture ) / 20 );
		
		furniture.Update();
		
		return true;
	}
	
	//import bool isFurniture( Item@ item ) from "furniture";
	bool isFurniture( Item@ item ) //exported
	{
		if( !valid( item ) ) return false;
		
		InitFurnitures();
		
		return furnitures.has( item.GetProtoId() );
	}
#endif

#ifndef __FURNITURE_TOOLS
	#define __FURNITURE_TOOLS
	class Tool
	{
		uint pid;
		uint power;
		//Можно привязать стат, влияющий на мощность применения.
		
		Tool( uint pid, uint power )
		{
			this.pid = pid;
			this.power = power;
		}
		
		bool check( Critter& cr, Item& target, uint tool )
		{
			if( tool != pid ) return false;
			
			return UseOn( cr, target );
		}
		
		bool UseOn( Critter& cr, Item& target )
		{
			if( target.Durability <= 0 )
				return FailedAttempt( cr, "Объект не требует демонтажа, он уже готов к переноске." );
			
			if( !isGM(cr) && target.Holding > 0 )
				return FailedAttempt( cr, "Стандартные способы демонтажа тут бесполезны." );
				
			if( !isGM(cr) && cr.Stat[ ST_LEVEL ] < 3 )
				return FailedAttempt( cr, "Недоступно до 4-го уровня." );

			if( !isGM(cr) && cr.Timeout[ TO_SK_REPAIR ] > 0 )
				return FailedAttempt( cr, "Вы слишком устали." );
			
			if( !isGM(cr) && cr.ParamBase[ SK_DESTROY ] < SK_MIN + GetPower( target, power ) )
				return FailedAttempt( cr, "Слишком прочно закреплено, попробуйте другой инструмент." );
			
			cr.Say( SAY_EMOTE_ON_HEAD, "Демонтирует" );
			cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_MINUTE(10) * target.Durability;
			target.Durability--;
			return true;
		}	
	}

	Tools@ CreateToolsList()
	{
		return Tools();
	}

	class Tools
	{
		Tool[] list;
		
		Tools() {}
		
		Tools@ add( uint pid, uint power ) 
		{
			return this.add( Tool( pid, power ) );
		}
		
		Tools@ add( Tool@ item ) 
		{
			list.insertLast( item );
			return this;
		}
		
		bool hint( Critter& cr )
		{
			if( list.length() == 0 ) return false;
			
			cr.Say( SAY_NETMSG, "Подходящие инструменты:" );
			
			for( uint i = 0, len = list.length(); i < len; i++ )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, 100 * list[i].pid );
				cr.Say( SAY_NETMSG, "  Сила: " + list[i].power );
			}
			return true;
		}
		
		bool check( Critter& cr, Item& target, Item@ tool )
		{
			if( !valid( tool ) ) 
				return hint(cr);
			
			uint pid = tool.GetProtoId();
			
			if( pid == PID_IRON_PROD )
			{
				cr.Say( SAY_EMOTE_ON_HEAD, "Занимается монтажом" );
				
				if( !isGM(cr) && cr.Stat[ ST_LEVEL ] < 3 )
					return FailedAttempt( cr, "Недоступно до 4-го уровня." );

				if( !isGM(cr) && cr.Timeout[ TO_SK_REPAIR ] > 0 )
				{
					cr.Say( SAY_NETMSG, "Вы ещё не закончили прошлый заход." );
					return true;
				}
				
				_SubItem( tool, 1 );
				target.Durability++;
				cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_MINUTE(5);
				return true;
			}
			
			for( uint i = 0, len = list.length(); i < len; i++ )
				if( list[i].check( cr, target, pid ) )
					return true;
			
			return false;
		}
	}
#endif

#ifndef __FURNITURE__TESTS
	#define __FURNITURE__TESTS
	
	//~run furniture go 0 0 0
	void go( Critter& cr, int p0, int p1, int p2 )
	{
		cr.Say( SAY_NETMSG, "Put firniture tests here." );
		TestUse( cr, p0, p1 );
	}

	void TestUse( Critter& cr, int furniture_id, int skill )
	{
		Item@ target = GetItem( furniture_id );
		if( !valid( target ) )
		{
			cr.Say( SAY_NETMSG, "Предмет не найден." );
			return;
		}
		
		if( _Skill( target, cr, skill ) )
		{
			cr.Say( SAY_NETMSG, "Тест успешен, дополнительная информация могла быть здесь." );
		}
		else
		{
			cr.Say( SAY_NETMSG, "Тест провален, дополнительная информация могла быть здесь." );
		}
	}
#endif

#ifndef __FURNITURE__CLASSES
	#define __FURNITURE__CLASSES
	
	FurnitureList@ CreateFurniture( string name )
	{
		return FurnitureList( name );
	}
	
	class FurnitureList
	{
		string name;
		Furniture@[] list;
		
		FurnitureList( string name )
		{
			this.name = name;
		}
		
		FurnitureList@ add( Furniture@ item )
		{
			list.insertLast( item );
			return this;
		}
			
		bool rotate( Critter@ cr, Item& furniture, bool clockwise = true )
		{
			if( !isGM(cr) && ( furniture.Durability > 0 || furniture.Holding > 0 ) )
			{
				cr.Say( SAY_NETMSG, "Предмет монтирован, его так просто не повернуть." );
				return true;
			}
			
			for( uint i = 0; i < list.length(); i++ )
				if( list[i].Rotate( furniture, clockwise ) )
				{
					LogItemMovement( cr, furniture, "поворачивает " + ( clockwise ? "по" : "против" ) + " часовой" );
					return true;
				}
				
			return false;
		}
		
	bool Drag( Critter& cr, Item& furniture ) 
	{
		if( furniture.HolderCr != 0 && furniture.HolderCr != int(cr.Id) )
		{
			cr.Say( SAY_NORM, "*пытается остановить*" );//TODO: Можно тут роллы сделать, и в случае успеха - забирать управление или останавливать процесс.
			return true;
		}
		
		if( cr.GetTimeEvents( CTE_FURNITURE_DRAGGING, null, null, null ) > 0 )
		{
			StopDragging( cr, furniture );
			return true;
		}
		
		if( furniture.GetType() == ITEM_TYPE_DOOR )
			return false;
		
		if( !isGM(cr) && furniture.LockerId != 0 )
		{
			LogItemMovement( cr, furniture, "не может сдвинуть мебель, запертую на замок" );
			cr.Say( SAY_NETMSG, "Данный объект так просто не сдвинуть. Сначала снимите замок." );	
			return true;
		}
		
		if( !isGM(cr) && furniture.Holding > 0 )
		{
			LogItemMovement( cr, furniture, "не может сдвинуть мебель, специально фиксированную ГМом" );
			cr.Say( SAY_NETMSG, "Данный объект так просто не сдвинуть. Прийдётся проявить сноровку и фантазию." );	
			return true;
		}

		if( !isGM(cr) && ( !FLAG( furniture.Flags, ITEM_CAN_PICKUP ) || furniture.Durability > 0 ) )
		{
			LogItemMovement( cr, furniture, "не может толкать вмонтированную мебель", 2 ); 
			cr.Say( SAY_NETMSG, "Требуется демонтаж." );
			return true;
		}
		
		if( FLAG( furniture.LockerCondition, LOCKER_JAMMED ) || FLAG( furniture.LockerCondition, LOCKER_BROKEN ) || FLAG( furniture.LockerCondition, LOCKER_NOOPEN ) )
		{
			LogItemMovement( cr, furniture, "не может толкать заблокированную мебель", 2 ); 
			cr.Say( SAY_NETMSG, "Из этого ничего не вышло." );
			return true;
		}
		
		if( ( furniture.Proto.Container_Changeble && !FLAG( furniture.LockerCondition, LOCKER_ISOPEN ) ) || FLAG( furniture.LockerCondition, LOCKER_LOCKED ) )
		{
			LogItemMovement( cr, furniture, "пытается укатить закрытую мебель", 2 ); 
			cr.Say( SAY_NETMSG, "Нельзя перемещать закрытую и запертую мебель." );
			return true;
		}

		int freeWeight = cr.Stat[ ST_CARRY_WEIGHT ] * ContainerBonusWeight( furniture ),
			contWeight = ItemsWeight( furniture );
			
		if( !isGM(cr) && freeWeight < contWeight )
		{
			cr.Say( SAY_NETMSG, "Слишком тяжело." );
			LogItemMovement( cr, furniture, "не может толкать тяжёлую мебель", 2 );
			return true;
		}

		cr.Say( SAY_NORM, "*толкает*" );
		
		furniture.SetScript( "_InitDragging" );
		furniture.HolderCr = cr.Id;
		
		cr.StatBase[ ST_LAST_CONT_ID ] = furniture.Id;
		cr.AddTimeEvent( "cte_DraggingFurniture", 0, CTE_FURNITURE_DRAGGING, furniture.Id );		
		
		LogItemMovement( cr, furniture, "толкает мебель (" + cr.HexX + ", " + cr.HexY + ")", 2 );
		return true;
	}
		
		bool has( uint pid )
		{
			for( uint i = 0; i < list.length(); i++ )
				if( list[i].has( pid ) )
					return true;
				
			return false;
		}
	}

	Furniture@ CreateFurniture( string name, uint basePID )
	{
		return Furniture( name, basePID );
	}

	class Furniture
	{
		uint basePID;
		string name;
		uint[] pids;
		
		Furniture( string name, uint basePID )
		{
			this.name = name;
			this.basePID = basePID;
			this.pids.insertLast( basePID );
		}
		
		void set( uint[] pids )
		{
			this.pids = pids;
		}
		
		bool has( uint pid )
		{
			if( basePID == pid ) return true;
			
			for( uint i = 0; i < pids.length(); i++ )
				if( pids[i] == pid )
					return true;
				
			return false;
		}
		
		Furniture@ add( uint rotation_picture_pid )
		{
			if( rotation_picture_pid != 0 )
				pids.insertLast( rotation_picture_pid );
			
			return this;
		}
		
		bool setPic( Item& target )
		{
			return setPic( target, target.State );
		}

		bool setPic( Item& target, uint index )
		{
			if( index >= pids.length() ) 
				return false;
			
			return setItemPic( target, pids[index] );
		}
		
		bool ChangeState( Item& target, bool clockwise = true )
		{
			if( clockwise )
				target.State++;
			else
				target.State--;

			int state = target.State;
			
			if( state >= int( pids.length() ) )
			{
				target.State = 0;
				return true;
			}
			
			if( state < 0 )
			{
				target.State = pids.length() - 1;
				return true;
			}
			
			return true;
		}
		
		bool Rotate( Item& target, bool clockwise = true )
		{
			if( target.GetProtoId() != basePID || pids.length() == 0 ) return false;
			
			if( !setCartPicMap( target, ( target.State + ( clockwise ? 1 : 6 ) ) % 6 ) )
				ChangeState( target, clockwise );
			
			setPic( target );
			return true;
		}
	}
#endif

#ifndef __FURNITURE__UTILS
	#define __FURNITURE__UTILS
	
	bool setItemPic( Item& target, uint protoPID )
	{
		if( protoPID == 0 ) return false;
		
		ProtoItem@ proto = GetProtoItem( protoPID );
		if( !valid( proto ) ) return false;
		
		target.PicMap = proto.PicMap;
		target.PicInv = proto.PicMap;
		target.Update();
		return true;
	}
#endif