// Author: Anuri

#include "_utils.fos"
#include "_ltp.fos"
#include "STAT_MODS_H.fos"

import void AffectPoison( Critter& cr, int value ) from "poison";
import void AffectRadiation( Critter& cr, int value ) from "radiation";
import void SetDrug( Critter& cr, uint16 drugPid ) from "drugs";
import void AffectParalysis( Critter& cr, int value ) from "paralysis";

#define REMAINING_USES							Val0 	// Кол-во оставшихся использований
#define EXTRA_WEIGHT							Val2	// Дополнительный вес жидкости
#define TOXIN_LEVEL								Val5 	// Уровень токсичности
#define POLUTION_LEVEL							Val7 	// Кол-во загрязнения
#define TASTE 									Val8 	// Вкус
#define SPIRIT_LEVEL							Val9 	// Градус спирта

const string[] ConsumptionSounds = {"water.wav"}; //"gulp1.ogg"

void ProccessFood( Critter& cr, Critter& target, Item& item )
{
	if( cr.Id != target.Id && !target.IsDead() && !target.IsKnockout() && target.StatBase[ ST_CURRENT_HP ] > 0 )
	{
		cr.Say( SAY_NETMSG, "Цель сопротивляется." );
		SayLog( cr, crInfo( cr ) + " безуспешно пытается применить " + itemDesc( item ) + " на " + crInfo( target ) + "." );
		return;
	}
	
	uint flag = item.Proto.Food_Flags;
	
    CheckFoodFlags( target, flag );
}

void ProccessDrink( Critter& cr, Critter& target, Item& item )
{
	if( cr.Id != target.Id && !target.IsDead() && !target.IsKnockout() && target.StatBase[ ST_CURRENT_HP ] > 0 )
	{
		cr.Say( SAY_NETMSG, "Цель сопротивляется." );
		SayLog( cr, crInfo( cr ) + " безуспешно пытается применить " + itemDesc( item ) + " на " + crInfo( target ) + "." );
		return;
	}
	
    uint flag = item.Proto.Food_Flags;
	
	CheckSpiritLevel( target, item );
    CheckFoodFlags( target, flag );
	CheckToxins( target, item );
	ApplyFoodEffects( target, item );
	
	drinking_process( target, item );
}

void drinking_process( Critter& cr, Item@ item )
{		
	Emote( cr, item );
	
	if( !SpillOut( item ) )//После этой ф-ии в &item уже указатель на предмет-замену (вскрытую тару).
		return;
		
	start_consuming( cr, item );
}

//import bool ConsumeMeal( Critter& cr, uint water_pid, uint amount ) from "food";
bool ConsumeMeal( Critter& cr, uint water_pid, uint amount )//exported
{
	ProtoItem@ proto = GetProtoItem( water_pid );
	if( !valid( proto ) ) return testInfo( cr, "drinkWater: !valid pid " + water_pid );
	cr.Say( SAY_EMOTE, "Пьет воду" );
	cr.StatBase[ ST_HUNGER ] += amount * proto.Food_Restore;
	cr.StatBase[ ST_THIRST ] += amount * proto.Food_Thrist;
	cr.StatBase[ ST_THIRST ] -= amount * proto.Food_Restore / 3;//TODO: Проверить, нужно-ли это вообще в нашей логике потребления пищи.
	
	affectFoodEffects( cr, water_pid, amount );
	
	SetDrug( cr, water_pid );
	
	return true;
}

bool affectFoodEffects( Critter& cr, uint food_pid, uint amount = 1 )
{
	ProtoItem@ proto = GetProtoItem( food_pid );
	if( !valid( proto ) ) return testInfo( cr, "affectFoodEffects: !valid pid " + food_pid );

	uint flag = proto.Food_Flags;
    CheckFoodFlags( cr, flag );
	
	return true;
}

void CheckFoodFlags( Critter& target, uint flag )
{
	if( flag != 0 )
    {
        if( FLAG( FOOD_KNOCKOUT, flag ) ) {
           target.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 100, target.HexX, target.HexY );
        }
        
		if( FLAG( FOOD_POISONED, flag ) ) {
            AffectPoison( target, Random( 10, 25 ) );
        }
		
        if( FLAG( FOOD_RADIOACTIVE, flag ) ) {
            AffectRadiation( target, Random( 10, 25 ) );
        }
    }
}

void CheckToxins( Critter& target, Item& item )
{
	if( item.TOXIN_LEVEL >= 100 ) {
		
		if( target.Param[ QST_GAMEMODE ] == GAME_TEST ) {
			target.Say( SAY_NETMSG, "Вы чувствуете нейротоксин в употребляемом продукте. Его сила ~" + item.TOXIN_LEVEL + "." );
		}
		
		target.ParamBase[CR_VAL9] = 1; //Быстрый режим паралича.
		AffectParalysis( target, item.TOXIN_LEVEL );
		
	} else {
		
		if( target.Param[ QST_GAMEMODE ] == GAME_TEST ) {
			target.Say( SAY_NETMSG, "Употребляемый продукт недостаточно вреден, что бы подействовать как нейротоксин. Его сила ~" + item.TOXIN_LEVEL + "." );
		}
	}
}

void ApplyFoodEffects( Critter& target, Item& item )
{
	uint8  hungerModifier = item.Proto.Food_Restore;
    uint8  ThirstModifier = item.Proto.Food_Thrist;
	target.StatBase[ ST_HUNGER ] += hungerModifier; //* SATURATION_SIMPLIFIER; пока отключено для напитков
	target.StatBase[ ST_THIRST ] += ThirstModifier; //* SATURATION_SIMPLIFIER;
	target.ParamBase[ ST_POISONING_LEVEL ] += item.POLUTION_LEVEL;
	if( target.ParamBase[ ST_RADIATION_LEVEL ] > 0 ) {
		target.ParamBase[ ST_RADIATION_LEVEL ] -= item.SPIRIT_LEVEL;
	}
}

void Emote( Critter& target, Item& consumed )
{
	target.Say( SAY_EMOTE_ON_HEAD, "Пьет" );

	string consumedTaste = "";
	string radLevel = "";
	string poisonLevel = "";
	
	if( target.ParamBase[ ST_RADIATION_LEVEL ] > 0 && consumed.SPIRIT_LEVEL != 0 ) {
		int amount = consumed.SPIRIT_LEVEL;
		radLevel = " Вы потеряли: " + "|0xFFFF00 " + amount + " |0x3CF800 рад.";
	}
	
	if( consumed.POLUTION_LEVEL != 0 ) {
		int poison = consumed.POLUTION_LEVEL;
		poisonLevel = " Вы получили: " + "|0xFFFF00 " + poison + " |0x3CF800 пунктов отравления.";
	}
	
	uint16 consumedPid = consumed.GetProtoId();
	consumedTaste = " " + GetMsgStr( 0, TEXTMSG_ITEM, consumedPid * 100 );
	
	target.Say( SAY_NETMSG, "Вы употребили: " + "|0xFFFF00" + consumedTaste + "|0x3CF800 . " + radLevel  + " |0x3CF800 " + poisonLevel ); 	
}

void CheckSpiritLevel( Critter& target, Item& consumed )
{
	if( consumed.SPIRIT_LEVEL != 0 ) { return;
	}
	
	const uint8 item_Subtype = consumed.Proto.Item_Subtype;
	switch( item_Subtype )
	{
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_LIGHT ):
			consumed.SPIRIT_LEVEL = 1;
			break;
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_MEDIUM ):
			consumed.SPIRIT_LEVEL = 3;
			break;
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_HEAVY ):
			consumed.SPIRIT_LEVEL = 8;
			break;
		default:
			consumed.SPIRIT_LEVEL = 0;
			break;
	}
}

bool ltp_install_inited = false;
void ltp_install_init()
{
	LTPREG( LTP_CONSUMING, process_consuming )
	ltp_install_inited = true;
}

bool start_consuming( Critter& cr, Item& consumed )
{
	if(!ltp_install_inited) 
		ltp_install_init();
	
	//cr.ParamBase[ CR_IS_USING ] = 1;
	//cr.SetAnims( COND_LIFE, 0, ANIM2_DRINKING ); - не хватает технологии выбора фрейма
	
	StartProcess( cr, LTP_CONSUMING, 0, 0, consumed.Id, 0 );
	uint[] values = { cr.Id };
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_ConsumptionSound", values, true);
	return true;
}

uint process_consuming( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_CONSUMING )
	
  	Item@ consumed = GetItem( param2 );

	param0++;
		
	if( param0 > 4 )
	{
		/*cr.ParamBase[ CR_IS_USING ] = 0;
		if(cr.Anim2Life == ANIM2_DRINKING) {		 - не хватает технологии выбора фрейма
			cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
		}*/
		return 0;
	}

	return 1000;
}

uint e_ConsumptionSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	map.PlaySound( ConsumptionSounds[ Random( 0, ConsumptionSounds.length() -1 ) ], cr.HexX, cr.HexY, 5 );
	return 0;
}