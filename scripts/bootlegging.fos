#ifndef BOOTLEGGING
#define BOOTLEGGING

#include "_utils.fos"
#include "bootlegging_h.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "firestarter_h.fos"
#include "explode_h.fos"
#include "speed_h.fos"

bool IsStill( Item& still )
{
	return Stills.find( still.GetProtoId() ) != -1;
}

bool UseItemOnStill( Critter& cr, Item@ item, Item@ still )
{
	if( still is null || !IsStill( still ) )
	{
		return false;
	}
	
    Map@ map = cr.GetMap();
 	if( map is null || item is null )
	{
		return true;
	}
	
	if( hasItem( cr, PID_HOMEBREW ) || hasItem( cr, PID_HOMEBREW_PRT ) )
	{
		TransferToStill( cr, item, still );
	}
	else if( hasItems( cr, FireFuel ) )
	{
		FeedStillFire( cr, map, item, still );
	} 
	else if( hasItem( cr, PID_BOTTLE_GLASS, SLOT_HAND1 ) || hasItem( cr, PID_SPIRIT_PRT, SLOT_HAND1 ) )
	{
		start_spirit_out( cr, still );
	}
	else if( hasItems( cr, Igniters ) )
	{
		IgniteStill( cr, item, still );
	}
	return true;
}

bool HasFuel( Item& still )
{
	return still.CURRENT_FUEL > 0;
}

bool IgniteStill( Critter& cr, Item& item, Item& still )
{	
	if( !HasFuel(still) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL );
		return false;
	}
	
	if( still.EVENT == 0 )
	{
		if( item.GetProtoId() == PID_FLINT && Random( 1, 300 ) > cr.Skill[SK_OUTDOORSMAN] )
		{
			_SubItem( item, 1 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FLINT_ENDED )
		}
		still.STATE = STATE_WORKING_100;
		_CritAnimateUse( cr );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_IGNITE_FIRE );
		still.PicMap = PIC_STILL_ANIM_ON;
		setAnimState( still );
		uint[] values = { still.Id };
		still.STORED_HEAT = FloatToBits( 1 );
		still.CURRENT_PRESSURE = FloatToBits( 1 );
		still.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 0 ) ), "e_StillBurn", values, true );
	}
	return true;
}

float Mass( Item& still )
{
    float result = 0.09f; // air mass in empty still
    if( still.CURRENT_RAW_MATERIAL > 0 )
	{
        result = still.CURRENT_RAW_MATERIAL / 1000.0f;
    }
    return result;
}

float last_temp = 0;

uint e_StillBurn( uint[]@ values )
{
	uint itemId = values[0];
	Item@ still = GetItem( itemId );
	
	if( valid( still ) )
	{
		float System_heat = FloatFromBits( still.STORED_HEAT );
		float M = Mass(still);
		float boiling_Pressure_Mod = ( still.IMPURITIES / 5000.0f );
		
		if( still.STATE > STATE_PREPARE && System_heat >= 0.5f )
		{
			uint16 hexX = 0, hexY = 0;
			Map@ map = still.GetMapPosition( hexX, hexY );
			PlayGenericSound( map, still.HexX, still.HexY, "CHEMICAL.mp3", 10 );

			float valve_level = 0.0f;
			switch( still.STATE )
			{
				case( STATE_WORKING_0 ):
					valve_level = 0.0f;
					break;
				case( STATE_WORKING_25 ):
					valve_level = 0.25f;
					break;
				case( STATE_WORKING_50 ):
					valve_level = 0.50f;
					break;
				case( STATE_WORKING_75 ):
					valve_level = 0.75f;
					break;
				case( STATE_WORKING_100 ):
					valve_level = 1.0f;
					break;
			}

			float Q_burning = FUEL_BURN_AMOUNT * valve_level; //const 45
			still.CURRENT_FUEL -= ( Q_burning * FUEL_MODIFIER ); // wastes fuel 50% slower than all other fires
			if( still.CURRENT_FUEL < 0 )
			{
				still.CURRENT_FUEL = 0;
			}
			
			if( still.CURRENT_FUEL <= 0.0f )
			{
				Q_burning = 0.0f;
			}
			
			System_heat += Q_burning;
			
			float TSP = ( THERM_WATER_TSP * M );
			
			float HOTTNESS = ( System_heat / TSP ) + ENVIROMENT_TEMPRATURE_K;
	
			float Q_loss = ( HOTTNESS / L_RESIST ) * 3.14f * THERM_STILL_HIGHT;
			
			System_heat -= Q_loss;
			
			still.STORED_HEAT = FloatToBits( System_heat );
			
			float T2 = ( System_heat / TSP ) + ENVIROMENT_TEMPRATURE_K;
			
			if( T2 >= MAX_TEMPRATURE )
			{
				still.IMPURITIES++;
			}
			
			if( ( T2 >= MAX_TEMPRATURE + 100 ) && still.GetProtoId() != PID_STILL_S_BROKEN )
			{
				for( uint i = 0; i < 6; i++ )
				{
					uint16 tx = still.HexX, ty = still.HexY;
					map.MoveHexByDir( tx, ty, i, 1 );
					Critter@ victim = map.GetCritter( tx, ty );
					if( !map.IsHexPassed( tx, ty ) && !valid( victim ) )
					{
						continue;
					}
					GenerateFire( map, tx, ty, 0, 2, 0 );
					still.ChangeProto( PID_STILL_S_BROKEN );
					still.PicMap = still.Proto.PicMap;
					still.STILL_SPIRIT_LEVEL = 0.0f;
					still.CURRENT_PRODUCT = 0.0f;
					still.STILL_SPIRIT_LEVEL = 0.0f;
					still.IMPURITIES = 100.0f;
					setAnimState( still );
				}
			}
			
			still.CURRENT_TEMPRATURE = FloatToBits( T2 );
			
			float Sys_ST = FloatFromBits( still.STORED_HEAT );
			float Cur_temp = FloatFromBits( still.CURRENT_TEMPRATURE ) - 273.15f;
			
			//Log( "TSP: "+ TSP + ", Горение: " + Q_burning + ", Потери: " + Q_loss + ", Накопл Тепло: " + Sys_ST + ", Т-текущая: " + Cur_temp + " dT: " + ( Cur_temp - last_temp ) );
			last_temp = Cur_temp;
			
			float CurrentTemp = FloatFromBits( still.CURRENT_TEMPRATURE );
			float boiling_temp = Boiling_Temperature_Calc( still );
			
			if(  CurrentTemp >= boiling_temp )
			{
				Item@ steamFX = map.AddItem( still.HexX, still.HexY, PID_STILL_STEAM, 1 );
				uint[] vals = { steamFX.Id };
				steamFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_steamFX", vals, true );
				
				if( still.CURRENT_RAW_MATERIAL > 0.0f )
				{
					
					still.CURRENT_RAW_MATERIAL -= RAW_MATERIAL_LOSS;
					
					if( still.CURRENT_RAW_MATERIAL <= 0.0f )
					{
						still.CURRENT_RAW_MATERIAL = 0.0f;
					}
					
					if( still.STILL_SPIRIT_LEVEL > 0.0f )
					{
						if( still.STILL_SPIRIT_LEVEL > ALCOHOL_GAIN )
						{
							still.STILL_SPIRIT_LEVEL -= ALCOHOL_GAIN;
							still.CURRENT_PRODUCT += ALCOHOL_GAIN;
						}
						else
						{
							still.CURRENT_PRODUCT += still.STILL_SPIRIT_LEVEL;
							still.STILL_SPIRIT_LEVEL = 0.0f;
						}					
					}
					
					float CurrentPressure = FloatFromBits( still.CURRENT_PRESSURE );
					CurrentPressure += boiling_Pressure_Mod;
					still.CURRENT_PRESSURE = FloatToBits( CurrentPressure );

					if( FloatFromBits( still.CURRENT_PRESSURE ) >= MAX_PRESSURE )
					{
						CreateTimeEvent( AFTER( REAL_SECOND( Random( 5, 20 ) ) ), "e_Explode", values, true );
					}
				}
			}
			return FIRE_BURNING_TIME;
		}
		
		still.STATE = STATE_PREPARE;
		if( still.GetProtoId() == PID_STILL_S )
		{
			still.PicMap = still.Proto.PicMap;
			setAnimState( still );
		}
		still.EVENT = 0.0f;
		still.CURRENT_TEMPRATURE = 0.0f;
		still.STORED_HEAT = 0.0f;
		
		uint16 hexX=0, hexY=0;
		Map@ map = still.GetMapPosition( hexX, hexY );
		Item@ fireFX = map.AddItem( still.HexX, still.HexY, PID_STEAM, 1 );
		uint[] val = { fireFX.Id };
		fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 2 ) ), "e_fireFX", val, true );
		EraseTimeEvent( still.EVENT );
	}
	return 0;
}

uint Boiling_Temperature_Calc( Item& still ) 
{
	float BaseBoilingTemperature = 273.15f + 100.0f; // 100% C
	
	float currentAlcoholPercentage = 0;
	
	if( still.CURRENT_RAW_MATERIAL > 0 )
	{
		currentAlcoholPercentage = still.STILL_SPIRIT_LEVEL * 100.0f / still.CURRENT_RAW_MATERIAL;
	}
	
	float stillBoilingTemperature = BaseBoilingTemperature - currentAlcoholPercentage;
	
	return stillBoilingTemperature;
}

bool FeedStillFire( Critter& cr, Map& map, Item& item, Item& still )
{
	if( still.CURRENT_FUEL == STILL_MAX_FUEL )
	{	
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TOO_MUCH_FUEL );
		return false;
	}
	
	_SubItem( item, 1 );
	_CritAnimateUse(cr);
	if( item.GetProtoId() == PID_COAL )
	{
		still.CURRENT_FUEL = MIN( still.CURRENT_FUEL + 5400, STILL_MAX_FUEL );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ADD_COAL );
		PlayGenericSound( map, still.HexX, still.HexY, "ROCK.mp3", 10 );
	}
	else
	{	
		still.CURRENT_FUEL = MIN( still.CURRENT_FUEL + 1800, STILL_MAX_FUEL );
		cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_EMOTE_ADD_WOOD );
		PlayGenericSound( map, still.HexX, still.HexY, "BRDSWELL.mp3", 10 );
	}

	int occupancy_rate = ( still.CURRENT_FUEL * 100 / STILL_MAX_FUEL );
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FIREPLACE_FILLED, "$rate" + occupancy_rate);
	
	return true;
}

bool TransferToStill( Critter& cr, Item& homebrew, Item& still )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( still ) )
	{
		return false; 
	}
	
	if( still.STATE > STATE_PREPARE )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_NOT_READY );
		return false; 
	}
	
	if( homebrew.GetProtoId() != PID_HOMEBREW && homebrew.GetProtoId() != PID_HOMEBREW_PRT	)
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_STILL_ITEM );
		return false; 
	}

	PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
	
	if( homebrew.GetProtoId() == PID_HOMEBREW )
	{
		still.CURRENT_RAW_MATERIAL += 500;
		still.STILL_SPIRIT_LEVEL += 500 * homebrew.HB_SPIRIT_LEVEL / 100;
		still.IMPURITIES += homebrew.HB_POLUTION_LEVEL;
	}
	else if( homebrew.GetProtoId() == PID_HOMEBREW_PRT )
	{
		still.CURRENT_RAW_MATERIAL += homebrew.REMAINING_USES * 100;
		still.STILL_SPIRIT_LEVEL += homebrew.REMAINING_USES * 100 * homebrew.HB_SPIRIT_LEVEL / 100;
		still.IMPURITIES += homebrew.REMAINING_USES * 100 * homebrew.HB_POLUTION_LEVEL / 100;
	}
		
	_SubItem( homebrew, 1 );
	cr.AddItem( PID_BOTTLE_GLASS, 1 );

	if( still.CURRENT_RAW_MATERIAL > MAX_RAW_MATERIAL )
	{
		still.CURRENT_RAW_MATERIAL = MAX_RAW_MATERIAL;
		map.SetTextMsg( still.HexX, still.HexY, COLOR_LGRAY, TEXTMSG_TEXT, STR_MAPMSG_TOO_MUCH_HOMEBREW );
	}
	
	ShowContainer( cr, still, TRANSFER_HEX_CONT_UP );
	return true;
}

uint e_Explode( uint[]@ values )
{
	uint itemId = values[0];
	Item@ still = GetItem( itemId );
	if( valid( still ) )    
	{
		uint16 hexX=0, hexY=0;
		Map @map = still.GetMapPosition( hexX, hexY );
		ExplodeEx( map, hexX, hexY, PID_EXPLODE_MISSILE2, 0, Random( 70, 150 ), DAMAGE_EXPLODE, 3, 0 );
		map.AddItem( hexX, hexY, Ashes[ Random( 0, Ashes.length() - 1 ) ], 1 );
		Item@ fireFX = map.AddItem( hexX, hexY, PID_SMOKE, 1 );
		
		uint[] values = {fireFX.Id};
		fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 2 ) ),"e_fireFX", values, true );
		uint randomDebree = Random( 2, 5 );
		for( uint i = 0; i < randomDebree; i++ )
		{
			uint16 hx=still.HexX, hy=still.HexY;
			map.MoveHexByDir( hx, hy, Random( 0, 5 ), Random( 1, 3) );
			if( map.IsHexPassed( hx, hy ) )
			{
				map.AddItem( hx, hy, Wreckage[ Random( 0, Wreckage.length() -1 ) ] , 1 );
			}
		}
		still.EVENT = 0.0f;
		EraseTimeEvent( still.EVENT );
		uint16 tx=still.HexX, ty=still.HexY;
		DeleteItem( still );
		GenerateFire( map, tx, ty, 0, 2, 0 );
	}
	return 0;
}

uint e_fireFX( uint[]@ val )
{
	uint itemId = val[0];
	Item@ e_fireFX = GetItem( itemId );
	if( valid( e_fireFX ) )  
	{
		EraseTimeEvent( e_fireFX.EVENT );
		e_fireFX.EVENT = 0;
		DeleteItem( e_fireFX );
	}
	return 0;
}

uint e_steamFX( uint[]@ vals )
{
	uint itemId = vals[0];
	Item@ e_steamFX = GetItem( itemId );
	if( valid( e_steamFX ) )  
	{
		if( e_steamFX.CURRENT_TEMPRATURE >= 37500 )
		{
			uint16 hexX=0, hexY=0;
			Map@ map = e_steamFX.GetMapPosition( hexX, hexY );
			PlayGenericSound( map, hexX, hexY, "still_steam.ogg", 10 );
			return FIRE_BURNING_TIME;
		}
		
		EraseTimeEvent( e_steamFX.EVENT );
		e_steamFX.EVENT = 0;
		DeleteItem( e_steamFX );
	}
	return 0;
}

//========== TECHNICAL_ANIMATION_STATE_CHANGER ===============//
void setAnimState( Item& still )
{
	if( still.STATE > STATE_PREPARE )
	{	
		UNSETFLAG( still.Flags, ITEM_SHOW_ANIM_EXT );
		SETFLAG( still.Flags, ITEM_LIGHT );
		SETFLAG( still.Flags, ITEM_CAN_USE );
		UNSETFLAG( still.Flags, ITEM_CAN_PICKUP );
	}
	else
	{
		SETFLAG( still.Flags, ITEM_SHOW_ANIM_EXT );
		UNSETFLAG( still.Flags, ITEM_LIGHT );
	}
	still.Update();
}

//=============== STILL STATE DISCRIPTION ====================//
string@ GenerateDescription(Item& still)
{
	string@ info;
	bool is_working = false;
	switch( still.STATE )
	{
		case STATE_PREPARE:
			@info = "Still is not burning.";
			break;
		default:
			@info = "Still is burning, the gate: ";
			is_working = true;
	}
	
	if( is_working )
	{
		switch( still.STATE )
		{
			case STATE_WORKING_0:
				info += "Is closed.";
				break;
			case STATE_WORKING_25:
				info += "One quarter open.";
				break;
			case STATE_WORKING_50:
				info += "Half-open.";
				break;
			case STATE_WORKING_75:
				info += "Three quarters open.";
				break;
			case STATE_WORKING_100:
				info += "Fully open.";
				break;
		}
		
		float temprature = FloatFromBits( still.CURRENT_TEMPRATURE ) - 273.15f;
		info += "\n" "Temprature: " + temprature + " degree C.";

		float pressure = FloatFromBits( still.CURRENT_PRESSURE );
		info += "\n" "Pressure: " + pressure + " bar.";
	}

	float raw_material = still.CURRENT_RAW_MATERIAL / 1000.0f;
	float max_raw_material = MAX_RAW_MATERIAL / 1000.0f;
	info += "\nRaw product: " + raw_material + " / " + max_raw_material + " l.";

	string occupancy_level = ( still.CURRENT_FUEL * 100.0f / STILL_MAX_FUEL );
	info += "\nFuel: " + occupancy_level + " %";

	float product = still.CURRENT_PRODUCT / 1000.0f;
	info += "\nDistilled " + product + " litres of spirit.";

	return info;
}

//=============== MAIN MENU ====================//
void StartMenuStill( Critter& cr, Item& still )
{
	Map@ map = cr.GetMap();
    if( still is null || map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuStill(still, map);
    iDialogBox@ menu = OpenMenu( cr, "Still", handler );
}

class MenuStill: CenteredMenuHandler
{
	uint m_still_id;
	uint m_map_id;
	int m_last_state;
	int difficulty;
	
	MenuStill( Item& still, Map& map )
	{
		m_still_id = still.Id;
		m_map_id = map.Id;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		Item@ still = GetItem(m_still_id);
		Map@ map = GetMap(m_map_id);
		if( still is null || map is null )
		{
			return false;
		}

		bool locked_in_place = !FLAG( still.Flags, ITEM_CAN_PICKUP );

		if( locked_in_place )
		{
			if ( still.STATE == STATE_PREPARE )
			{
				if( menu.Button( "Detach" ) )
				{
					LockInPlace( cr, still );
					return true;
				}
				
				if( still.GetProtoId() != PID_STILL_S_BROKEN )
				{
					if( menu.Button( "Add homebrew" ) )
					{
						ShowContainer( cr, still, TRANSFER_HEX_CONT_UP );
						return false; 
					}
					
					if ( still.STATE < STATE_FINISH )
					{
						if( menu.Button( "Add fuel" ) )
						{
							Item@ fuel = FindStillFuel(cr);
							if( valid( fuel ) )
							{
								FeedStillFire( cr, map, fuel, still ); 
							}
							else
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_FIREFUEL_2 );
							}				
							return true;
						}
					}
										
					if( HasFuel( still ) && menu.Button( "Ignite" ) )
					{
						Item@ lighter = cr.GetItem( PID_LIGHTER, -1 );
						if( !valid( lighter ) )
						{
							@lighter = cr.GetItem( PID_FLINT, -1 );
						}
						
						if( !valid( lighter ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REQUIRE_LIGHTER );
						}
						else
						{
							IgniteStill( cr, lighter, still );
						}
						return true;
					}
				
					if( menu.Button( "Clean the still" ) )
					{
						if( !checkConsumables( cr ) )
						{ 
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_CONSUMABLES );
							for( uint i = 0; i < StillConsumables.length; i++ )
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_CONSUMABLES_PID, "$proto@msg item " + ( StillConsumables[i] * 100 ) + "@" );
							}	
							return true;
						}
						difficulty = still.IMPURITIES * 50;
						start_stillRepair( cr, still, difficulty );
						return false;
					}
					
					if( still.CURRENT_PRODUCT > 0 && menu.Button( "Pour spirit" ) )
					{
						start_spirit_out( cr, still );
						return false;
					}
				}
				else
				{
					if( menu.Button( "Still repair" ) )
					{
						if( !checkSkill( cr ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_SKILL );
							return true;
						}
						
						if( !checkTools( cr ) )
						{ 
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_TOOLS );
							for( uint i = 0; i < StillTools.length; i++ )
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_TOOLS_PID, "$proto@msg item " + ( StillTools[i] * 100 ) + "@" );
							}	
							return true;
						}
						
						if( !checkComponents( cr ) )
						{
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_PARTS_PID );
							for( uint i = 0; i < StillComponents.length; i++ )
							{
								cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NEED_PARTS_PID, "$proto@msg item " + ( StillComponents[i] * 100 ) + "@$amount" + StillComponentsAmount[i] );
							}			
							return true;
						}
						difficulty = 10000;
						start_stillRepair( cr, still, difficulty );
						return false;
					}
					
				}
			}
			else if( still.STATE < STATE_FINISH )
			{
				if ( menu.Button( "Close the gate" ) )
				{
					still.STATE = STATE_WORKING_0;
					return true;
				}
				
				if ( menu.Button( "Gate to 25%" ) )
				{
					still.STATE = STATE_WORKING_25;
					return true;
				}
				
				if ( menu.Button( "Gate to 50%" ) )
				{
					still.STATE = STATE_WORKING_50;
					return true;
				}
				
				if ( menu.Button( "Gate to 75%" ) )
				{
					still.STATE = STATE_WORKING_75;
					return true;
				}
				
				if ( menu.Button( "Open the gate" ) )
				{
					still.STATE = STATE_WORKING_100;
					return true;
				}
			}
		}
		else
		{
			if( menu.Button( "Anchor" ) )
			{
				LockInPlace( cr, still );
				return true;
			}
			
			if( menu.Button( "Pick up" ) )
			{
				PickItem( cr, still );
				ChangeCritterSpeed( cr );
				return false;
			}
		}
		
		if( menu.Button( "Close menu" ) )
		{
			return false;
		}
		return true;
	}

	string@ Description( Critter& cr )
	{
		Item@ still = GetItem(m_still_id);
		m_last_state = still.STATE;
		return GenerateDescription(still);
	}

	bool ShouldRedraw( Critter& cr )
	{
		Item@ still = GetItem( m_still_id );
		return still is null || IsStillWorking( still ) || still.STATE != m_last_state;
    }
}

bool IsStillWorking( Item& still )
{
	return still.STATE > STATE_PREPARE && still.STATE < STATE_FINISH;
}

Item@ FindStillFuel( Critter& cr )
{
	Item@ fuel = null;
	for( uint i = 0, j = 9; i < j; i++ )
	{
		@fuel = @cr.GetItem( FireFuel[i], -1 );
		if( fuel !is null )
		{
			break;
		}
	}
	return fuel;
}

bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_SPIRIT_OUT, process_spirit_out )
	ltp_inited = true;
}

bool start_spirit_out( Critter& cr, Item& still )
{
	if( !ltp_inited )
	{ 
		ltp_init();
	}
	Map@ map = cr.GetMap();		

	if( valid( still ) )
	{
		if( ( still.CURRENT_PRODUCT / 100 ) < 1 )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_POURED_ALL_OUT );
			return false;
		}
		
		if( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_SPIRIT_PRT ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_TARE );
			return false;
		}
		
		uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
		
		PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
		
		cr.SetAnims( COND_LIFE, 0, ANIM2_CROUCH );
		
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		
		StartProcess( cr, LTP_SPIRIT_OUT, 0, 0, still.Id, action_pause );
		return true;
	}
	return false;
}

uint process_spirit_out( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_SPIRIT_OUT )
	uint hit_pause = ACTION_PAUSE_BASE - ( cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ still = GetItem( param2 );
	
  	if( valid( still ) )
	{
      	if( ( !hasItem( cr, PID_BOTTLE_GLASS ) && !hasItem( cr, PID_SPIRIT_PRT ) ) || ( still.CURRENT_PRODUCT / 100 ) < 1 )
		{
			uint TXT = ( still.CURRENT_PRODUCT / 100 ) < 1 ? STR_POURED_ALL_SPIRIT : STR_RUN_OUT_OF_BOTTLES;
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, TXT );
			cr.SetAnims( COND_LIFE, 0, ANIM2_IDLE );
			return 0;
		}
		
		uint autoemote = Random( 1, 10 );
		if( autoemote == 10 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_FILLS_BOTTLE );
		}
		
		if( hasItem( cr, PID_SPIRIT_PRT ) )
		{
			Item@ spiritPrt = getItem( cr, PID_SPIRIT_PRT );
			if( spiritPrt.REMAINING_USES < spiritPrt.Proto.Partial_Item )
			{
				still.CURRENT_PRODUCT -= 100;
				spiritPrt.REMAINING_USES ++;
				spiritPrt.EXTRA_WEIGHT = spiritPrt.REMAINING_USES * 100;

				Map@ map = cr.GetMap();
				
				PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );
				spiritPrt.Update();
				
				if( spiritPrt.REMAINING_USES == spiritPrt.Proto.Partial_Item )
				{
					Item@ spirit = cr.AddItem( PID_SPIRIT, 1 );
					_SubItem( spiritPrt , 1 );
					cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FILLED_BOTTLE_SPIRIT );
					spirit.Update();
				}
			}

			CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );
			
			return action_pause;
		}
		else
		{
			Item@ bottle = cr.GetItem( PID_BOTTLE_GLASS, -1 );
			_SubItem( bottle , 1 );
		
			Item@ spiritPrt = cr.AddItem( PID_SPIRIT_PRT, 1 );
		
			still.CURRENT_PRODUCT -= 100;
			spiritPrt.REMAINING_USES ++;
			spiritPrt.EXTRA_WEIGHT = spiritPrt.REMAINING_USES * 100;

			Map@ map = cr.GetMap();
			PlayGenericSound( map, cr.HexX, cr.HexY, "homebrew_pouring.ogg", 10 );

			spiritPrt.Update();
		}
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);
		return action_pause;
    }
	cr.SetAnims(COND_LIFE, 0, ANIM2_IDLE);
	return 0;
}

bool ltp_stillRepair_inited = false;
void ltp_stillRepair_init()
{
	LTPREG( LTP_STILL_REPAIR, process_stillRepair )
	ltp_stillRepair_inited = true;
}

bool start_stillRepair( Critter& cr, Item& still, uint difficulty )
{
	if( !ltp_stillRepair_inited )
	{
		ltp_stillRepair_init();
	}
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
	uint[] values = { cr.Id };
	
	CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "repair@e_RepairSound", values, true);
	CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);	

	_CritAnimateUse( cr );
	
	StartProcess( cr, LTP_STILL_REPAIR, 0, still.Id, difficulty, action_pause );
	return true;
}

uint process_stillRepair( Critter@ cr, int& param0, int& param1, int& param2 )
{
	LTPROCESS( cr, param0, LTP_STILL_REPAIR )
	
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
  	Item@ still = GetItem( param1 );
	int difficulty = param2 ;
	if( valid( still ) )
    {
		param0++;
		
		uint install_rate = ( cr.Skill[SK_REPAIR] ) + ( cr.Stat[ST_AGILITY] * 10 ) + ( cr.Stat[ST_INTELLECT] * 10 ) + OBJECT_DPA_BASE; 
		int sequence_length = ceil( float( difficulty / ( CLAMP( install_rate, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
		
		if( param0 > sequence_length )
		{
			if( difficulty >= 10000 )
			{
				for( uint i = 0; i < StillComponents.length; i++ )
				{
					Item@ component = cr.GetItem( StillComponents[i], -1 );
					uint required_amount = StillComponentsAmount[i];
					if( !valid( component ) || cr.CountItem( StillComponents[i] ) < required_amount )
					{
						return 0;
					}
					_SubItem( component, required_amount);
				}
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_STILL_REPAIRED );
				still.ChangeProto( PID_STILL_S );
				still.PicMap = still.Proto.PicMap;
				still.Update();
			}
			else
			{
				for( uint i = 0; i < StillConsumables.length; i++ )
				{
					Item@ consumable = cr.GetItem( StillConsumables[i], -1 );
					if( !valid( consumable ) )
					{
						return 0;
					}
					_SubItem( consumable, 1 );
				}
				cr.AddItem( PID_PHIAL, 1 );
				cr.AddItem( PID_BOTTLE_GLASS, 1 );
				cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, STR_STILL_MAINTAINED );
				still.IMPURITIES = 0;
				still.CURRENT_RAW_MATERIAL = 0;
				still.STILL_SPIRIT_LEVEL = 0;
				still.CURRENT_PRODUCT = 0;
				still.Update();
			}
			return 0;
		}
		
		uint[] values = { cr.Id };
		
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "repair@e_RepairSound", values, true);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", values, true);

		_CritAnimateUse( cr );
		
		return action_pause;
	}
	return 0;
}

bool checkSkill( Critter& cr )
{
	if( cr.ParamBase[  SK_REPAIR ] < 200 || cr.ParamBase[ SK_SCIENCE ] < 150 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
		return false; 
	}
	return true;
}

bool checkTools( Critter& cr )
{
	for( uint i = 0; i < StillTools.length; i++ )
	{
		Item@ tool = cr.GetItem( StillTools[i], -1 );
		if( !valid( tool ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
			return false;
		}
	}
	return true;
}

bool checkComponents( Critter& cr )
{
	for( uint i = 0; i < StillComponents.length; i++ )
	{
		Item@ component = cr.GetItem( StillComponents[i], -1 );
		uint required_amount = StillComponentsAmount[i];
		if( !valid( component ) || cr.CountItem( StillComponents[i] ) < required_amount )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
			return false;
		}
	}
	return true;
}

bool checkConsumables( Critter& cr )
{
	for( uint i = 0; i < StillConsumables.length; i++ )
	{
		Item@ tool = cr.GetItem( StillConsumables[i], -1 );
		if( !valid( tool ) )
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_STILL_REPAIR_FAIL );
			return false;
		}
	}
	return true;
}

#endif //BOOTLEGGING