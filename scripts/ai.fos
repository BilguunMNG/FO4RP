#ifndef __MAIN_AI
#define __MAIN_AI
#include "Ai.fosh"
#include "_global_events.fos"
#include "_utils.fos"
#include "Fractions.fosh"
#include "npc_planes_h.fos"

class _AiManager : iManagerModule, iAiManager, iManager_critter_init, iManager_critter_finish, iManager_critter_attacked, iManager_critter_idle
{
	_AiManager()
	{
		AddStartCallback( "ai", "Start" );
		@BaseBestCreater = DefaultCreater();
	}

	bool manager_init() override
	{
		Set( CreateAi( null ) );
		return true;
	}
	
	bool global_critter_init( Critter& critter, bool firstTime ) override
	{
		if( critter.IsNpc() && !Collector.exists( "" + critter.Id ) )
		{
			Set( critter, CreateAi( critter ) );
		}
		return true;
	}
	
	bool global_critter_finish( Critter& critter, bool toDelete ) override
	{
		if( critter.IsNpc() )
		{
			Collector.delete( "" + critter.Id );
		}
		return true;
	}
	
	bool global_critter_attacked( Critter& critter, Critter& attacker ) override
	{
		DEBUG_SAY( critter, "AI: " + crInfo( attacker ) + " attacks " + crInfo( critter ) );
		
		Critter@[] critters;
		Critter@ target = null, npc = null;
		iAI@ ai = null;
		for( uint i = 0, j = critter.GetCritters( true, FIND_LIFE_AND_KO | FIND_ONLY_NPC, critters ); i < j; i++ )
		{
			@npc = critters[i];
			@ ai = Get(npc);
			if( valid(ai) )
			{
				@target = ai.LookAttack( critter, attacker );
				if( valid(target) )
				{
					npc_look_enemy( npc, target, ai );
				}
			}
		}
		return true;
	}
	
	bool global_critter_idle( Critter& critter ) override
	{
		if( critter.IsPlayer() )
		{
			return true;

		}
		iAI@ ai = Get(critter);
		if( !valid(ai) )
		{
			return true;
		}
		
		Critter@[] critters;
		uint countlook = critter.GetCritters( false, FIND_LIFE, critters );
		for( uint i = 0; i < countlook; i++ )
		{
			npc_look_critter( critter, critters[i], ai );
		}
		
		if( critter.IsNoPlanes( ) )
		{
			// ToDo: ходьба
		}			
		return true;
	}
	
	void npc_look_critter( Critter& npc, Critter& critter, iAI@ ai )
	{
		if( ai.IsEnemy( critter ) )
		{
			npc_look_enemy( npc, critter, ai );
		}
	}
	
	void npc_look_enemy( Critter& npc, Critter& enemy, iAI@ ai )
	{
		if( valid(ai) )
		{
			if( enemy.IsNpc() && valid(ai.fraction) )
			{
				if( GetFraction( enemy ) is ai.fraction )
				{
					return;
				}
			}
			ai.AddAttackPlane( npc, enemy );
		}
	}
	
	iAI@ Get( Critter& critter ) override
	{
		if( critter.IsPlayer() )
		{
			return null;
		}
		
		if( !Collector.exists( "" + critter.Id ) )
		{
			iAI@ result = CreateAi( critter );
			Collector.set( "" + critter.Id, @result );
			return result;
		}
		
		iAI@ result;
		Collector.get( "" + critter.Id, @result );
		return result;
	}
	
	void Set( iAI@ ai ) override
	{
		Collector.set( "ai_" + GetStrHash ( string( ai.Name ) ), @ai );
		Collector.set( "ai_" + ai.Name, @ai );
		List.insertLast( @ai );
	}
	
	void Set( Critter& critter, iAI@ ai )
	{
		if( valid(ai) )
		{
			Collector.set( "" + critter.Id, @ai );
		}
		else
		{
			Collector.delete( "" + critter.Id );
		}
	}
	
	iAI@ Get( const string&in name ) override
	{
		iAI@ result;
		Collector.get( "ai_" + name, @result );
		return result;
	}
	
	iAI@ Get( uint nameHash ) override
	{
		iAI@ result;
		Collector.get( "ai_" + nameHash, @result );
		return result;
	}
	
	void AddAiCreater( iAICreater@ creater )
	{
		AICreaters.insertLast( creater );
	}
	
	iAICreater@ GetBestCreater( Critter@ critter )
	{
		iAICreater@ creater = null;
		iAICreater@ best = BaseBestCreater;
		for( uint i = 0, iend = AICreaters.length(); i < iend; i++ )
		{
			@creater = AICreaters[i];
			if( creater.IsBest( best, critter ) && ( !valid(best) || !best.IsBest( creater, critter ) ) )
			{
				@best = creater;
			}
		}
		return @best;
	}
	
	iAI@ CreateAi( Critter@ critter )
	{
		return GetBestCreater( critter ).CreateAi( critter );
	}
	
	private iAI@[] List;
	private dictionary Collector;
	private iAICreater@[] AICreaters;
	private iAICreater@ BaseBestCreater;
}

_AiManager master;
iAiManager@ get_AiManager()
{
	return @master;
}

class DefaultCreater : iAICreater
{
	iAI@ CreateAi( Critter@ critter ) override
	{
		return BaseAi( critter );
	}
	
	bool IsBest( iAICreater@ creater, Critter@ critter ) override
	{
		return !valid(creater);
	}
}

class BaseAi : iAI
{
	BaseAi( Critter@ critter )
	{
		if( valid(critter) )
		{
			Initialize( critter );
		}
	}
	
	void Initialize( Critter& critter )
	{
		@npc = critter;
		get_fraction();
	}

	bool IsEnemy( Critter& target ) override	// if target is enemy return true else return false 
	{
		if( isGM( target ) )
		{
			return false;
		}
		
		if( !valid(fraction) )
		{
			return false;
		}
		
		return GetFractionRelation( fraction, target ).Value == Relation_War && npc.ParamBase[CR_IS_AGGRESSIVE] > 0;
	}
	
	int ProtectedRate( Critter& target )
	{
		if( !valid(fraction) )
		{
			return 0;
		}
		return GetFractionRelation( fraction, target ).Value;
	}
	
	bool AddAttackPlane( Critter& critter, Critter& target ) override
	{
		return ::AddAttackPlane( critter, 0, target );
	}
	
	Critter@ LookAttack( Critter& critter, Critter& attacker ) override
	{
		if( npc.ParamBase[CR_IS_AGGRESSIVE] <= 0 )
		{
			return null;
		}
		
		int critterPrior = ProtectedRate( critter );
		int attackerPrior = ProtectedRate( attacker );
		Critter@ target = null;
			
		switch( attackerPrior )
		{
		    case Relation_War:
			{
				@target = attacker;
				break;
			}
		    case Relation_Dislike:
			{
			    if( critterPrior >= Relation_Like )
				{
					@target = attacker;
			    }
				else if( critterPrior == Relation_War )
				{
					@target = critter;
				}
				break;
			}
		    case Relation_Neutral:
			{
			    if( critterPrior == Relation_War )
				{
					@target = critter;
				}
			    else if( critterPrior == Relation_Ally )
				{
					@target = attacker;
				}
				break;
			}
		    case Relation_Like:
			{
			    if( critterPrior <= Relation_Dislike )
				{
					@target = critter;
				}
			    else if( critterPrior == Relation_Ally )
				{
					@target = attacker;
				}
				break;
			}
		    case Relation_Ally:
			{
			    if( critterPrior <= Relation_Neutral )
				{
					@target = critter;
				}
				break;
			}
		    default:
				break;
		}
		
		return target;
	}
	
	void SayDebug( string& say )
	{
		npc.Say( SAY_NORM_ON_HEAD, say );
	}
	
	bool get_IsIdleWalk( ) override
	{
		return false;
	}
	
	const string get_Name( ) override
	{
		return "0";
	}
	
	iAI @Copy( Critter& critter ) override
	{
		return BaseAi( critter );
	}
	
	Fraction@ get_fraction( ) override
	{
		if( npc.Stat[ST_FACTION] != tempfractionname )
		{
			tempfractionname = npc.Stat[ST_FACTION];
			@_fraction = GetFraction( npc );
		}
		return _fraction;
	}
	
	int tempfractionname;
	Fraction@ _fraction;
	Critter@ npc;
}

void Start( )
{
	manager_add_module( cast<iManagerModule@>(@AiManager), "Ai", 0);
}

#endif // __MAIN_AI