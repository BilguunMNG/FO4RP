#include "_macros.fos"

# pragma bindfunc "uint FloatToBits(float) -> rust_dll/server.dll FloatToBits"
# pragma bindfunc "float FloatFromBits(uint) -> rust_dll/server.dll FloatFromBits"

// to test that encodeda and decoded value is the same as original
// ~run examples/float_bits TestOnce [числитель дроби] [знаменатель дроби] 0
// for 0.384 do
// ~run examples/float_bits TestOnce 384 1000 0
void TestOnce( Critter& player, int param0, int param1, int param2 ) {
    float numerator = param0;
    float denominator = param1;
    float val = numerator / denominator;
    player.Say(SAY_NETMSG, "Before: "+val);
    uint bits = FloatToBits(val);
    player.Say(SAY_NETMSG, "Bits: "+bits);
    float decoded = FloatFromBits(bits);
    player.Say(SAY_NETMSG, "After: "+decoded);
}

// to showcase how to use it with CreateTimeEvent and uint array
// ~run examples/float_bits TestLoop [числитель дроби] [знаменатель дроби] [количество повторов инкремента по 0.01]
// for 0.384 and 10 additional increments do
// ~run examples/float_bits TestLoop 384 1000 10
void TestLoop( Critter& player, int param0, int param1, int loops ) {
    float numerator = param0;
    float denominator = param1;
    float val = numerator / denominator;
    player.Say(SAY_NETMSG, "Before: "+val);
    uint[] values = {player.Id, FloatToBits(val), loops};
    CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_MyFunc", values, false );
}

// store and modify float in time events array
uint e_MyFunc(uint[]@ values) {
    Critter@ player = GetCritter(values[0]);
    // decode float from uint array
    float decoded = FloatFromBits(values[1]);
    // do something with decoded value here
    decoded += 0.01;
    player.Say(SAY_NETMSG, "Incremented: "+decoded);

    if( values[2] > 0) {
        values[2] -= 1;
        // encode and save back
        values[1] = FloatToBits(decoded);
        return REAL_SECOND( 1 );
    }
    return 0;
}
