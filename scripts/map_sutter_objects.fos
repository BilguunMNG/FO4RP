// temprorary interactive objects for sutter
// powermagic

#include "_macros.fos"
#include "_defines.fos"
#include "_itempid.fos"
#include "_maps.fos"

import void DropBleed( Critter& cr ) from "critter_status";
import void DropToxic( Critter& cr ) from "critter_status";

import void Prolonged_Doc ( Critter& targetCr, uint16 doctime, uint16 damage ) from "heal";
import void Prolonged_heal ( Critter& targetCr, uint16 sk ) from "heal";

#define PID_OBJECT_WATERPUMP    ( 1300 )
#define PID_OBJECT_WATTS        ( 1303 )
#define PID_OBJECT_AIRLOCK      ( 1302 )
#define PID_OBJECT_DOC          ( 1304 )
#define PID_OBJECT_LIGHT        ( 1305 )

#define DATA_POWER	            ( 24 )
#define DATA_DYSPNEA            ( 25 )

/*bool s_WaterPump(Critter& cr, Scenery& scen, int skill, Item@ item){
        if(skill == SKILL_PICK_ON_GROUND){
                GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, );
        }
   }*/

/*
 * val1 - powerOn
 * val2 - switcher
 * val3 - (power, water, charge)
 */

void WaterPumpInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_WaterPumpSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_WaterPumpOnMe" );
}

const uint[] bottlePid = { PID_BOTTLE_GLASS, PID_BOTTLE_EMPTY };
const uint[] bottleFull = { PID_GLASS_BOTTLE_FULL, PID_BOTTLE_FULL };
const uint[] ALLamapPids = { MAP_SUTTER_CENTER_DN, MAP_SUTTER_CENTER_DN_2, MAP_PHOENIX_DN, MAP_PHOENIX_DN, MAP_MARIP_1, MAP_MARIP_2, MAP_MARIP_3, MAP_MARIP_4};
const uint[] Phoenix_mapPids = { MAP_PHOENIX_DN };
const uint[] mapPids = { /*MAP_SUTTER_CENTER, */ MAP_SUTTER_CENTER_DN, MAP_SUTTER_CENTER_DN_2 /*, MAP_SUTTER_CENTER_UP, MAP_SUTTER_CENTER_UP_1*/, MAP_PHOENIX_DN, MAP_MARIP_1, MAP_MARIP_2, MAP_MARIP_3, MAP_MARIP_4 };
const uint[] mapLight = { MAP_SUTTER_CENTER, MAP_SUTTER_CENTER_DN, MAP_SUTTER_CENTER_DN_2, MAP_PHOENIX_DN, MAP_MARIP_1, MAP_MARIP_2, MAP_MARIP_3, MAP_MARIP_4  };

bool _WaterPumpSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {

		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == MAP_PHOENIX_DN ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

        uint8 switcher = item.Val2;

        uint16 parts = item.Val4;
        uint16 repair = item.Val5;
		uint16 science = item.Val6;
		
		if ( science > 0 ) {cr.Say( SAY_NETMSG, "Требуется внимательный осмотр." ); return true;}
		if ( parts > 0 ) {cr.Say( SAY_NETMSG, "Требуется деталь:" ); cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, parts*100 ); return true;}
		if ( repair > 0 ) {cr.Say( SAY_NETMSG, "Требуется ремонт." ); return true;}
		

        if( power.GetValue() > 0 )
        {
            int val = switcher;
            val = ( val > 0 ? 0 : 1 );

            string msg = "";

            if( val > 0 )
            {
                msg = "Включено";
            }
            else
            {
                msg = "Выключено";
            }

            item.Val2 = val;

            cr.Say( SAY_NETMSG, "" + msg + ". Вода " + ( val > 0 ? "" : "не" ) + " очищается." );
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергоснабжение отключено. Запустите генератор сначала." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
		if ( !check_science( item, cr )) return true;
		
        int    val = item.Val2;

        string msg = "";

        if( val > 0 )
        {
            msg = "включено";
        }
        else
        {
            msg = "выключено";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." );
    }
    else if( skill == SK_REPAIR && item.Val5 >0)
    {
		if ( !check_repair( item, cr )) return true;
	}
	return true;
}

bool _WaterPumpOnMe( Item& item, Critter& cr, Item@ usedItem )
{

    if( usedItem is null )
        return false;

    uint pid = usedItem.GetProtoId();
	
	if ( !check_parts( item, cr, usedItem )) return true;
	
	int8 index = bottlePid.find( pid );

    if( index != -1 )
    {
		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == 31 ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

        uint8 switcher = item.Val2;
        uint8 water = item.Val3;

        if( power.GetValue() > 0 )
        {
            if( switcher > 0 )
            {
                if( water > 0 )
                {
                    _SubItem( usedItem, 1 );
					cr.AddItem( bottleFull[index], 1 );
                    item.Val3 --;
                }
                else
                {
                    cr.Say( SAY_NETMSG, "Воды больше нет." );
                }
            }
            else
            {
                cr.Say( SAY_NETMSG, "Помпа отключена. Включите ее сначала." );
            }
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергия отключена. Включите генератор." );
        }

        return true;
    }

    return false;
}

void WattsInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_SKILL, "_WaterPumpSkill");
    item.SetEvent( ITEM_EVENT_SKILL, "_WattsSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_WattsOnMe" );
}

bool _WattsSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == 31 ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

		uint8 offpower = item.Val1;
        uint8 switcher = item.Val2;
		
        uint16 parts = item.Val4;
        uint16 repair = item.Val5;
		uint16 science = item.Val6;
		
		if ( science > 0 ) {cr.Say( SAY_NETMSG, "Требуется внимательный осмотр." ); return true;}
		if ( parts > 0 ) {cr.Say( SAY_NETMSG, "Требуется деталь:" ); cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, parts*100 ); return true;}
		if ( repair > 0 ) {cr.Say( SAY_NETMSG, "Требуется ремонт." ); return true;}		

        if( power.GetValue() > 0 || offpower > 0)
        {
            int val = switcher;
            val = ( val > 0 ? 0 : 1 );

            item.Val2 = val;

            string msg = "";

            if( val > 0 )
            {
                msg = "включен";
				power.opAddAssign( offpower );
				item.Val1=0;
            }
            else
            {
                msg = "выключен";
				item.Val1=power.GetValue();				
				power.opAssign( 0 );
            }
			
			if ( cr.GetMap().GetProtoId() == MAP_PHOENIX_DN ) WattsReleasePhoenix( val );
            else WattsRelease( val );

            cr.Say( SAY_NETMSG, "Генератор " + msg + "." );
        }
        else
        {
            cr.Say( SAY_NETMSG, "Кончился заряд. Зарядите генератор." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
		if ( !check_science( item, cr )) return true;

		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == 31 ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

        uint8  switcher = item.Val2;

        int    val = switcher;

        string msg = "", addMsg = "";

        if( val > 0 )
        {
            msg = "включен";
            addMsg = " Уровень заряда генератора : " + power.GetValue() + " .";
        }
        else
        {
            msg = "выключен";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." + addMsg );
    }
    else if( skill == SK_REPAIR && item.Val5 >0)
    {
		if ( !check_repair( item, cr )) return true;
	}	

    return true;
}

bool _WattsOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    if( usedItem is null)
		return false;
		
	if ( !check_parts( item, cr, usedItem )) return true;

	if( usedItem.GetProtoId() != PID_MICRO_FUSION_CELL )
        return false;
		
    uint8  switcher = item.Val2;

	if ( switcher == 0 ) item.Val1+=20;
	else
		{
		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == MAP_PHOENIX_DN ) @ power = GetGlobalVar( GVAR_Phoenix_Power );
		power.opAddAssign(20);
		}

    _SubItem( usedItem, 1 );

    cr.Say( SAY_NETMSG, "Вы подзарядили генератор." );

    return true;
}

void WattsRelease( int val )
{
    for( uint8 i = 0; i < mapPids.length(); ++i )
    {
        Map @ map = GetMapByPid( mapPids[ i ], 0 );
        if( map is null )
            continue;
	
		map.SetData(DATA_POWER, val); 		//for elevators and doors


		Item@[] door;
		map.GetItemsByType( ITEM_TYPE_DOOR, door );

		for( uint8 ii = 0, jj = door.length(); ii < jj; ++ii )
		{
			Item @ item = door[ ii ];

			if( item is null )
				continue;

			if( IsDoorAutomatic( item.GetProtoId() ) )
			{
				item.Val6 = val;
			}
		}
	}
	
    for( uint8 i = 0, j = mapLight.length(); i < j; ++i )
    {
        Map @ map = GetMapByPid( mapLight[ i ], 0 );
        if( map is null )
            continue;

        Item@[] light;

        map.GetItems( PID_OBJECT_LIGHT, light );

        for( uint8 ii = 0, jj = light.length(); ii < jj; ++ii )
        {
            Item @ item = light[ ii ];
            if( item is null )
                continue;

            bool switcher = ( val > 0 );

            if( switcher )
            {
                // UNSETFLAG(item.Flags, ITEM_HIDDEN);
                // SETFLAG(item.Flags, ITEM_LIGHT);
                // item.LightDistance = 6;
                item.LightIntensity = 100;
            }
            else
            {
                // SETFLAG(item.Flags, ITEM_HIDDEN);
                // UNSETFLAG(item.Flags, ITEM_LIGHT);
                // item.LightDistance = 0;
                item.LightIntensity = -1;
            }
            item.Update();
        }
    }
}

void WattsReleasePhoenix( int val )
{
    for( uint8 i = 0; i < Phoenix_mapPids.length(); ++i )
    {
        Map @ map = GetMapByPid( Phoenix_mapPids[ i ], 0 );
        if( map is null )
            continue;
	
		map.SetData(DATA_POWER, val); 		//for elevators and doors
    }
	
    for( uint8 i = 0, j = Phoenix_mapPids.length(); i < j; ++i )
    {
        Map @ map = GetMapByPid( Phoenix_mapPids[ i ], 0 );
        if( map is null )
            continue;

        Item@[] light;

        map.GetItems( PID_OBJECT_LIGHT, light );

        for( uint8 ii = 0, jj = light.length(); ii < jj; ++ii )
        {
            Item @ item = light[ ii ];
            if( item is null )
                continue;

            bool switcher = ( val > 0 );

            if( switcher )
            {
                item.LightIntensity = 100;
            }
            else
            {
                item.LightIntensity = -1;
            }
            item.Update();
        }
    }
}

// void TurnOnAir

bool IsDoorAutomatic( uint pid )
{
    bool automat = ( pid == 2142 || pid == 2143 || pid == 3169 || pid == 3170 || pid == 4763 || pid == 4765 );

    return automat;
}

void AirLockInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_AirLockSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_AirLockOnMe" );
}

bool _AirLockSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == 31 ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

        uint16 parts = item.Val4;
        uint16 repair = item.Val5;
		uint16 science = item.Val6;
		
		if ( science > 0 ) {cr.Say( SAY_NETMSG, "Требуется внимательный осмотр." ); return true;}
		if ( parts > 0 ) {cr.Say( SAY_NETMSG, "Требуется деталь:" ); cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, parts*100 ); return true;}
		if ( repair > 0 ) {cr.Say( SAY_NETMSG, "Требуется ремонт." ); return true;}		
		
        uint8 switcher = item.Val2;

        if( power.GetValue() > 0 )
        {
            int val = switcher;
            val = ( val > 0 ? 0 : 1 );

            string msg = "";

            if( val > 0 )
            {
                msg = "Включено";
            }
            else
            {
                msg = "Выключено";
            }

            item.Val2 = val;
            cr.Say( SAY_NETMSG, "" + msg + ". Воздух " + ( val > 0 ? "" : "не" ) + " поступает." );
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергия отключена. Включите генератор." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
		if ( !check_science( item, cr )) return true;
		
		uint8  switcher = item.Val2;

        int    val = switcher;

        string msg = "";

        if( val > 0 )
        {
            msg = "включено";
        }
        else
        {
            msg = "выключено";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." );
    }
    else if( skill == SK_REPAIR && item.Val5 >0)
    {
		if ( !check_repair( item, cr )) return true;
	}	

    return true;
}

bool _AirLockOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    if( usedItem is null )
        return false;

    uint pid = usedItem.GetProtoId();
	
	if ( !check_parts( item, cr, usedItem )) return true;
	
    return false;
}

void DocInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_DocSkill" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_DocOnMe" );
}

bool _DocSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == 31 ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

        uint16 parts = item.Val4;
        uint16 repair = item.Val5;
		uint16 science = item.Val6;
		
		if ( science > 0 ) {cr.Say( SAY_NETMSG, "Требуется внимательный осмотр." ); return true;}
		if ( parts > 0 ) {cr.Say( SAY_NETMSG, "Требуется деталь:" ); cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, parts*100 ); return true;}
		if ( repair > 0 ) {cr.Say( SAY_NETMSG, "Требуется ремонт." ); return true;}		
		
        uint8 charge = item.Val3;

        if( power.GetValue() > 0 )
        {
            if( charge > 0 )
            {
                DocHeal( cr );

                charge--;
                charge = CLAMP( charge, 0, 100 );
                item.Val3 = charge;
            }
            else
            {
                cr.Say( SAY_NETMSG, "Закончился биогель, обновите резервуар." );
            }
        }
        else
        {
            cr.Say( SAY_NETMSG, "Энергия отключена. Включите генератор." );
        }
    }
    else if( skill == SK_SCIENCE )
    {
		if ( !check_science( item, cr )) return true;
		
		GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
		if ( cr.GetMap().GetProtoId() == 31 ) @ power = GetGlobalVar( GVAR_Phoenix_Power );

        uint8  charge = item.Val3;

        string msg = "", addMsg = "";

        if( power.GetValue() > 0 )
        {
            msg = "включено";
            addMsg = " Биогеля хватит на " + charge + " операций.";
        }
        else
        {
            msg = "выключено";
        }

        cr.Say( SAY_NETMSG, "Сейчас " + msg + "." + addMsg );
    }
    else if( skill == SK_REPAIR && item.Val5 >0)
    {
		if ( !check_repair( item, cr )) return true;
	}	

    return true;
}

bool _DocOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    if( usedItem is null)
        return false;

	if ( !check_parts( item, cr, usedItem )) return true;
	
    if( usedItem.GetProtoId() != PID_BIO_GEL )
        return false;

	GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );

    uint8 charge = item.Val3;

    if( charge == 0 )
    {

        item.Val3 = 100;
        _SubItem( usedItem, 1 );

        cr.Say( SAY_NETMSG, "Вы залили биогель в резервуар." );
    }
    else
    {
        cr.Say( SAY_NETMSG, "Биогель пока не требуется." );
    }

    return true;
}

void DocHeal( Critter& cr )
{
	if ( !valid(cr) ) return;
	
    DropBleed( cr );
    DropToxic( cr );
    cr.StatBase[ ST_CRSTATUS ] = 0;	
	cr.EraseTimeEvents( CTE_HEAL );
	cr.EraseTimeEvents( CTE_DOC );	
	
    for( uint16 i = 502; i < 506; ++i )
    {
        if ( cr.ParamBase[ i ] != 0 ) Prolonged_Doc ( cr, Random (500, 1000), i );
    }

	Prolonged_heal ( cr, 300);
}

#include "_colors.fos"

void LightInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_SKILL, "_WaterPumpSkill");
    item.SetEvent( ITEM_EVENT_SKILL, "_LightSkill" );

    // item.LightDistance = 6;
    // item.LightColor = COLOR_DRED;
    // item.LightIntensity = 100;

    // SETFLAG(item.Flags, ITEM_COLORIZE);
    // SETFLAG(item.Flags, ITEM_ALWAYS_VIEW);
    // SETFLAG(item.Flags, ITEM_LIGHT);

    string picName = "art\\scenery\\whitePXL.frm";

    uint   hash = GetStrHash( picName );
    item.SetMapPic( hash );

    item.LightColor = 9999666;
    item.LightDistance = 6;

    item.LightIntensity = ( item.Val1 > 1 ? 0 : 100 );

    item.Update();
    // item.SetEvent(ITEM_EVENT_USE_ON_ME, "_DocOnMe");
}

bool _LightSkill( Item& item, Critter& cr, int skill )
{
    return true;
}

// void Air

void testRottenMap( Critter& player, int, int, int )
{
	Map@ map = player.GetMap();
	if( valid( map ) )
		RottenFood( map );
}

void testRottenCrit( Critter& player, int, int, int )
{
	RottenFood( player );
}

void setRottenCycle( Critter& player, int value, int, int )
{
	GameVar@ cycle = GetGlobalVar( GVAR_rotten_cycle );
	if(valid(cycle)) 
	{
		if( value == 0 )
		{
			if( cycle.GetValue() < 999 ) cycle.opAddAssign( 1 );
			else cycle.opAssign( 0 );
		}
		else
			cycle.opAssign( value );
		player.Say( SAY_NETMSG, "Rotten cycle = " + cycle.GetValue() + "." );
	}
}

uint[][] food_pids_conversion = {
	{ PID_SHIT_SMALL, 0 },
	{ PID_SHIT_BIG, PID_SHIT_SMALL },
	{ PID_RAD_MEAT, PID_SHIT_BIG },
	{ PID_RAT_MEAT, PID_SHIT_BIG },
	{ PID_COOKED_FISH, PID_SHIT_BIG },
	{ PID_COOKED_RAT_MEAT, PID_SHIT_BIG },
	{ PID_COOKED_MOLERAT_STOMATCH, PID_SHIT_BIG },
	{ PID_RAGOUT, PID_SHIT_SMALL },
	{ PID_GECKO_MEAT, PID_RAD_MEAT },
	{ PID_COOKED_MEAT, PID_RAD_MEAT },
	{ PID_COOKED_GECKO_MEAT, PID_RAD_MEAT },
	{ PID_IGUANA_ON_A_STICK, PID_RAD_MEAT },
	{ PID_MEAT_ON_A_STICK, PID_RAD_MEAT },
	{ PID_MEAT, PID_RAD_MEAT }
	// { PID_BOTTLE_FULL, PID_BOTTLE_EMPTY },
	// { PID_GLASS_BOTTLE_FULL, PID_BOTTLE_GLASS },
	// { PID_NUKA_COLA, PID_GLASS_BOTTLE_FULL },
	// { PID_BEER, PID_GLASS_BOTTLE_FULL },
	// { PID_ROT_GUT, PID_BOOZE }
};

uint[] proper_container_pids = {
	PID_FRIDGE,
	PID_ICE_CHEST_LEFT,
	PID_ICE_CHEST_RIGHT,
	PID_OLD_FRIDGE,
	PID_FREEZER,
	PID_PORTABLE_REFRIGERATOR
};

uint[] special_pids = { PID_NUKA_COLA, PID_BEER, PID_ROT_GUT, PID_SHIT_BIG, PID_SHIT_SMALL };

import bool isGM( Critter& player ) from "gm";

void RottenFood( Critter& cr )
{
	if( isGM( cr ) && cr.Param[ QST_GAMEMODE ] != GAME_TEST )
		return;
	
	Map@ map = cr.GetMap();
	if(!valid(map)) return;
	
	GameVar@ cycle = GetGlobalVar( GVAR_rotten_cycle );
	if(!valid(cycle)) return;
	
	uint delta = cycle.GetValue() - cr.ParamBase[ CR_LAST_ROTTEN_CYCLE ];
	if( delta > 50 ) delta = 50;
	
	cr.ParamBase[ CR_LAST_ROTTEN_CYCLE ] = cycle.GetValue();
	
	Item@[] containers, stuff, food;
	food.resize(0);
	cr.GetItems( -1, stuff );
	
	for( uint i = 0; i < stuff.length; i++ )
	{
		if( stuff[i].GetType() == ITEM_TYPE_FOOD || special_pids.find( stuff[i].GetProtoId() ) != -1  )
			food.insertLast( stuff[i] );
		
		if( stuff[i].GetType() == ITEM_TYPE_CONTAINER )
		{
			Item@[] substuff;
			stuff[i].GetItems( -1, substuff );
			for( uint j = 0; j < substuff.length; j++ )
				if( substuff[j].GetType() == ITEM_TYPE_FOOD || special_pids.find( substuff[j].GetProtoId() ) != -1 )
					food.insertLast( substuff[j] );
		}
	}

	bool badSmell = false;
	Item@ target;
	
	for( uint d = 0; d < delta; d++ )
	{
		for( uint i = 0; i < food.length(); i++ ) 
		{
			if( !valid(food) ) continue;
			@target = food[i];
			for( uint j = 0; j < food_pids_conversion.length(); j++ )
				if( Random( 1, 100 ) < 2 * target.GetCount() && food_pids_conversion[j][0] == target.GetProtoId() )
				{
					int count = target.GetCount();
					int delta = 1;
					if( count > 50 )
						delta = count / 50;
					
					uint pid = food_pids_conversion[j][1];
					if( pid != 0 )
					{
						if( target.Accessory == ACCESSORY_CONTAINER )
						{
							Item@ container = GetItem( target.ContainerId );
							if( valid( container ) ) {
								container.AddItem( pid, delta, 0 );
								if( pid == PID_SHIT_SMALL || pid == PID_SHIT_BIG )
									map.SetText( cr.HexX, cr.HexY, COLOR_LGRAY, ":запашок:" );
							}
						}
						
						if( target.Accessory == ACCESSORY_CRITTER )
						{
							cr.AddItem( pid, delta );
							if( pid == PID_SHIT_SMALL || pid == PID_SHIT_BIG )
								badSmell = true;
						}
					}
				
					if( count - delta > 0 )
						target.SetCount( count - delta );
					else 
					{
						DeleteItem( target );
						break;
					}
				}
		}
	}
	
	cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 3 + ( cr.ParamBase[ST_BLEED] / 2 ) );
	
	if( badSmell ) {
		cr.Say( SAY_EMOTE, "воняет" );
		cr.Say( SAY_NETMSG, "Кажется, у вас сгнила какая-то еда в инвентаре!" );
		cr.ParamBase[ CR_DIRTINESS ] += Random( 5, 10 );
	}
}

void RottenFood( Map@ map )
{

    Item@[] containers, stuff, food;
	food.resize(0);
	
	for( uint i = 0; i < special_pids.length(); i++ )
		map.GetItems( special_pids[i], food );
	
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );
    if( valid( containers ) )
    {
        for( uint i = 0; i < containers.length(); i++ )
        {
			if( proper_container_pids.find( containers[i].GetProtoId() ) != -1 && !FLAG( containers[i].LockerCondition, LOCKER_ISOPEN ) )
				continue; //Скипаем закрытые холодильники.
			
			stuff.resize( 0 );
			containers[ i ].GetItems( -1, stuff );
			for( uint j = 0; j < stuff.length(); j++ )
				if( stuff[j].GetType() == ITEM_TYPE_FOOD || special_pids.find( stuff[j].GetProtoId() ) != -1 )
					food.insertLast( stuff[j] );
        }
    }
	
	Item@ target;
    map.GetItemsByType( ITEM_TYPE_FOOD, food );
	
	uint count;
	for( uint i = 0; i < food.length(); i++ ) 
	{
		if( !valid( food[i]) ) continue;
		@target = food[i];
		for( uint j = 0; j < food_pids_conversion.length(); j++ )
			if( Random( 1, 100 ) < 10 * target.GetCount() && food_pids_conversion[j][0] == target.GetProtoId() )
			{
				count = target.GetCount();
				uint delta = 1;
				if( count > 10 )
					delta = count / 10;
				
				uint pid = food_pids_conversion[j][1];
				if( pid != 0 )
				{
					if( target.Accessory == ACCESSORY_CONTAINER )
					{
						Item@ container = GetItem( target.ContainerId );
						if( valid( container ) ) {
							container.AddItem( pid, delta, 0 );
							map.SetText( container.HexX, container.HexY, COLOR_LGRAY, ":запашок:" );
						}
					}
					
					if( target.Accessory == ACCESSORY_HEX )
					{
						map.AddItem( target.HexX, target.HexY, pid, delta );
						map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":запашок:" );
					}
				}
			
				if( count - delta > 0 )
					target.SetCount( count - delta );
				else 
				{
					DeleteItem( target );
					break;
				}
			}
	}
}

void ObjectTimeLoop()
{
	GameVar@ Phoenixpower = GetGlobalVar( GVAR_Phoenix_Power );
	GameVar@ power = GetGlobalVar( GVAR_Sutter_Power );
	
	if( Random (0, 23) == 0 )
	{
		if( Phoenixpower.GetValue() > 0 ) Phoenixpower.opSub( 1 );
		if( power.GetValue() > 0 ) power.opSub( 1 );	
	}

	Map@ map;
	
    for( uint8 i = 1; i <= 200; ++i )
	{
		if( i == MAP_UTILITY_START )
			continue;
	
		@map = GetMapByPid( i, 0 );
		if(!valid(map)) continue;
		
        RottenFood( map );

		Critter@[] crs;
		if( map.GetCritters( 0, FIND_LIFE|FIND_ONLY_PLAYERS, crs ) > 0 )
			for( uint j = 0; j < crs.length(); j++ )
				RottenFood( crs[j] );
			
		if( mapPids.find(i) == -1 && Phoenix_mapPids.find(i) == -1 )
		{	//На этих картах не учитывается наличие энергии:
			Item@[] water;
			map.GetItems( PID_OBJECT_WATERPUMP, water );
			for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
			{
				Item @ item = water[ ii ];

				if( item is null )
					continue;

				if( item.Val2 > 0 )
					item.Val3 = CLAMP( item.Val3++, 0, 100 );
			}
			GameVar @ dyspnea = GetLocalVar( LMVAR_Dyspnea, map.Id );
			dyspnea.opAssign( 0 );
			map.SetData( DATA_DYSPNEA, 0 );
		}
	}

    for( uint8 i = 0; i < mapPids.length(); ++i )
    {
        @map = GetMapByPid( mapPids[ i ], 0 );
        if( map is null )
            continue;

		Item@[] water;
        Item@[] air;

		
		map.GetItems( PID_OBJECT_WATERPUMP, water );
        map.GetItems( PID_OBJECT_AIRLOCK, air );
        uint8 airLen = air.length();
        uint8 airMod = 100 / ( airLen > 0 ? airLen : 1 );
        uint8 airPer = 0;

        for( uint8 ii = 0, jj = air.length(); ii < jj; ++ii )
        {
            Item @ item = air[ ii ];

            if( item is null )
                continue;

            uint8 switcher = item.Val2;

            if( switcher > 0 )
            {
                airPer += airMod;
            }
        }

        GameVar @ dyspnea = GetLocalVar( LMVAR_Dyspnea, map.Id );
        if( !(dyspnea is null) )
        {
            if( airPer < 70 )
            {
                dyspnea.opAddAssign( 25 );
                map.SetData( DATA_DYSPNEA, 1 );
            }
            else
            {
                dyspnea.opSub( 20 );
                map.SetData( DATA_DYSPNEA, 0 );
            }
        }

        for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
        {
            Item @ item = water[ ii ];

            if( item is null )
                continue;

            uint8 switcher = item.Val2;
            uint8 water = item.Val3;

            if( power.GetValue() > 0 )
            {
                water++;
                water = CLAMP( water, 0, 100 );
                item.Val3 = water;
            }
        }
    }
	
    for( uint8 i = 0; i < Phoenix_mapPids.length(); ++i )
    {
        Map @ map = GetMapByPid( Phoenix_mapPids[ i ], 0 );
        if( map is null )
            continue;

        Item@[] water;

        map.GetItems( PID_OBJECT_WATERPUMP, water );

        for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
        {
            Item @ item = water[ ii ];

            if( item is null )
                continue;

            uint8 switcher = item.Val2;
            uint8 water = item.Val3;

            if( Phoenixpower.GetValue() > 0 )
            {
                water++;
                water = CLAMP( water, 0, 100 );
                item.Val3 = water;
            }
        }
    }
}

void ProccessAir() {}

void ShowLight( Critter& cr, int x, int, int )
{
    Item@[] item;
    Map @ map = cr.GetMap();

    if( map is null )
        return;

    map.GetItems( PID_OBJECT_LIGHT, item );

    for( uint16 i = 0, j = item.length(); i < j; ++i )
    {
        string picName = "art\\scenery\\";

        if( x > 0 )
        {
            picName += "grid_wall.frm";
        }
        else
        {
            picName += "whitePXL.frm";
        }

        uint hash = GetStrHash( picName );
        item[ i ].SetMapPic( hash );

        cr.Say( SAY_NETMSG, "flag " + item[ i ].Flags );
    }

}
/*
   void DyspneaTimeLoop(){
        for(uint8 i = 0; i < mapPids.length(); ++i){
                Map @ map = GetMapByPid(mapPids[i], 0);
                if(map is null) continue;

                Critter@[] crs;
                if(map.GetCritters(0, FIND_LIFE|FIND_ONLY_PLAYERS, crs) > 0){
                        for(uint8 ii = 0, jj = crs.length(); ++ii){

                        }
                }
        }
   }*/
/* val1 - powerOn
 * val2 - switcher
 * val3 - (power, water, charge)*/


void debugOnOff(Critter& cr, int val, int, int){
	Map @ map = cr.GetMap();
	
	if(map is null) return;
	
	Item@[] items;
	map.GetItems(PID_OBJECT_WATTS, items);
	
	for(uint8 i = 0, j = items.length(); i < j; ++i){
		items[i].Val1 = 1;
		if(items[i].Val3 <= 0){
			items[i].Val3 = 4;
		}
	}
	
	for( uint8 i = 0; i < mapPids.length(); ++i )
	{
        Map @ map = GetMapByPid( mapPids[ i ], 0 );
        if( map is null )
            continue;
	
		map.SetData(DATA_POWER, val); 		//for elevators

        Item@[] water;
        Item@[] air;
        Item@[] doc;
        Item@[] door;

        map.GetItems( PID_OBJECT_WATERPUMP, water );
        map.GetItems( PID_OBJECT_AIRLOCK, air );
        map.GetItems( PID_OBJECT_DOC, doc );

        map.GetItemsByType( ITEM_TYPE_DOOR, door );

        for( uint8 ii = 0, jj = water.length(); ii < jj; ++ii )
        {
            Item @ item = water[ ii ];

            if( item is null )
                continue;

            item.Val1 = val;
            item.Val2 = val;

        }

        for( uint8 ii = 0, jj = air.length(); ii < jj; ++ii )
        {
            Item @ item = air[ ii ];

            if( item is null )
                continue;

            //	GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            //	GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            //	if(switcher is null || powerOn is null) continue;

            item.Val1 = val;
            item.Val2 = val;
        }

        for( uint8 ii = 0, jj = doc.length(); ii < jj; ++ii )
        {
            Item @ item = doc[ ii ];

            if( item is null )
                continue;

            // GameVar @ switcher = GetLocalVar(LIVAR_Object_Switcher, item.Id);
            // GameVar @ powerOn = GetLocalVar(LIVAR_Object_PowerOn, item.Id);

            // if(switcher is null || powerOn is null) continue;

			item.Val1 = val;
			item.Val2 = val;

        }

        for( uint8 ii = 0, jj = door.length(); ii < jj; ++ii )
        {
            Item @ item = door[ ii ];

            if( item is null )
                continue;

            if( IsDoorAutomatic( item.GetProtoId() ) )
            {
                item.Val6 = val;
            }
        }

    }

    for( uint8 i = 0, j = mapLight.length(); i < j; ++i )
    {
        Map @ map = GetMapByPid( mapLight[ i ], 0 );
        if( map is null )
            continue;

        Item@[] light;

        map.GetItems( PID_OBJECT_LIGHT, light );

        for( uint8 ii = 0, jj = light.length(); ii < jj; ++ii )
        {
            Item @ item = light[ ii ];

            if( item is null )
                continue;

            // if(IsDoorAutomatic(item.GetProtoId())){

            item.Val1 = val;
	    
            item.LightIntensity = (val > 0 ? 100 : 0);

            item.Update();
        }
    }
	
	
}

void spawn_autodoors(Critter& cr, int val, int, int)
{	
	for( uint8 i = 0; i < ALLamapPids.length(); ++i )
	{
        Map @ map = GetMapByPid( ALLamapPids[ i ], 0 );
        if( map is null )
            continue;
	
        Item@[] door;

        map.GetItemsByType( ITEM_TYPE_DOOR, door );

        for( uint8 ii = 0, jj = door.length(); ii < jj; ++ii )
        {
            Item @ item = door[ ii ];

            if( item is null )
                continue;

            if( IsDoorAutomatic( item.GetProtoId() ) )
            {
				uint16 x=item.HexX;
				uint16 y=item.HexY;			
				for( uint8 i = 0; i < 6; i++ )
				{
					map.MoveHexByDir( x, y, i, 1 );
					if ( !valid (map.GetItem( x, y, PID_AUTODOOR )) )
						{
						Item@ pedal = map.AddItem( x, y, PID_AUTODOOR, 1 );
						pedal.Val1 = item.Id;
						}
					x=item.HexX;
					y=item.HexY;	
				}
            
            }
        }

    }
}


void debugDyspnea(Critter& cr, int val, int, int){
	Map @ map = cr.GetMap();
	if(map is null) return;
	
	GameVar @ dyspnea = GetLocalVar( LMVAR_Dyspnea, map.Id );
        if(dyspnea is null) return;
	
	dyspnea.opAssign(CLAMP(val, 0, 100));
	map.SetData(DATA_DYSPNEA, CLAMP(val, 0, 1));
	
	
	return;
}

bool check_parts( Item& item, Critter& cr, Item@ usedItem )
{
    if( item is null || usedItem is null )
        return false;

    uint pid = usedItem.GetProtoId();
	
	if ( item.Val6 >0 ) {cr.Say( SAY_NETMSG, "Пока еще непонятно в чем проблема." ); return false;}
	if ( item.Val4 >0 )
		{
		if ( pid == item.Val4 )
			{
			cr.Say( SAY_NETMSG, "Вы установили требуемую деталь." );
			_SubItem( usedItem, 1 );
			item.Val4 = 0;
			return true;
			}
		cr.Say( SAY_NETMSG, "Деталь не подходит." );
		return false;
		}
    return true;
}

bool check_repair( Item& item, Critter& cr)
{
    if( item is null )
        return false;

	if ( item.Val6 >0 ) {cr.Say( SAY_NETMSG, "Пока еще непонятно в чем проблема." ); return false;}
	if ( item.Val4 >0 ) {cr.Say( SAY_NETMSG, "Пока еще нет нужной детали." ); return false;}
	if ( cr.Skill[ SK_REPAIR ] < item.Val5 ) {cr.Say( SAY_NETMSG, "Недостаточно навыка для того чтобы исправить проблему." ); return false;}
	else
		{
		cr.Say( SAY_NETMSG, "Вы определили неисправность и устранили ее." );
		item.Val5 = 0;
		}
    return true;
}

bool check_science( Item& item, Critter& cr)
{
    if( item is null )
        return false;

	uint16 science = item.Val6;
	uint16 parts = item.Val4;
	if ( science > 0 )
	{
		if ( cr.Skill[ SK_SCIENCE ] < science ) {cr.Say( SAY_NETMSG, "Недостаточно навыка для того чтобы определить проблему." ); return false;}
		else
			{
			if ( parts >0 ) {cr.Say( SAY_NETMSG, "Вы определили и пометили неисправность, требуется деталь:" ); cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, parts*100 );}
			else if ( item.Val5 >0 ) cr.Say( SAY_NETMSG, "Вы определили и пометили неисправность, остается применить практические навыки." );
			else cr.Say( SAY_NETMSG, "Вы определили неисправность и устранили ее." );
			item.Val6 = 0;
			return true;
			}
	}		
    return true;
}