// Author: Anuri

#include "_utils.fos"

#define REMAINING_USES 				Val0
#define DNA							Val1
#define EXTRA_WEIGHT				Val2
#define TASTE						Val8

import void UseDrug( Critter& cr, Item& drug ) from "drugs";

const uint16[] Flasks = { PID_WATER_FLASK, PID_MilkBrhm, PID_FLASKB, PID_FLASK_FULL };

bool FlaskCheck( Critter& cr, Item@ drink, Item@ flask )
{
	Map@ map = cr.GetMap(); 
    if( !valid( map ) ) { return false;
    }
	
    if( !valid( drink ) || !valid( flask ) ) { return false;
    }
	
	uint16 flaskPid = flask.GetProtoId();
	if( Flasks.find( flaskPid ) == -1 ) { return false;
    }
	
	if( flask.DNA != 0 ) { cr.Say( SAY_NETMSG, "|0xFFFF00 ‘л€га чем-то уже заполнена" ); return false;
	}
	
	if( flask.REMAINING_USES != 0 ) { cr.Say( SAY_NETMSG, "|0xFFFF00 ‘л€га чем-то уже заполнена" ); return false;
	}
	
	if( find_glassed_drinks( drink ) ) { //search.fos
		cr.Say( SAY_EMOTE, "Ќаполн€ет фл€гу" );
		
		if( flaskPid == PID_FLASKB ) {
			flask.ChangeProto( PID_FLASK_FULL );
			flask.Update();
		}
		
		flask.DNA = drink.GetProtoId();
		flask.REMAINING_USES = flask.Proto.Partial_Item;
		flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
		_SubItem( drink, 1 );
		cr.AddItem( PID_BOTTLE_GLASS, 1 );

	}
	return true;
}

bool DrinkFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) ) { return false;
    }
	
	if( flask.REMAINING_USES <= 0) { cr.Say( SAY_NETMSG, "|0xFFFF00 ‘л€га пуста" ); return false;
	}
	
	flask.REMAINING_USES --;
	flask.EXTRA_WEIGHT = flask.REMAINING_USES * 100;
	
	cr.Say( SAY_EMOTE_ON_HEAD, "ѕьет из фл€ги" );
	
	Item@ consumedDrink = cr.AddItem( flask.DNA, 1 );
	uint8 partialModifier = flask.Proto.Partial_Item;
	uint8  hungerBonus = consumedDrink.Proto.Food_Restore;
    uint8  thristBonus = consumedDrink.Proto.Food_Thrist;
	
	cr.StatBase[ ST_HUNGER ] += ( ( hungerBonus * SATURATION_SIMPLIFIER ) / partialModifier );
    cr.StatBase[ ST_THIRST ] += ( ( thristBonus * SATURATION_SIMPLIFIER ) / partialModifier );
	
	UseDrug( cr, consumedDrink );

	if( flask.REMAINING_USES == 0 ) { 
		flask.DNA = 0;
		flask.EXTRA_WEIGHT = 0;
		if( flask.GetProtoId() == PID_FLASK_FULL ) {
			flask.ChangeProto( PID_FLASKB );

		}
	}
	
	flask.Update();
	return true;
}

bool PourFlask( Critter& cr, Item& flask )
{
	Map@ map = cr.GetMap(); 
	if( !valid( map ) || !valid( flask ) ) { return false;
    }
	
	if( flask.REMAINING_USES <= 0) { cr.Say( SAY_NETMSG, "|0xFFFF00 ‘л€га пуста" ); return false;
	}
	
	flask.REMAINING_USES = 0;
	flask.EXTRA_WEIGHT = 0;
	flask.DNA = 0;
	
	cr.Say(SAY_EMOTE, "¬ыливает фл€гу" );
	
	if( flask.GetProtoId() == PID_FLASK_FULL ) {
		flask.ChangeProto( PID_FLASKB );
	}
	
	flask.Update();
	return true;
}