#include "_defines.fos"

//                                (lang, msg_file, str_num)
# pragma bindfunc "string@ GetMsgStr(uint, uint, uint) -> rust_dll/server.dll Global_GetMsgStr"

// import string@ GetTextMsgStr(uint) from "msg_and_const";
string@ GetTextMsgStr(uint str_num) {
    return GetMsgStr(0, TEXTMSG_TEXT, str_num);
}

// import string@ GetItemMsgStr(uint) from "msg_and_const";
string@ GetItemMsgStr(uint str_num) {
    return GetMsgStr(0, TEXTMSG_ITEM, str_num);
}

// import string@ GetGameMsgStr(uint) from "msg_and_const";
string@ GetGameMsgStr(uint str_num) {
    return GetMsgStr(0, TEXTMSG_GAME, str_num);
}

//          (id of file in data/*Names.lst, const name)
# pragma bindfunc "int ConstGetValue(uint, string&) -> rust_dll/server.dll ConstantsManager_GetValue"

#define CONSTANTS_PARAM      ( 0 )
#define CONSTANTS_ITEM       ( 1 )
#define CONSTANTS_DEFINE     ( 2 )
#define CONSTANTS_PICTURE    ( 3 )
#define CONSTANTS_HASH       ( 4 )

// import int GetParamIndexByName(string&) from "msg_and_const";
int GetParamIndexByName(string& str) {
    return ConstGetValue(CONSTANTS_PARAM, str);
}

// import int GetProtoIdByName(string&) from "msg_and_const";
int GetProtoIdByName(string& str) {
    return ConstGetValue(CONSTANTS_ITEM, str);
}

#define MAX_ITEM_PROTOTYPES           ( 30000 )
// import bool CheckProtoId(int) from "msg_and_const";
bool CheckProtoId(int pid) {
    return pid > 0 && pid < MAX_ITEM_PROTOTYPES;
}

// tests

bool assert_eq(Critter& player, int a, int b, string& str) {
    if( a != b ) {
        player.Say( SAY_NETMSG, "Assert failed: "+a+" != "+b+", "+str);
        return false;
    }
    return true;
}
bool assert_eq_str(Critter& player, string& a, string& b, string& str) {
    if( a != b ) {
        player.Say( SAY_NETMSG, "Assert failed: "+a+" != "+b+", "+str);
        return false;
    }
    return true;
}

void test_msg( Critter& player, int p0, int p1, int p2 ) {
    player.Say( SAY_NETMSG, "Testing GetMsgStr.");
    bool ok = true;
    ok = ok && assert_eq_str(player, "Test0", GetTextMsgStr(10), "{10}{}{Test0}");
    ok = ok && assert_eq_str(player, "Test3", GetTextMsgStr(13), "{13}{}{Test3}");
    ok = ok && assert_eq_str(player, "Огнемет", GetItemMsgStr(1100), "{1100}{}{Огнемет}");
    ok = ok && assert_eq_str(player, "Максимум очков жизней", GetGameMsgStr(100071), "{100071}{}{Максимум очков жизней}");
    if(ok) {
        player.Say( SAY_NETMSG, "Ok.");
    }
}

void test_const( Critter& player, int p0, int p1, int p2 ) {
    player.Say( SAY_NETMSG, "Testing ConstGetValue.");
    bool ok = true;
    ok = ok && assert_eq(player, 7, GetParamIndexByName("ST_MAX_LIFE"), "ST_MAX_LIFE");
    ok = ok && assert_eq(player, 12, GetProtoIdByName("PID_MINIGUN"), "PID_MINIGUN");
    if(ok) {
        player.Say( SAY_NETMSG, "Ok.");
    }
}

void test_all( Critter& player, int p0, int p1, int p2 ) {
    test_msg(player, p0, p1, p2);
    test_const(player, p0, p1, p2);
}
