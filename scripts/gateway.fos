#ifndef GATEWAY
#define GATEWAY

#include "_utils.fos"
#include "gateway_h.fos"
#include "terminal_h.fos"
#include "_npc_pids.fos"
#include "_animation.fos"
#include "npc_planes_h.fos"
#include "entire_h.fos"

void ToggleDoorBlocker( Map& map, Item& door, bool create )
{
    if( !valid( map ) )
	{
		return;
	}

	uint16 dir = 0;
	uint16 blocker_count = 0;

	uint16 tx = door.HexX;
	uint16 ty = door.HexY;

	uint16 doorPid = door.GetProtoId();

	switch( doorPid ) 
	{
		case( PID_FARM_GATE_EW ):
		case( PID_GARAGE_GATE_EW ):
		case( PID_VC_GATE_LARGE_EW ):
			dir = 1;
			blocker_count = 3;
			break;
		case( PID_FARM_GATE_NS ):
		case( PID_GARAGE_GATE_NS ):
			dir = 0;
			blocker_count = 3;
			break;
		case( PID_GAS_GATE_EW ):
			dir = 1;
			blocker_count = 2;
			break;
		case( PID_CATHEDRAL_DOOR_EW ):
		case( PID_VC_GATE_SMALL_EW ):
		case( PID_GARAGE_GATE_SMALL_EW ):
		case( PID_FARM_GATE_SMALL_EW ):
		case( PID_ELEVATOR_DOOR_EW ):
		case( PID_ELEVATOR_DOOR_OLD_EW ):
		case( PID_VAULT_DOOR0_EW ):
		case( PID_VAULT_DOOR1_EW ):
		case( PID_VAULT_DOOR2_EW ):
		case( PID_VAULT_DOOR3_EW ):
		case( PID_VAULT_DOOR4_EW ):
			dir = 1;
			blocker_count = 1;
			break;
		case( PID_GARAGE_GATE_SMALL_NS ):
			dir = 0;
			blocker_count = 1;
			break;
		default:
			return;
	}	

	if( create )
	{
		for ( uint16 i = 0; i < blocker_count; i++ )
		{
			if( dir == 1 )
			{
				if( ( i == 1 || i == 3 || i == 5 ) )
				{
					map.MoveHexByDir( tx, ty, 0, 1 );
				}
				else
				{
					map.MoveHexByDir( tx, ty, 1, 1 );
				}
			}
			else
			{
				map.MoveHexByDir( tx, ty, 5, 1 );
			}
			map.AddItem( tx, ty, PID_DOOR_BLOCKER, 1 );
		}

		tx = door.HexX;
		ty = door.HexY;

		for ( uint16 i = 0; i < blocker_count; i++ )
		{
			if( dir == 1 )
			{
				if( ( i == 1 || i == 3 || i == 5 ) )
				{
					map.MoveHexByDir( tx, ty, 4, 1 );
				}
				else
				{
					map.MoveHexByDir( tx, ty, 3, 1 );
				}
			}
			else
			{
				map.MoveHexByDir( tx, ty, 2, 1 );
			}
			map.AddItem( tx, ty, PID_DOOR_BLOCKER, 1 );
		}
	}
	else
	{
		for ( uint16 i = 0; i < blocker_count; i++ )
		{ 
			if( dir == 1 )
			{
				if( ( i == 1 || i == 3 || i == 5 ) )
				{
					map.MoveHexByDir( tx, ty, 0, 1 );
				}
				else
				{
					map.MoveHexByDir( tx, ty, 1, 1 );
				}
			}
			else
			{
				map.MoveHexByDir( tx, ty, 5, 1 );
			}

			Item@ blockItem = map.GetItem( tx, ty, PID_DOOR_BLOCKER );
			DelGatewayItm( blockItem ); 
		}

		tx = door.HexX;
		ty = door.HexY;

		for ( uint16 i = 0; i < blocker_count; i++ )
		{
			if( dir == 1 )
			{
				if( ( i == 1 || i == 3 || i == 5 ) )
				{
					map.MoveHexByDir( tx, ty, 4, 1 );
				}
				else
				{
					map.MoveHexByDir( tx, ty, 3, 1 );
				}
			}
			else
			{
				map.MoveHexByDir( tx, ty, 2, 1 );
			}

			Item@ blockItem = map.GetItem( tx, ty, PID_DOOR_BLOCKER );
			DelGatewayItm( blockItem ); 
		}
		return;
	}
}

void ToggleLaserFence( Map& map, int entireId )
{
	if( entireId < ENTIRE_LASER_FENCE_BEGIN && entireId > ENTIRE_LASER_FENCE_END )
	{
		return;
	}

	uint entires = map.CountEntire( entireId );
	uint16 hx = 0, hy = 0;
	uint8 dir = 0;
	for( uint i = 0; i < entires; i++ )
	{
		map.GetEntireCoords( entireId, i, hx, hy, dir );

		uint distance = 2;
		uint16 laserFencePid = PID_LAZER_FENCE_NS;

		if( dir == 1 )
		{
			distance = 5;
			laserFencePid = PID_LAZER_FENCE_WE;
		}
		Item@ deathHex = null;
		@deathHex = map.GetItem( hx, hy, PID_DEATH_HEX );
		uint16 tx = hx, ty = hy;
		if( !valid( deathHex ) )
		{ 
			@deathHex = map.AddItem( hx, hy, PID_DEATH_HEX, 1 );
			CheckVictims( map, hx, hy );
			deathHex.DEATH_HEX_TYPE = ANIM2_DEAD_LASER;

			map.MoveHexByDir( tx, ty, dir, 1 );
			if( dir == 1 )
			{
				map.MoveHexByDir( tx, ty, 0, 1 );
			}
			Item@ fenceVFX = map.AddItem( tx, ty, laserFencePid, 1 );
			PlayGenericSound( map, tx, ty, "saber_on.ogg", 6 ); 
		}
		else
		{
			DelGatewayItm( deathHex );

			map.MoveHexByDir( tx, ty, dir, 1 );
			if( dir == 1 )
			{
				map.MoveHexByDir( tx, ty, 0, 1 );
			}
			Item@ fenceVFX = map.GetItem( tx, ty, laserFencePid );
			if( valid( fenceVFX ) )
			{
				DelGatewayItm( fenceVFX );
				PlayGenericSound( map, tx, ty, "saber_off.ogg", 6 ); 
			}
		}

		for( uint steps = 0; steps < distance; steps ++ )
		{
			if( dir == 1 && ( steps == 1 || steps == 3 || steps == 5 ) )
			{
				map.MoveHexByDir( hx, hy, 0, 1 );
			}
			else
			{
				map.MoveHexByDir( hx, hy, dir, 1 );
			}

			@deathHex = map.GetItem( hx, hy, PID_DEATH_HEX ); 
			if( !valid( deathHex ) )
			{ 
				@deathHex = map.AddItem( hx, hy, PID_DEATH_HEX, 1 );
				CheckVictims( map, hx, hy );
				deathHex.DEATH_HEX_TYPE = ANIM2_DEAD_LASER;
			}
			else
			{
				DelGatewayItm( deathHex );
			}
		}
	}
}

void CheckVictims( Map& map, uint16 hx, uint16 hy )
{
	Critter@[] victims; 
	map.GetCrittersHex( hx, hy, 0, FIND_LIFE_AND_KO, victims );
	if( victims.length() > 0 )
	{
		for( uint j = 0; j < victims.length(); j++ )
		{
			Critter@ victim = victims[ j ];
			victim.ToDead( ANIM2_DEAD_LASER, null );
			PlayGenericSound( map, victim.HexX, victim.HexY, "saber_kill.ogg", 6 ); 
		}
	}
}

void ToggleForceField( Map& map, Item& emitter, bool create )
{
	if( !valid( map ) )
	{
		return;
	}
	if( !valid( emitter ) )
	{
		return;
	}
	
	emitter.FIELD_STATE = create? EMITTER_ENABLED : EMITTER_DISABLED;
	
	uint16 emitterPid = emitter.GetProtoId();
	uint16 fieldPid = 0;
	uint16 hx = emitter.HexX, hy = emitter.HexY;
	uint8 dir = 0;

	switch( emitterPid )
	{
		case( PID_EB_EMITTER_HOR0 ):
		case( PID_EB_EMITTER_HOR1 ):
		case( PID_EB_EMITTER_HOR2 ):
		case( PID_EB_EMITTER_HOR3 ):
			fieldPid = emitter.EMITTER_FIELD_TYPE == EMITTER_FIELD_HARD ? PID_EB_SHORT_HOR1 : PID_EB_SHORT_HOR1_RED;
			dir = 4;
			break;
		case( PID_EB_EMITTER_VERT0 ):
		case( PID_EB_EMITTER_VERT1 ):
		case( PID_EB_EMITTER_VERT2 ):
		case( PID_EB_EMITTER_VERT3 ):
			fieldPid = emitter.EMITTER_FIELD_TYPE == EMITTER_FIELD_HARD ? PID_EB_SHORT_VERT1 : PID_EB_SHORT_VERT1_RED;
			dir = 2;
			break;
	}
	
	Item@ field = null;
	Item@ blocker0 = null;
	Item@ blocker1 = null;
	uint16 hexPid = emitter.EMITTER_FIELD_TYPE == EMITTER_FIELD_HARD ? PID_DOOR_BLOCKER : PID_FIELD_BLOCKER;
	if( dir == 2 )
	{
		map.MoveHexByDir( hx, hy, dir, 2 );
		@field = create ? map.AddItem( hx, hy, fieldPid, 1 ) : map.GetItem( hx, hy, fieldPid );
		if( valid( field ) )
		{
			map.MoveHexByDir( hx, hy, 5, 1 );
			@ blocker0 = create? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			map.MoveHexByDir( hx, hy, 2, 2 );
			@ blocker1 = create? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			if( !create )
			{
				DelGatewayItm( field );
				DelGatewayItm( blocker0 );
				DelGatewayItm( blocker1 );
			}
		}
	}
	else
	{
		map.MoveHexByDir( hx, hy, 4, 1 );
		map.MoveHexByDir( hx, hy, 3, 1 );
		@field = create ? map.AddItem( hx, hy, fieldPid, 1 ) : map.GetItem( hx, hy, fieldPid );
		if( valid( field ) )
		{
			map.MoveHexByDir( hx, hy, 4, 1 );
			@ blocker0 = create ? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			map.MoveHexByDir( hx, hy, 1, 1 );
			map.MoveHexByDir( hx, hy, 0, 1 );
			@ blocker1 = create ? map.AddItem( hx, hy, hexPid, 1 ) : map.GetItem( hx, hy, hexPid );
			if( !create )
			{
				DelGatewayItm( field );
				DelGatewayItm( blocker0 );
				DelGatewayItm( blocker1 );
			}
		}
	}
	string sound = create? "ELECTRI1.mp3" : "ELECTRIC.mp3";
	PlayGenericSound( map, emitter.HexX, emitter.HexY, sound, 10 );
}

void DelGatewayItm( Item@ item )
{
	if( valid( item ) )
	{
		DeleteItem( item );
	}
}

//DOOR WITH DIALOG
void SecurityDoorOpenClose( Critter& player ) 
{
	Item @door = GetItem( player.ParamBase[ ST_LAST_DOOR_ID ] );
	uint event_id = door.Val7;
	uint duration = 0;
	uint[] values;

	if( event_id == 0 )
	{
		event_id = CreateDoorEvent( door, duration, values );
	}

	if( !GetTimeEvent( event_id, duration, values ) )
	{ 
		event_id = CreateDoorEvent( door, duration, values );
	}

	values[EVENT_ON_OFF] = 1;
	duration = REAL_SECOND( 3 );
	door.LockerOpen();
	Map@ map = player.GetMap();
	ToggleDoorBlocker( map, door, false );
	SetTimeEvent( event_id, duration, values );
}

uint CreateDoorEvent( Item @item, uint &duration, uint[] &values ) 
{
	uint[] values_array = { item.Id, 1, 0 };
	duration = REAL_SECOND( 1 );
	item.Val7 = CreateTimeEvent( AFTER( duration ), "e_CloseSecurityDoor", values_array, false );
	values = values_array;
	values[EVENT_ID] = item.Val7;

	return item.Val7;
}

uint e_CloseSecurityDoor( uint[]@ values )
{
	if( values[EVENT_ON_OFF] == 0 )
	{
		return REAL_SECOND( 1 );
	}

	Item @door = GetItem( values[DOOR_ID] );

	door.LockerClose();

	uint16 hexX = 0, hexY = 0;
	Map@ map = door.GetMapPosition( hexX, hexY );
	ToggleDoorBlocker( map, door, true );

	values[EVENT_ON_OFF] = 0;

	return REAL_SECOND( 1 );
}

//#run gateway start itemId
void unsafe_start( Critter& cr, int p0, int p1, int p2, string@, int[]@ ) 
{
	if( isGM( cr ) )
	{
		start( cr, p0, p1, p2 ); 
	}
}

//~run gateway start 0 0 0
void start( Critter& cr, int p0, int p1, int p2 ) 
{
	Item @item = GetItem( p0 );
	int event_id = item.Val7;

	if( item.Val7 == 0 )
	{
		cr.Say( SAY_NORM, "event: " + event_id + " not found." );
		return;
	}

	cr.Say( SAY_NORM, "event " + event_id + " deleted." );

	item.Val7 = 0;
}

#endif //GATEWAY