#ifndef PLANTS_MODULE
#define PLANTS_MODULE

#include "_utils.fos"
#include "plants_h.fos"
#include "critter_skills_h.fos"
#include "flask_h.fos"

import bool CheckGard( Map& map, uint16 hexX, uint16 hexY ) from "qmap_farm";

class Plant
{
	uint16 pid;
	uint8 type;
	uint8 seedStage;
	uint8 gatheringStage;
	uint8 deathStage;
	int[] seed;
	int[] loot;
	
	Plant( uint16 pid, uint8 type, uint8 seedStage, uint8 gatheringStage, uint8 deathStage )
	{
		this.pid = pid;
        this.type = type;
        this.seedStage = seedStage;
		this.gatheringStage = gatheringStage;
		this.deathStage = deathStage;
	}
}

class PlantCollection
{
	Plant@[] plants;
	PlantCollection()
	{
	}
	
	PlantCollection@ cplant( uint16 pid, uint8 type, uint8 seedStage, uint8 gatheringStage, uint8 deathStage ) 
	{
		this.plants.insertLast( Plant( pid, type, seedStage, gatheringStage, deathStage ) );
		return this;
	}
	
	PlantCollection@ seed( int seed ) 
	{
		this.plants[ this.plants.length() - 1 ].seed.insertLast( seed );
		return this;
	}
	
	PlantCollection@ loot( int loot ) 
	{
		this.plants[ this.plants.length() - 1 ].loot.insertLast( loot );
		return this;
	}
  
  	PlantCollection@ get_by_type( uint8 type ) 
	{
		PlantCollection result;
		for( uint i=0, len = this.plants.length(); i < len; i++ )
		{
			if( this.plants[i].type == type )
			{
				result.plants.insertLast( this.plants[i] );
			}
		}
		return result;
	}

	Plant@ get_by_seed( uint16 seedPid ) 
	{
		for( uint i = 0, len = this.plants.length(); i < len; i++ )
		{
			if( this.plants[i].seed.find( seedPid ) != -1 )
			{
				return this.plants[i];
			}
		}
		return null;
	}
	
	Plant@ get_by_pid( uint16 pid ) 
	{
		for( uint i = 0, len = this.plants.length(); i < len; i++ )
		{
			if( this.plants[i].pid == pid )
			{
				return this.plants[i];
			}
		}
		return null;
	}	
}

PlantCollection@ plants = PlantCollection()
//					pid,							type, 			seedStage, gatheringStage, deathStage
    .cplant( PID_PLANT_RADCVET,					PLANT_TYPE_FARM, 		3,	 		4,			  5		)
		.seed( PID_PLANT_RADCVET_SEED )
		.loot( PID_RADCVET )
		.loot( PID_PLANT_RADCVET_DEAD )
    .cplant( PID_PLANT_CABBAGE,					PLANT_TYPE_FARM, 		1,	 		3,			  4		)
		.seed( PID_PLANT_CABBAGE_SEED )
		.loot( PID_CABBAGE )
		.loot( PID_PLANT_CABBAGE_DEAD )
    .cplant( PID_PLANT_FIVELEAF,				PLANT_TYPE_FARM, 		3,	 		4,			  5		)
		.seed( PID_PLANT_FIVELEAF_SEED )
		.loot( PID_FIVELEAF )
		.loot( PID_PLANT_FIVELEAF_DEAD )
	.cplant( PID_PLANT_CORN,					PLANT_TYPE_FARM, 		2,	 		3,			  4		)
		.seed( PID_PLANT_CORN_SEED )
		.loot( PID_CORN )
		.loot( PID_PLANT_CORN_DEAD )	
	.cplant( PID_HYDRO_NS_CORN,					PLANT_TYPE_HYDRO, 		2,	 		3,			  4		)
		.seed( PID_PLANT_CORN_SEED )
		.loot( PID_CORN )
		.loot( PID_PLANT_CORN_DEAD )
	.cplant( PID_HYDRO_EW_CORN,					PLANT_TYPE_HYDRO, 		2,	 		3,			  4		)
		.seed( PID_PLANT_CORN_SEED )
		.loot( PID_CORN )
		.loot( PID_PLANT_CORN_DEAD )
	.cplant( PID_HYDRO_NS_CAB,					PLANT_TYPE_HYDRO, 		1,	 		3,			  4		)
		.seed( PID_PLANT_CABBAGE_SEED )
		.loot( PID_CABBAGE )
		.loot( PID_PLANT_CABBAGE_DEAD )	
	.cplant( PID_HYDRO_EW_CAB,					PLANT_TYPE_HYDRO, 		1,	 		3,			  4		)
		.seed( PID_PLANT_CABBAGE_SEED )
		.loot( PID_CABBAGE )
		.loot( PID_PLANT_CABBAGE_DEAD )	
	.cplant( PID_MUSHBED_PALE,					PLANT_TYPE_MUSHBED, 	0,	 		0,			  4		)
		.seed( PID_SEEDLING_PALE_MUSHROOM )
		.seed( PID_RISING_PALE_MUSHROOM )
		.seed( PID_PALE_MUSHROOM )
	.cplant( PID_MUSHBED_BLACK,					PLANT_TYPE_MUSHBED, 	0,	 		0,			  4		)
		.seed( PID_SEEDLING_BLACK_MUSHROOMS )
		.seed( PID_RISING_BLACK_MUSHROOMS )
		.seed( PID_BLACK_MUSHROOMS )
	.cplant( PID_MUSHBED_GECKO,					PLANT_TYPE_MUSHBED, 	0,	 		0,			  4		)
		.seed( PID_SEEDLING_TONGUE_GECKO )
		.seed( PID_RISING_TONGUE_GECKO )
		.seed( PID_TONGUE_GECKO )
	.cplant( PID_MUSHBED_ANT,					PLANT_TYPE_MUSHBED, 	0,	 		0,			  4		)
		.seed( PID_SEEDLING_MURAVNIKTAR )
		.seed( PID_RISING_MURAVNIKTAR )
		.seed( PID_MURAVNIKTAR )
	.cplant( PID_MUSHBED_MUT,					PLANT_TYPE_MUSHBED, 	0,	 		0,			  4		)
		.seed( PID_SEEDLING_MUTMUSH )
		.seed( PID_RISING_MUTMUSH )
		.seed( PID_MUTMUSH )
	;

Plant@ GetPlantByPid( Item@ item )
{
    uint16 Pid = item.GetProtoId();
    return plants.get_by_pid( Pid );
}

Plant@ GetPlant( Item@ seed, bool isFarm ) 
{
	bool isMushroom = ( mushbed_seeds.find( seed.GetProtoId() ) != -1 );
	uint8 type = isFarm ? PLANT_TYPE_FARM : ( isMushroom ? PLANT_TYPE_MUSHBED : PLANT_TYPE_HYDRO );
	return plants.get_by_type( type ).get_by_seed( seed.GetProtoId() );
}

void TryPlantSeed( Critter& cr, Item& seed, int hexX, int hexY, Item@ plant_bed ) 
{
	bool isFarm = true;
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}

	if( valid( plant_bed ) )
	{
		isFarm = false;
	}

	Plant@ plant = GetPlant( seed, isFarm );

	if( !valid( plant ) ) 
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 You can't plant this!" );
		return;
	}

	if( plant.type == PLANT_TYPE_FARM )
	{
		if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > 1 )
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 You are too far from a plant bed." );
			return;
		}

		if( CheckGard( map, hexX, hexY ) )
		{
			Item@[] items;
			if( map.GetItems( hexX, hexY, items ) == 0 )
			{
				PlantSeed( cr, seed, hexX, hexY );
			}
			else
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 You need to have empty soil." );
			}
		}
		else
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 You need to plant it in some good soil." );
		}
	}
	/*else if( plant.type == PLANT_TYPE_HYDRO ) //WIP
	{
		if( PlantHydro( cr, seed, plant_bed ) )
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 Planting Hydro" );
		}
		else
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 You need to plant it on a hydroponics farm." );
		}
	}*/
	else if( plant.type == PLANT_TYPE_MUSHBED )
	{
		if( plant_bed.GetProtoId() == PID_MUSHBED_EMPTY )
		{
			if( plant_bed.PLANT_WATERING > 0 && plant_bed.PLANT_FERTILITY > 0 )
			{
				PlantMushroom( cr, seed, plant_bed );
				cr.Say( SAY_NETMSG, "|0xFFFF00 Planting Mushroom" );
			}
			else
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 The soil must be watered and furtilized." );
			}
		}
		else
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 You need to plant this in a mushroom bed." );
		}
	}
}

void PlantSeed( Critter& cr, Item& seed, int hexX, int hexY )
{
	Map@ map = cr.GetMap();	
	Item@ plantedSeed = map.AddItem( hexX, hexY, seed.GetProtoId(), 1 );
	cr.Say( SAY_NETMSG, "|0xFFFF00 Planting Seed" );
	uint[] values = { plantedSeed.Id };
	plantedSeed.PLANT_EVENT = CreateTimeEvent( AFTER( REAL_MINUTE( Random( 300, 360 ) ) ), "e_SeedEvent", values, true );
	_SubItem( seed, 1 );
	cr.Animate( 0, ANIM2_PICKUP, null, false, true );
	TryRaiseSkill( cr );
}

uint e_SeedEvent( uint[]@ values )
{
	Item@ plantedSeed = GetItem( values[0] );
	if( !valid( plantedSeed ) )
	{
		return 0;
	}
	
	uint16 hx = 0, hy = 0;
	Map@ map = plantedSeed.GetMapPosition( hx, hy );
	if( !valid( map ) )
	{
		EraseTimeEvent( plantedSeed.PLANT_EVENT );
		return 0;
	}
	
	if( !CheckGard( map, plantedSeed.HexX, plantedSeed.HexY ) )
	{
		EraseTimeEvent( plantedSeed.PLANT_EVENT );
		return 0;
	}
	
	Plant@ plant = GetPlant( plantedSeed, true );
	if( !valid( plant ) )
	{
		EraseTimeEvent( plantedSeed.PLANT_EVENT );
		return 0;
	}
	
	plantedSeed.PLANT_GROW_STAGE ++;
	plantedSeed.ChangeProto( plant.pid );
	IncreaseCrop( plantedSeed, 1 );

	EraseTimeEvent( plantedSeed.PLANT_EVENT );
	plantedSeed.PLANT_EVENT = CreateTimeEvent( AFTER( REAL_MINUTE( Random( 300, 360 ) ) ), "e_PlantGrowth", values, true );
	return 0;
}

void PlantMushroom( Critter& cr, Item& seed, Item& plant_bed )
{
	if( valid( seed ) && valid( plant_bed ) )
	{
		Plant@ plant = GetPlant( seed, false );
		if( valid( plant ) )
		{
			plant_bed.PLANT_BED_DNA = plant_bed.GetProtoId();
			plant_bed.ChangeProto( plant.pid );
			
			Map@ map = cr.GetMap();
			uint16 hx = plant_bed.HexX, hy = plant_bed.HexY;
			map.MoveHexByDir( hx, hy, 0, 1 );
			map.AddItem( hx, hy, PID_PLANT_BED_BLOCKER, 1 );
			map.MoveHexByDir( hx, hy, 2, 1 );
			map.AddItem( hx, hy, PID_PLANT_BED_BLOCKER, 1 );
			map.MoveHexByDir( hx, hy, 3, 1 );
			map.MoveHexByDir( hx, hy, 4, 1 );
			map.AddItem( hx, hy, PID_PLANT_BED_BLOCKER, 1 );
			map.MoveHexByDir( hx, hy, 5, 1 );
			map.AddItem( hx, hy, PID_PLANT_BED_BLOCKER, 1 );
			
			uint[] values = { plant_bed.Id };
			plant_bed.PLANT_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_PlantGrowth", values, true );
			_SubItem( seed, 1 );
			cr.Animate( 0, ANIM2_PICKUP, null, false, true );
			TryRaiseSkill( cr );
		}
	}
}

uint e_PlantGrowth( uint[]@ values )
{
	Item@ seed = GetItem( values[0] );
	if( valid( seed ) )
	{
		Plant@ plant = GetPlantByPid( seed );
		if( !valid( plant ) )
		{
			return 0;
		}
		
		IncreaseCrop( seed, 1 );
		
		if( plant.type != PLANT_TYPE_MUSHBED )
		{ 
			if( seed.PLANT_GROW_STAGE == 1 && seed.PLANT_WATERING == 0 )
			{
				seed.PLANT_GROW_STAGE = plant.deathStage - 1;
			}
		}
		
		if( seed.PLANT_GROW_STAGE < plant.deathStage )
		{
			seed.PLANT_GROW_STAGE ++;
			ChangeFrame( seed, seed.PLANT_GROW_STAGE - 1 );
			uint time = seed.PLANT_GROW_STAGE == plant.gatheringStage ? 6 : 24;
			
			if( plant.type == PLANT_TYPE_MUSHBED )
			{
				time *= 2;
				if( seed.PLANT_WATERING > 0 )
				{
					time /= 2;
					seed.PLANT_WATERING = 0;
				}
				seed.PLANT_FERTILITY = 0;
			}
			
			uint time2 = ( time - 1 ) * 60;
			time *= 60;
			return REAL_MINUTE( Random( time, time2 ) );
		}
	}
	return 0;
}

bool StartMenuPlant( Critter& cr, Item& plant )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return false;
    }

    iMenuHandler@ handler = MenuPlant( plant, map );
    iDialogBox@ menu = OpenMenu( cr, "Farming", handler );
	return true;
}

class MenuPlant: CenteredMenuHandler 
{
    uint plant_id;
    uint map_id;
	
    MenuPlant ( Item& plant, Map& map )
	{
        plant_id = plant.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ plant = GetItem( plant_id );
		Plant@ cplant = GetPlantByPid( plant );
		if( !valid( cplant ) )
		{
			return false;
		}
		
		if( plant.PLANT_WATERING <= 0 )
		{
			if( menu.Button( "Water" ) )
			{
				Item@ hand = _CritGetItemHand( cr );
				if( valid( hand ) )
				{
					TryWaterPlant( cr, hand, plant );
					return true;
				}
				else
				{
					cr.Say( SAY_NETMSG, "|0xFFFF00 You require to hold a water container." );
					return false;
				}
			}
		}
		
		if( plant.PLANT_FERTILITY <= 0 )
		{
			if( menu.Button( "Fertilize" ) )
			{
				if( hasItems( cr, furtilizers ) )
				{
					Item@[] furtilizer = getItems( cr, furtilizers );
					FurtilezePlant( cr, furtilizer[0], plant );
					return true;
				}
				cr.Say( SAY_NETMSG, "|0xFFFF00 You require furtilizers." );
				return true;
			}	
		}
		
		uint16 lootPid;
		uint amount = plant.PLANT_RESOURCE_CAPACITY;
		
		if( menu.Button( "Gather" ) )
		{	
			switch( cplant.type )
			{
				case( PLANT_TYPE_HYDRO ):
				case( PLANT_TYPE_FARM ):
				{
					if( plant.PLANT_GROW_STAGE == cplant.seedStage )
					{
						lootPid = cplant.seed[ 0 ];
						if( cplant.pid == PID_PLANT_CORN || cplant.pid == PID_PLANT_FIVELEAF )
						{
							cr.AddItem( cplant.loot[ cplant.loot.length() - 1 ], 1 );
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( cplant.loot[ cplant.loot.length() - 1 ] * 100 ) + "@$amount" + 1 );
						}
					}
					else if( plant.PLANT_GROW_STAGE == cplant.gatheringStage )
					{
						lootPid = cplant.loot[ 0 ];
						if( cplant.pid == PID_PLANT_CORN || cplant.pid == PID_PLANT_FIVELEAF )
						{
							cr.AddItem( cplant.loot[ cplant.loot.length() - 1 ], 1 );
							cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( cplant.loot[ cplant.loot.length() - 1 ] * 100 ) + "@$amount" + 1 );
						}
					}
					else
					{
						lootPid = cplant.loot[ cplant.loot.length() - 1 ];
						amount = 1;
					}
					DeleteItem( plant );
					break;
				}
				case( PLANT_TYPE_MUSHBED ):
				{
					if( plant.PLANT_GROW_STAGE > 1 )
					{
						lootPid = cplant.seed[ plant.PLANT_GROW_STAGE - 2 ];
						CleanBed( plant );
					}
					else
					{
						cr.Say( SAY_NETMSG, "|0xFFFF00 There is nothing to gather yet!" );
						return true;
					}
					break;
				}
				default:
					return false;
			}
			
			if( amount > 0 )
			{
				Item@ loot = cr.AddItem( lootPid, amount );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_YOU_GATHERED, "$proto@msg item " + ( lootPid * 100 ) + "@$amount" + amount );
			}
			
			return false;
		}	
		return true;
    }
	
    string@ Description( Critter& cr )
	{
		Item@ plant = GetItem( plant_id );
		Plant@ cplant = GetPlantByPid( plant );
		string info = "Plant status: ";
		string watering = plant.PLANT_WATERING > 0 ? "|0xFFFF00 watered|0x3CF800 ." : "|0xFFFF00 not watered|0x3CF800 .";
		string fertility = plant.PLANT_FERTILITY > 0 ? "|0xFFFF00 fertilised|0x3CF800 ." : "|0xFFFF00 not fertilised|0x3CF800 .";
		
		string stage = "\n";
		if( plant.PLANT_GROW_STAGE == cplant.seedStage )
		{
			stage += "The plant is ripe enough to gather seeds.";
		}
		else if( plant.PLANT_GROW_STAGE == cplant.gatheringStage )
		{
			stage += "The plant is ripe and can be gathered.";
		}
		else if( plant.PLANT_GROW_STAGE == cplant.deathStage )
		{
			stage += "The plant is dead!";
		}
		else
		{
			stage += "The plant is growing...";
		}

		string crop = plant.PLANT_RESOURCE_CAPACITY;
		info += "\nThe plant is " + watering + "\nThe plant is " + fertility + stage + "\nCrop: " + crop;
        return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Close Menu", null );
    }
}

bool FurtilezePlant( Critter& cr, Item& furtilizer, Item& plant )
{
	if( plant.PLANT_FERTILITY > 0 )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 There is already enough furtilezer in there." );
		return false;
	}
	plant.PLANT_FERTILITY ++;
	cr.Say( SAY_EMOTE_ON_HEAD, "fertilizes the plant." );
	cr.Say( SAY_NETMSG, "|0xFFFF00 You have furtilized the plant." );
	_SubItem( furtilizer, 1 );
	TryRaiseSkill( cr );
	int amount = 0;
	amount += ( cr.ParamBase[ SK_FARMING ] / 50 );
	IncreaseCrop( plant, amount );
	return true;
}

bool TryWaterPlant( Critter& cr, Item& water, Item& plant )
{
	if( !valid( water ) )
	{
		return false;
	}
	
	if( !valid( plant ) )
	{
		return false;
	}
	
	if( plant.PLANT_WATERING > 0 )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 There is already enough water in there." );
		return false;
	}
	
	uint16 flaskPid = water.GetProtoId();
	if( FindFlask( water ) && ( water.DRINK_DNA == PID_GLASS_BOTTLE_FULL_PRT || water.DRINK_DNA == PID_DISTIL_WATER_PRT || water.DRINK_DNA == PID_GLASS_BOTTLE_DIRTY_FULL_PRT ) 
		|| flaskPid == PID_GLASS_BOTTLE_FULL_PRT || flaskPid == PID_DISTIL_WATER_PRT || flaskPid == PID_GLASS_BOTTLE_DIRTY_FULL_PRT
		&& water.REMAINING_USES > 0 )
	{
		WaterPlant( cr, water, plant );
		return true;
	}
	else
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 You require to hold a water container." );
	}
	return false;
}

void WaterPlant( Critter& cr, Item& water, Item& plant )
{
	water.REMAINING_USES --;
	water.EXTRA_WEIGHT -= 100;
	water.Update();
	plant.PLANT_WATERING ++;
	cr.Say( SAY_NETMSG, "|0xFFFF00 You have watered the plant." );
	cr.Say( SAY_EMOTE_ON_HEAD, "waters the plant" );
	
	if( water.REMAINING_USES < 1 )
	{
		if( FindFlask( water ) )
		{
			water.DRINK_DNA = 0;
			water.REMAINING_USES = 0;
			water.EXTRA_WEIGHT = 0;
			ChangeFlaskProto( water );
		}
		else
		{
			_SubItem( water, 1 );
			cr.AddItem( PID_BOTTLE_GLASS, 1 );
		}
	}
	TryRaiseSkill( cr );
}

bool StartMenuMushbed( Critter& cr, Item& mushbed )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return false;
    }

    iMenuHandler@ handler = MenuMushbed( mushbed, map );
    iDialogBox@ menu = OpenMenu( cr, "Mushroom bed", handler );
	return true;
}

class MenuMushbed: CenteredMenuHandler 
{
    uint mushbed_id;
    uint map_id;
	
    MenuMushbed ( Item& mushbed, Map& map )
	{
        mushbed_id = mushbed.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ mushbed = GetItem( mushbed_id );
		
		if( mushbed.PLANT_WATERING <= 0 )
		{
			if( menu.Button( "Water" ) )
			{
				Item@ hand = _CritGetItemHand( cr );
				if( valid( hand ) )
				{
					TryWaterPlant( cr, hand, mushbed );
					return true;
				}
				else
				{
					cr.Say( SAY_NETMSG, "|0xFFFF00 You require to hold a water container." );
					return false;
				}
			}
		}
		
		if( mushbed.PLANT_FERTILITY <= 0 )
		{
			if( menu.Button( "Fertilize" ) )
			{
				if( hasItems( cr, furtilizers ) )
				{
					Item@[] furtilizer = getItems( cr, furtilizers );
					FurtilezePlant( cr, furtilizer[0], mushbed );
					return true;
				}
				cr.Say( SAY_NETMSG, "|0xFFFF00 You require furtilizers." );
				return true;
			}
		}
		return true;
    }
	
    string@ Description( Critter& cr )
	{
		Item@ mushbed = GetItem( mushbed_id );
		string info = "Mushroom bed status: ";
		string watering = mushbed.PLANT_WATERING > 0 ? "|0xFFFF00 watered|0x3CF800 ." : "|0xFFFF00 not watered|0x3CF800 .";
		string fertility = mushbed.PLANT_FERTILITY > 0 ? "|0xFFFF00 fertilised|0x3CF800 ." : "|0xFFFF00 not fertilised|0x3CF800 .";
		info += "\nThe mushroom bed is " + watering + "\nThe mushroom bed is " + fertility;
        return info;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "Close Menu", null );
    }
}

void TryRaiseSkill( Critter& cr )
{
	if( Random( 1, 10 ) == 10 )
	{
		int skillNum = SK_FARMING;
		raiseSkill( cr, skillNum );
	}
}

void IncreaseCrop( Item& plant, int amount )
{
	for( int i = 0; i < amount ; i++ )
	{
		if( Random( 0, 1 ) == 1 )
		{
			plant.PLANT_RESOURCE_CAPACITY ++;
		}
	}
}

void CleanBed( Item& plant )
{
	ChangeFrame( plant, 0 );
	plant.ChangeProto( plant.PLANT_BED_DNA );

	plant.PLANT_GROW_STAGE = 0;
	plant.PLANT_BED_DNA = 0;
	if( plant.PLANT_EVENT != 0 )
	{
		EraseTimeEvent( plant.PLANT_EVENT );
		plant.PLANT_EVENT = 0;
	}
	plant.PLANT_RESOURCE_CAPACITY = 0;
	plant.PLANT_WATERING = 0;
	plant.PLANT_FERTILITY = 0;
	
	uint16 hx = 0, hy = 0;
	Map@ map = plant.GetMapPosition( hx, hy );

	Item@ blocker = null;
	map.MoveHexByDir( hx, hy, 0, 1 );
	@ blocker = map.GetItem( hx, hy, PID_PLANT_BED_BLOCKER );
	if( valid( blocker ) )
	{
		DeleteItem( blocker );
	}
	
	map.MoveHexByDir( hx, hy, 2, 1 );
	@ blocker = map.GetItem( hx, hy, PID_PLANT_BED_BLOCKER );
	if( valid( blocker ) )
	{
		DeleteItem( blocker );
	}
	
	map.MoveHexByDir( hx, hy, 3, 1 );
	map.MoveHexByDir( hx, hy, 4, 1 );
	@ blocker = map.GetItem( hx, hy, PID_PLANT_BED_BLOCKER );
	if( valid( blocker ) )
	{
		DeleteItem( blocker );
	}
	
	map.MoveHexByDir( hx, hy, 5, 1 );
	@ blocker = map.GetItem( hx, hy, PID_PLANT_BED_BLOCKER );
	if( valid( blocker ) )
	{
		DeleteItem( blocker );
	}
}

#endif // PLANTS_MODULE