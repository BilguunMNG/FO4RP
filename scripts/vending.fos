// Author: cvet, rifleman17 - rewritten by Frank Kost, eddited by Anuri&Terpsic Mims

#include "_utils.fos"

//								Val0 // Used in locks DO NOT USE HERE
#define STATE					Val1 // not yet
#define PRODUCT					Val2 // not yet
#define PRICE					Val4 // цена товара
#define BALANCE					Val5 // Денежный баланс на который можно купить товар.
#define CHARGE					Val6 // not yet

const string[] SoundNames = {"CLANG.ACM", "CLANG1.ACM", "CLANK.ACM", "CLANK1.ACM" };

// Интерактивное меню ку3, точка входа main.fos
class MenuVendingMachine: CenteredMenuHandler {
    uint target_id;
    uint map_id;
	
    MenuVendingMachine(Item& target, Map& map) {
        target_id = target.Id;
        map_id = map.Id;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap(map_id);
        Item@ target = GetItem(target_id);
		
        if( map is null || target is null ) {
            return false;
        }
		
		
		if( valid( cr.GetItem( PID_DOLLAR_100, -1 ) ) ) {
			if( menu.Button( "Вставить 100 $" ) ) {
				Item@ cash = cr.GetItem( PID_DOLLAR_100, -1 );
				if( valid( cash ) )
				{
					_SubItem( cash, 1 );
					map.PlaySound( SoundNames[ Random( 0, SoundNames.length() -1 ) ], target.HexX, target.HexY, 5 );
					target.AddItem( PID_DOLLAR_100, 1, 0 );
					target.BALANCE += 100;	
					return true;
				}
			}
		}

		if( valid( cr.GetItem( PID_DOLLAR_20, -1 ) ) ) {
			if( menu.Button( "Вставить 20 $" ) ) {
				Item@ cash = cr.GetItem( PID_DOLLAR_20, -1 );
				if( valid( cash ) )
				{
					_SubItem( cash, 1 );
					map.PlaySound( SoundNames[ Random( 0, SoundNames.length() -1 ) ], target.HexX, target.HexY, 5 );
					target.AddItem( PID_DOLLAR_20, 1, 0 );
					target.BALANCE += 20;	
					return true;
				}
			}
		}
		
		if( valid( cr.GetItem( PID_DOLLAR_5, -1 ) ) ) {
			if( menu.Button( "Вставить 5 $" ) ) {
				Item@ cash = cr.GetItem( PID_DOLLAR_5, -1 );
				if( valid( cash ) )
				{
					_SubItem( cash, 1 );
					map.PlaySound( SoundNames[ Random( 0, SoundNames.length() -1 ) ], target.HexX, target.HexY, 5 );	
					target.AddItem( PID_DOLLAR_5, 1, 0 );
					target.BALANCE += 5;	
					return true;
				} 
			}
		}
		
		if( valid( cr.GetItem( PID_BOTTLE_CAPS, -1 ) ) ) {
			if( menu.Button( "Вставить 1 $" ) ) {
				Item@ cash = cr.GetItem( PID_BOTTLE_CAPS, -1 );
				if( valid( cash ) )
				{
					_SubItem( cash, 1 );
					map.PlaySound( SoundNames[ Random( 0, SoundNames.length() -1 ) ], target.HexX, target.HexY, 5 );
					target.AddItem( PID_BOTTLE_CAPS, 1, 0 );
					target.BALANCE += 1;	
					return true;
				} 
			}
		}
		
		if( menu.Button( "Купить" ) ) {
			if( target.BALANCE >= target.PRICE ) {
				Item@[] cigPacks;
				if( target.GetItems( uint( -1 ), cigPacks ) == 0 )
				{
					map.PlaySound( "LOSER.ACM", target.HexX, target.HexY, 5 );
					return true;
				}
			
				for( uint i = 0; i < cigPacks.length(); i++ )
				{			
					if( cigPacks[i].GetProtoId() == PID_CIGARETTES )
					{
						Item@ cigPack = target.GetItem( PID_CIGARETTES, 0 );
						_SubItem( cigPack, 1 );
						map.PlaySound( SoundNames[ Random( 0, SoundNames.length() -1 ) ], target.HexX, target.HexY, 5 );	
						cr.AddItem( PID_CIGARETTES, 1 );
						target.BALANCE -= target.PRICE;
						return true;
					} else {
						map.PlaySound( "LOSER.ACM", target.HexX, target.HexY, 5 );
						return false;
					}
				}
			} else {
				map.PlaySound( "LOSER.ACM", target.HexX, target.HexY, 5 );
				return true;
			}
			
		}
		
		if( menu.Button( "Возврат денег" ) ) {
			Item@ change = target.GetItem( PID_BOTTLE_CAPS, 0 );
			if( valid( change ) ) {
				uint changeCount = change.GetCount();
				if( changeCount >= target.BALANCE )
				{
					changeCount = target.BALANCE;
					_SubItem( change, changeCount );
					cr.AddItem( PID_BOTTLE_CAPS, changeCount );
					target.BALANCE -= changeCount;
					map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":звон монет:" );
					return false;
				} else {
					_SubItem( change, changeCount );
					cr.AddItem( PID_BOTTLE_CAPS, changeCount );
					target.BALANCE -= changeCount;
					map.SetText( target.HexX, target.HexY, COLOR_LGRAY, ":звон монет:" );
					return false;
				}
			} else {
				map.PlaySound( "LOSER.ACM", target.HexX, target.HexY, 5 );
				return true;				
			}
		}
		
		if( menu.Button( "Открыть сейф" ) ) {
			if( FLAG( target.LockerCondition, LOCKER_LOCKED ) ) {
				cr.Say( SAY_NETMSG, "|0xFFFF00 Аппарат заперт." );
				return true;
			} else {
				cr.ShowContainer( null, target, TRANSFER_HEX_CONT_UP );
				return false;
			}
        }
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
	
		Item@ target = GetItem(target_id);
		string status;
		Item@ change = target.GetItem( PID_BOTTLE_CAPS, 0 );
		if( !valid( change ) ) {
			status = "\nАппарат сдачу не дает!"; 			
		}		
		string balance = target.BALANCE;
		string price = target.PRICE;
		string product = GetMsgStr( 0, TEXTMSG_ITEM, 54100 ); //пока хардкод
		string amount;		

		Item@[] cigPacks;
		if( target.GetItems( uint( -1 ), cigPacks ) == 0 )
		{
			amount = "\nтовар закончился";
		}
		
		amount = "\nтовар закончился";
		
		for( uint i = 0; i < cigPacks.length(); i++ )
		{			
			if( cigPacks[i].GetProtoId() == PID_CIGARETTES )
			{
				amount = "\nОсталось ";
				amount += cigPacks[i].GetCount();
				amount += " шт.";
			}
		}

		string info;
		info = "Вендинговая машина № " + target.Id;
		info += "\nТовар: " + product;
		info += amount + " Цена: " + price + " $";
		info += "\nВставьте деньги в приемник.";
		info += "\n" + status ;
		info += "\nБаланс: " + balance + " $";
        return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator("Скрыть меню", null);
    }
	
    void OnMenuDraw(Critter& cr) {
        cr.Say(SAY_NETMSG, DebugMenu(cr));
    }
}

// точка входа из main.fos при юзе рукой
void StartMenuVendingMachine( Critter& cr, Item& target) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuVendingMachine(target, map);
    iDialogBox@ menu = OpenMenu( cr, "Вендинговый Аппарат", handler );
}