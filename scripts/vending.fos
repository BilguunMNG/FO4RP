#ifndef VENDING
#define VENDING

#include "_utils.fos"
#include "vending_h.fos"
#include "speed_h.fos"

void TransferItemToContainer( Item& item, Item& vendMach )
{
    uint16 pid = item.GetProtoId();
    _SubItem( item, 1 );
    vendMach.AddItem( pid, 1, 0 );
}

void TransferItemToContainer( Item& item, Item& vendMach, uint count )
{
    uint16 pid = item.GetProtoId();
    _SubItem( item, count );
    vendMach.AddItem( pid, count, 0 );
}

class MenuVendingMachine: CenteredMenuHandler
{
    uint vendMach_id;
    uint map_id;
	uint level;
	
    MenuVendingMachine( Item& vendMach, Map& map )
	{
        vendMach_id = vendMach.Id;
        map_id = map.Id;
		level = 0;
		
		if( !FLAG( vendMach.VENDING_MODE, IS_SELLING ) && !FLAG( vendMach.VENDING_MODE, IS_BUYING ) )
		{
			SETFLAG( vendMach.VENDING_MODE, IS_SELLING ); //default value on create
		}
	}

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap(map_id);
        Item@ vendMach = GetItem(vendMach_id);
	
		bool locked_in_place = !FLAG( vendMach.Flags, ITEM_CAN_PICKUP );
		
        if( map is null || vendMach is null )
		{
            return false;
        }

		for( uint i = 0, len = cash_pids.length(); i < len; i++ )
		{
			uint16 pid = cash_pids[i];
			uint balance_change = int( cash_values[i] );
			Item@ cash = cr.GetItem( pid, -1 );			

			if( menu.Button( "Deposit "+balance_change+" $" ) )
			{
				if( valid( cash ) )
				{
					TransferItemToContainer(cash, vendMach);
					PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( VendingSoundNames ), 15 );
					vendMach.BALANCE += balance_change;
					cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_INSERT_MONEY );
				}
				else if( cr.CountItem( PID_BOTTLE_CAPS ) >= balance_change )
				{
					@cash = cr.GetItem( PID_BOTTLE_CAPS, -1 );
					vendMach.BALANCE += balance_change;
					TransferItemToContainer(cash, vendMach, balance_change );
				}
				else
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				}
				return true;
			}
		}
		
		if( FLAG( vendMach.VENDING_MODE, IS_SELLING ) && menu.Button( "[ Buy 1 pc. ]" ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			if( vendMach.BALANCE >= vendMach.SELLING_PRICE )
			{
				Item@[] productItm;
				if( vendMach.GetItems( uint( -1 ), productItm ) == 0 )
				{
					PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
					return true;
				}
				
				Item@ bought = vendMach.GetItem( vendMach.PRODUCT, 0 );
				if( valid( bought ) )
				{
					if( bought.IsStackable() )
					{ 
						_SubItem( bought, 1 );
						cr.AddItem( vendMach.PRODUCT, 1 );
					}
					else
					{
						MoveItem( bought, 1, cr );
					}
					PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( VendingSoundNames ), 15 );
					vendMach.BALANCE -= vendMach.SELLING_PRICE;
					cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_COLLECT_GOODS );
					return true;
				}
			}
			else
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				return true;
			}
			
		}
		
		if( FLAG( vendMach.VENDING_MODE, IS_BUYING ) && menu.Button( "[ Sell 1 pc. ]" ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			
			Item@ sold_item = cr.GetItem( vendMach.PRODUCT, -1 );
			if( !valid( sold_item ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				return true;
			}
			
			MoveItem( sold_item, 1, vendMach, 0 );
			vendMach.BALANCE += vendMach.BUYING_PRICE;

			PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( VendingSoundNames ), 15 );
			
			cr.Say( SAY_EMOTE_ON_HEAD, "Sells" );//TODO 4Anuri: cr.SayMsg
			return true;
		}
		
		if( menu.Button( "Take change" ) )
		{
			PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
			Item@ change = vendMach.GetItem( PID_BOTTLE_CAPS, 0 );
			if( valid( change ) && vendMach.BALANCE > 0 )
			{
				int changeCount = MIN( int( change.GetCount() ), vendMach.BALANCE );
				_SubItem( change, uint( changeCount ) );
				cr.AddItem( PID_BOTTLE_CAPS, changeCount );
				vendMach.BALANCE -= changeCount;
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_COLLECTS_CHANGE );
				return false;
			}
			else
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "LOOSER.mp3", 15 );
				return true;
			}
		}
		
		if( !FLAG( vendMach.LockerCondition, LOCKER_LOCKED ) )
		{
			Item@[] productItm;
			vendMach.GetItems( uint( -1 ), productItm );
			if( productItm.length() > 0 )
			{
				if( menu.Button( "Select item" ) )
				{
					MenuSelectProduct@ select_product = MenuSelectProduct( vendMach, map );
					select_product.level = level + 1;
					return menu.OpenChild( "Level " + select_product.level, select_product );
				}
			}
			else
				if( menu.Button( "[ NO ITEMS INSIDE ]" ) )
					return true;
			
			if( menu.Button( "Set selling price" ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				cr.RunClientScript( "client_screen_numberpad@ShowScreen", vendMach.Id, 0, 0, "Введите цену", null );
				return false;
			}
			
			if( menu.Button( "Set buying price" ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				cr.RunClientScript( "client_screen_numberpad@ShowScreen", vendMach.Id, 1, 0, "Введите цену", null );
				return false;
			}
			
			string[] mode_names = { "Sell", "Buy", "Exchange" };
			int mode_max = mode_names.length() - 1;
			int mode  = CLAMP( vendMach.VENDING_MODE - 1, 0, mode_max );
			
			if( menu.Button( "Mode: " + mode_names[mode] ) )
			{
				vendMach.VENDING_MODE = ( mode + 1 ) % ( mode_max + 1 ) + 1;				
				return true;
			}

			if( locked_in_place )
			{
				if( menu.Button( "Untag" ) )
				{
					LockInPlace( cr, vendMach );
					return true;
				}
			}
			else
			{
				if( menu.Button( "Lock" ) )
				{
					LockInPlace( cr, vendMach );
					return true;
				}

				if( menu.Button( "Pick up" ) )
				{
					PickItem( cr, vendMach );
					ChangeCritterSpeed( cr );
					return false;
				}			
			}
		}

		if( menu.Button( "Open safe" ) )
		{
			if( FLAG( vendMach.LockerCondition, LOCKER_LOCKED ) )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MACHINE_LOCKED );
				PlayGenericSound( map, cr.HexX, cr.HexY, "ILCNTNRB.mp3", 15 );
				return true;
			}
			else
			{
				ShowContainer( cr, vendMach, TRANSFER_HEX_CONT_UP );
				PlayGenericSound( map, cr.HexX, cr.HexY, "keys.ogg", 6 );
				PlayGenericSound( map, cr.HexX, cr.HexY, "IOCNTNRB.mp3", 15 );
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_OPENS_MACHINE );
				return false;
			}
        }

		if( menu.Button( "Close menu" ) )
		{
			return false;
		}
		
		return true;
    }
	
    string@ Description( Critter& cr )
	{
		Item@ vendMach = GetItem( vendMach_id );
		string vending_machine_description = "Vending machine № " + COLOR_YELLOW + "" + vendMach.Id + NEXT_LINE + COLOR_GREEN;
		
		string merchandise_description = "Merchandise: ";
		
		uint itemPID = vendMach.PRODUCT;
		if( itemPID != 0 )
		{
			merchandise_description += COLOR_YELLOW + GetMsgStr( 1, TEXTMSG_ITEM, itemPID * 100 ) + COLOR_GREEN + ", ";
			
			uint count = CountItemsByPID( vendMach, itemPID );
			if( count == 0 )
			{
				merchandise_description += COLOR_RED + "SOLD OUT";
			}
			else
			{
				merchandise_description += COLOR_YELLOW + count + " pc.";
			}
			
			merchandise_description += NEXT_LINE + COLOR_GREEN;
			
			if( FLAG( vendMach.VENDING_MODE, IS_SELLING ) )
			{
				merchandise_description += "Price: " + COLOR_YELLOW + vendMach.SELLING_PRICE + COLOR_GREEN + "$. ";
			}
			
			if( FLAG( vendMach.VENDING_MODE, IS_BUYING ) )
			{
				merchandise_description += "Purchace: " + COLOR_YELLOW + vendMach.BUYING_PRICE + COLOR_GREEN + "$. ";
			}
		}
		else
		{
			merchandise_description += COLOR_RED + "EMPTY";
		}
		
		merchandise_description += NEXT_LINE + COLOR_GREEN;
		
		string available_actions_description;
		string[] action_name = { "money", "goods", "money or goods" };
		uint mode = CLAMP( uint( vendMach.VENDING_MODE - 1 ), 0, action_name.length() - 1 );
		available_actions_description = "Put your " + COLOR_WHITE + action_name[mode] + COLOR_GREEN + " into.";
		available_actions_description += NEXT_LINE + COLOR_GREEN;
		
		string cash_description = "Balance: " + COLOR_YELLOW + vendMach.BALANCE + COLOR_GREEN + " $";

		if( CountItemsByPID( vendMach, PID_BOTTLE_CAPS ) == 0 )
		{
			cash_description += " " + COLOR_RED + "NO CHANGE"; 			
		}		
		
        return vending_machine_description + merchandise_description + available_actions_description + cash_description;
    }
	
    string@ ButtonCancel()
	{
        return ButtonDecorator( "", null );
    }

	bool ShouldRedraw( Critter& cr )
	{
		Item@ vendMach = GetItem(vendMach_id);
		return valid( vendMach ) && GetDistantion( cr.HexX, cr.HexY, vendMach.HexX, vendMach.HexY ) < 2;
    }	
}

void StartMenuVendingMachine( Critter& cr, Item& vendMach )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuVendingMachine( vendMach, map );
    iDialogBox@ menu = OpenMenu( cr, "Vending Machine", handler );
}

class MenuSelectProduct: CenteredMenuHandler
{
    uint vendMach_id;
    uint map_id;
	uint level;
	int selectorPos;
	uint arrayPos;
	
    MenuSelectProduct( Item& vendMach, Map& map )
	{
        vendMach_id = vendMach.Id;
        map_id = map.Id;
		level = 1;
		selectorPos = 0;
		arrayPos = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
        Map@ map = GetMap( map_id );
        Item@ vendMach = GetItem( vendMach_id );
		
        if( map is null || vendMach is null )
		{
            return false;
        }
			
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		
		if( productItm.length() > 0 )
		{
			if ( menu.Button( "Previous" ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				selectorPos--;
				if( arrayPos == 0 )
				{
					arrayPos = productItm.length() - 1;
					selectorPos = arrayPos;
				}
				else
				{
					arrayPos = selectorPos;
				}
				Item@ selectedProduct = productItm[arrayPos];
				vendMach.PRODUCT = selectedProduct.GetProtoId();
				return true;
			}
			
			if ( menu.Button( "Next" ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				selectorPos++;
				if( arrayPos == productItm.length() -1 )
				{
					arrayPos = 0;
					selectorPos = arrayPos;
				}
				else
				{
					arrayPos = selectorPos;
				}
				Item@ selectedProduct = productItm[arrayPos];
				vendMach.PRODUCT = selectedProduct.GetProtoId();
				return true;
			}
			
			if ( menu.Button( "Confirm" ) )
			{
				PlayGenericSound( map, cr.HexX, cr.HexY, "BUTIN1.mp3", 5 );
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_SELECTS_ITEM );
				return false;
			}
		}
		return true;
    }

    string@ Description( Critter& cr )
	{	
		Item@ vendMach = GetItem( vendMach_id );
		string info = "Vending Machine № ";
		info += "|0xFFFF00 " + vendMach.Id + "\n";
		
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		if( productItm.length() > 0 && vendMach.PRODUCT != 0 )
		{
			uint len = productItm.length();
			string amount = 0;
			for( uint i = 0; i < len; i++ )
			{			
				Item@ product = productItm[i];
				if( product.GetProtoId() == uint( vendMach.PRODUCT ) )
				{
					if( product.IsStackable() )
					{
						amount = "|0xFFFF00 " + productItm[i].GetCount();
					}
					else
					{
						uint count = 1;
						Item@ countItems = null;
						for( uint j = i + 1; j < len; j ++ )
						{
							@countItems = productItm[j];
							if( countItems.GetProtoId() == uint( vendMach.PRODUCT ) )
							{
								count ++;
							}
						}
						amount = "|0xFFFF00 " + count;
					}
					break;
				}
			}
			info += "|0x3CF800 Selected merchandise: \n[ ";
			info += "|0xFFFF00 " + GetMsgStr( 1, TEXTMSG_ITEM, vendMach.PRODUCT * 100 );
			info += "|0x3CF800  ]\nAvailable: ";
			info += "|0xFFFF00 " + amount;
			info += "|0x3CF800  pc.";
		}
	info += "|0x3CF800  \nChoose desired merchendise and press |0xFFFF00 Confirm|0x3CF800  to complete setup.";
	
		return info;
	}	
		
	string@ ButtonCancel()
	{
        return ButtonDecorator( "Close menu", null );
    }
}

void StartMenuSelectProduct( Critter& cr, Item& vendMach )
{
    Map@ map = cr.GetMap();
    if( map is null )
	{
        return;
    }

    iMenuHandler@ handler = MenuSelectProduct( vendMach, map );
    iDialogBox@ menu = OpenMenu( cr, "Vending machine", handler );
}

#endif // VENDING