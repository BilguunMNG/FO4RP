#ifndef VENDING
#define VENDING

#include "_utils.fos"
#include "vending_h.fos"
#include "speed_h.fos"

void TransferItemToContainer( Item& item, Item& vendMach ) {
    uint16 pid = item.GetProtoId();
    _SubItem( item, 1 );
    vendMach.AddItem( pid, 1, 0 );
}

void PlayVendSound( Map& map, Item & vendMach ) {
	map.PlaySound( VendingSoundNames[ Random( 0, VendingSoundNames.length() -1 ) ], vendMach.HexX, vendMach.HexY, 5 );
}

// Интерактивное меню ку3, точка входа main.fos
class MenuVendingMachine: CenteredMenuHandler {
    uint vendMach_id;
    uint map_id;
	uint level;
	
    MenuVendingMachine(Item& vendMach, Map& map) {
        vendMach_id = vendMach.Id;
        map_id = map.Id;
		level = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap(map_id);
        Item@ vendMach = GetItem(vendMach_id);
	
	bool locked_in_place = !FLAG( vendMach.Flags, ITEM_CAN_PICKUP );
	
        if( map is null || vendMach is null ) {
            return false;
        }

		for( uint i = 0, len = cash_pids.length(); i < len; i++ ) {
			uint16 pid = cash_pids[i];
			int balance_change = int( cash_values[i] );
			Item@ cash = cr.GetItem( pid, -1 );

			if( valid( cash ) && menu.Button( "Вставить "+balance_change+" $" ) ) {
				TransferItemToContainer(cash, vendMach);
				PlayVendSound( map, vendMach );
				vendMach.BALANCE += balance_change;
				cr.Say( SAY_EMOTE_ON_HEAD, "вставляет деньги в аппарат" );
				return true;
			}
		}
		
		if( menu.Button( "Купить" ) ) {
			if( vendMach.BALANCE >= vendMach.PRICE ) {
				Item@[] productItm;
				if( vendMach.GetItems( uint( -1 ), productItm ) == 0 )
				{
					map.PlaySound( "LOSER.ACM", vendMach.HexX, vendMach.HexY, 5 );
					return true;
				}
				
				Item@ bought = vendMach.GetItem( vendMach.PRODUCT, 0 );
				if( valid( bought ) ) {
					if( bought.IsStackable() ) { 
						_SubItem( bought, 1 );
						cr.AddItem( vendMach.PRODUCT, 1 );
					} else {
						MoveItem( bought, 1, cr );
					}
					PlayVendSound( map, vendMach );
					vendMach.BALANCE -= vendMach.PRICE;
					cr.Say( SAY_EMOTE, "забирает товар" );
					return true;
				}
			} else {
				map.PlaySound( "LOSER.ACM", vendMach.HexX, vendMach.HexY, 5 );
				return true;
			}
			
		}
		
		if( menu.Button( "Возврат денег" ) ) {
			Item@ change = vendMach.GetItem( PID_BOTTLE_CAPS, 0 );
			if( valid( change ) && vendMach.BALANCE > 0) {
				int changeCount = MIN( int( change.GetCount() ), vendMach.BALANCE );
				_SubItem( change, uint( changeCount ) );
				cr.AddItem( PID_BOTTLE_CAPS, changeCount );
				vendMach.BALANCE -= changeCount;
				map.SetText( vendMach.HexX, vendMach.HexY, COLOR_LGRAY, ":звон монет:" );
				cr.Say( SAY_EMOTE, "забирает сдачу" );
				return false;
			} else {
				map.PlaySound( "LOSER.ACM", vendMach.HexX, vendMach.HexY, 5 );
				return true;
			}
		}
		
		if( !FLAG( vendMach.LockerCondition, LOCKER_LOCKED ) ) {
			
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
			if ( productItm.length() > 0 && menu.Button( "Установить товар" ) ) {
				MenuSelectProduct@ select_product = MenuSelectProduct( vendMach, map );
				select_product.level = level + 1;
				return menu.OpenChild( "Уровень " + select_product.level, select_product );
			}
			
			if( menu.Button( "Выставить цену" ) ) {
				cr.RunClientScript( "client_screen_numberpad@ShowScreen", vendMach.Id, 0, 0, "Введите новую цену", null );
				return false;
			}

			if( locked_in_place ) {
				if( menu.Button( "Демонтировать" ) ) {
					LockInPlace( cr, vendMach );
					return true;
				}
			} else {
				if( menu.Button( "Установить" ) ) {
					LockInPlace( cr, vendMach );
					return true;
				}

				if( menu.Button( "Поднять" ) ) {
					PickItem( cr, vendMach );
					ChangeCritterSpeed( cr );
					return false;
				}			
			}
		}

		if( menu.Button( "Открыть сейф" ) ) {
			if( FLAG( vendMach.LockerCondition, LOCKER_LOCKED ) ) {
				cr.Say( SAY_NETMSG, "|0xFFFF00 Аппарат заперт." );
				map.PlaySound( "ILCNTNRB.ACM", vendMach.HexX, vendMach.HexY, 5 );
				return true;
			} else {
				ShowContainer( cr, vendMach, TRANSFER_HEX_CONT_UP );
				map.PlaySound( "IOCNTNRB.ACM", vendMach.HexX, vendMach.HexY, 5 );
				cr.Say( SAY_EMOTE, "открывает вендомат" );
				return false;
			}
        }
		return true;
    }
	
	// UI менюхи
    string@ Description( Critter& cr ) {
	
		Item@ vendMach = GetItem( vendMach_id );
		string status;
		Item@ change = vendMach.GetItem( PID_BOTTLE_CAPS, 0 );
		if( !valid( change ) ) {
			status = "|0xFF0000 Аппарат сдачу не дает!"; 			
		}		
		string balance = vendMach.BALANCE;
		string price = vendMach.PRICE;

		string info = "Вендинговая машина № ";
		info += "|0xFFFF00 " + vendMach.Id + "\n";
		
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		string amount = "\n |0xFFFF00 Товар закончился!";
		if( productItm.length() > 0 && vendMach.PRODUCT != 0 ) {
			string product = GetMsgStr( 0, TEXTMSG_ITEM, vendMach.PRODUCT * 100 );
			info += "|0x3CF800 Товар: ";
			info += "|0xFFFF00 " + product;
			uint len = productItm.length();
			for( uint i = 0; i < len; i++ )
			{			
				Item@ product = productItm[i];
				if( product.GetProtoId() == vendMach.PRODUCT )
				{
					amount = "\nОсталось: ";
					if( product.IsStackable() ) {
						amount += "|0xFFFF00 " + productItm[i].GetCount();
					} else {
						uint count = 1;
						Item@ countItems = null;
						for( uint j = i + 1; j < len; j ++ ) {
							@countItems = productItm[j];
							if( countItems.GetProtoId() == vendMach.PRODUCT ) {
								count ++;
							}
						}
						amount += "|0xFFFF00 " + count;
					}
					amount += "|0x3CF800  шт.";
					break;
				}
			}
			
			info += "|0x3CF800 ." + amount;
			info += "|0x3CF800  Цена: ";
			info += "|0xFFFF00 " + price;
			info += "|0x3CF800  $";
		}
		
		info += "|0x3CF800 \nВставьте деньги в приемник.";
		info += "\n" + status ;
		info += "|0x3CF800 \nБаланс: ";
		info += "|0xFFFF00 " + balance;
		info += "|0x3CF800  $";
        return info;
    }
	
    string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
}

// точка входа из main.fos при юзе рукой
void StartMenuVendingMachine( Critter& cr, Item& vendMach ) // exported
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuVendingMachine( vendMach, map );
    iDialogBox@ menu = OpenMenu( cr, "Вендинговый Аппарат", handler );
}

class MenuSelectProduct: CenteredMenuHandler {
    uint vendMach_id;
    uint map_id;
	uint level;
	int selectorPos;
	uint arrayPos;
	
    MenuSelectProduct( Item& vendMach, Map& map ) {
        vendMach_id = vendMach.Id;
        map_id = map.Id;
		level = 1;
		selectorPos = 0;
		arrayPos = 0;
    }

    bool MenuUpdate( Critter& cr, iDialogBox& menu ) {
        Map@ map = GetMap( map_id );
        Item@ vendMach = GetItem( vendMach_id );
		
        if( map is null || vendMach is null ) {
            return false;
        }
			
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		
		if( productItm.length() > 0 ) {
			if ( menu.Button( "Предыдущий" ) ) {
				selectorPos--;
				if( arrayPos == 0 ) {
					arrayPos = productItm.length() - 1;
					selectorPos = arrayPos;
				} else {
					arrayPos = selectorPos;
				}
				Item@ selectedProduct = productItm[arrayPos];
				vendMach.PRODUCT = selectedProduct.GetProtoId();
				return true;
			}
			
			if ( menu.Button( "Следующий" ) ) {
				selectorPos++;
				if( arrayPos == productItm.length() -1 ) {
					arrayPos = 0;
					selectorPos = arrayPos;
				} else {
					arrayPos = selectorPos;
				}
				Item@ selectedProduct = productItm[arrayPos];
				vendMach.PRODUCT = selectedProduct.GetProtoId();
				return true;
			}
			
			if ( menu.Button( "Подтвердить" ) ) {
				cr.Say( SAY_EMOTE, "устанавливает новый товар" );
				return false;
			}
		}
		return true;
    }

    string@ Description( Critter& cr ) {	
		Item@ vendMach = GetItem( vendMach_id );
		string info = "Вендинговая машина № ";
		info += "|0xFFFF00 " + vendMach.Id + "\n";
		
		Item@[] productItm;
		vendMach.GetItems( uint( -1 ), productItm );
		if( productItm.length() > 0 && vendMach.PRODUCT != 0 ) {
			string product = GetMsgStr( 0, TEXTMSG_ITEM, vendMach.PRODUCT * 100 );
			uint len = productItm.length();
			string amount = 0;
			for( uint i = 0; i < len; i++ )
			{			
				Item@ product = productItm[i];
				if( product.GetProtoId() == vendMach.PRODUCT )
				{
					if( product.IsStackable() ) {
						amount = "|0xFFFF00 " + productItm[i].GetCount();
					} else {
						uint count = 1;
						Item@ countItems = null;
						for( uint j = i + 1; j < len; j ++ ) {
							@countItems = productItm[j];
							if( countItems.GetProtoId() == vendMach.PRODUCT ) {
								count ++;
							}
						}
						amount = "|0xFFFF00 " + count;
					}
					break;
				}
			}
			info += "|0x3CF800 Выбранный товар для продажи: \n[ ";
			info += "|0xFFFF00 " + product;
			info += "|0x3CF800  ]\nВ наличии: ";
			info += "|0xFFFF00 " + amount;
			info += "|0x3CF800  шт.";
		}
		info += "|0x3CF800  \nВыберите нужную позицию и нажмите";
		info += "|0xFFFF00  Подтвердить";
		info += "|0x3CF800  для завершения настройки.";
		
		return info;
	}	
		
	string@ ButtonCancel() {
        return ButtonDecorator( "Скрыть меню", null );
    }
}

void StartMenuSelectProduct( Critter& cr, Item& vendMach )
{
    Map@ map = cr.GetMap();
    if( map is null ) {
        return;
    }

    iMenuHandler@ handler = MenuSelectProduct( vendMach, map );
    iDialogBox@ menu = OpenMenu( cr, "Вендинговый Аппарат", handler );
}

#endif // VENDING