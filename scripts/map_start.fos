#ifndef MAP_START
#define MAP_START

#include "_utils.fos"

import void OpenLinkRemote( Critter& player, string& url) from "link";
import void RequestStartGameRemote( Critter& player) from "link";

const uint16[] MaleSkins   = { CRTYPE_DEFAULT_M, CRTYPE_LHD_TRIBAL, CRTYPE_BLD_TRIBAL, CRTYPE_LHD_OLD_TRIBAL, CRTYPE_BLACK_TRIBAL, CRTYPE_OLIMP_TRIBAL, CRTYPE_BLACK_OLIMP_TRIBAL, CRTYPE_BLACK_OLIMP_LH_TRIBAL, CRTYPE_FAT_TRIBAL, CRTYPE_MYRON_TRIBAL, CRTYPE_SULIK_TRIBAL };
const uint16[] FemaleSkins = { CRTYPE_DEFAULT_F, CRTYPE_PUNKESS_TRIBAL, CRTYPE_BL_TRIBAL_F, CRTYPE_FR_TRIBAL_F, CRTYPE_OLDW_TRIBAL_F, CRTYPE_FY_TRIBAL_F };

void _StartMapInit( Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_crOut" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_crIn" );
}

void _SurvivalKindmanInit( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_DIALOG_ID ] = 331;
    cr.ModeBase[ MODE_NO_WALK ] = 1;
    cr.ModeBase[ MODE_NO_RUN ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_PVP ] = 1;
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_PUSH ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ParamBase[ QST_INVIS ] = 40;
    cr.SetEvent( CRITTER_EVENT_TALK, "_SurvivalKindman_talk" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_Survival_sight" );
}

bool _SurvivalKindman_talk( Critter& kindman, Critter& player, bool attach, uint talkCount )
{
    if( player.ParamBase[ QST_GAMEMODE ] != GAME_START )
	{
        return false;
	}
	Item@[] items;
	player.GetItems( SLOT_ARMOR, items );
	player.GetItems( SLOT_HAND1, items );
	player.GetItems( SLOT_HAND2, items );
	player.GetItems( SLOT_INV, items );
	player.GetItems( SLOT_MISC, items );
	player.GetItems( SLOT_HEAD, items );
	player.GetItems( SLOT_BACK, items );
		
	DeleteItems( items );
	
	player.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
	kind_tele2( player, null, 369 );
	return false;
}

void answer_SurvivalKindman_talk( Critter& player, uint answerI, string& answerS )
{
    if( player.ParamBase[ QST_GAMEMODE ] != GAME_START )
	{
        return;
    }
	if( answerI == 0 )
    {
        player.ParamBase[ QST_GAMEMODE ] = GAME_SURVIVAL;
        uint LocPid = 369;

        kind_tele2( player, null, LocPid );
    }
}

void _Survival_sight( Critter& cr, Critter& showCr )
{
    Map@ map = cr.GetMap();
    Critter@[] critters;
    if( showCr.IsPlayer() && showCr.ParamBase[ QST_GAMEMODE ] == GAME_START && ( map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters ) <= 1 ) )
    {
        uint16[] GMskins =
        {
            0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 20, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 57, 61, 62, 63, 64, 66,
            69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 91, 94, 95, 96, 99, 103, 110, 120
        };
        cr.ChangeCrType( GMskins[ Random( 0, GMskins.length() ) ] );
    }
}

void _InitStartGM( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_PERCEPTION ] = 10;
    cr.StatBase[ ST_DIALOG_ID ] = 331;
    cr.ShowCritterDist1 = 15;
    cr.ModeBase[ MODE_NO_WALK ] = 1;
    cr.ModeBase[ MODE_NO_RUN ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_PVP ] = 1;
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_PUSH ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ParamBase[ QST_INVIS ] = 40;
    cr.SetEvent( CRITTER_EVENT_TALK, "_StartGM_talk" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_StartGM_sight" );
}

void _StartGM_sight( Critter& cr, Critter& showCr )
{
    Map@ map = cr.GetMap();
    Critter@[] critters;
    if( showCr.IsPlayer() && showCr.ParamBase[ QST_GAMEMODE ] == GAME_START && ( map.GetCrittersHex( cr.HexX, cr.HexY, 15, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters ) <= 1 ) )
    {
        uint16[] GMskins =
        {
            0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 20, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 57, 61, 62, 63, 64, 66,
            69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 91, 94, 95, 96, 99, 103, 110, 120
        };
        cr.ChangeCrType( GMskins[ Random( 0, GMskins.length() ) ] );
    }
}

bool _StartGM_talk( Critter& player, Critter& talkCr, bool attach, uint talkCount )
{
	ShowStartVars( talkCr );
	return false;
}

void ShowStartVars( Critter& player )
{
    if( player.ParamBase[ QST_GAMEMODE ] == GAME_START )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 4, "answer_StartGM_talk" );
        player.Say( SAY_DIALOGBOX_TEXT, "Welcome to the game!" );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Information (Website)" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Begin Game" );
		player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "Change Skin" );
		player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "Change Gender" );
	}
	else
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_ERROR );
	}
}

// Called by dll for character with confirmed Discord role
void StartGame( Critter@ player, int, int, int, string@, int[]@ )
{
    if( player is null)
	{
        return;
    }
	
    if( player.Param[ QST_GAMEMODE ] != GAME_START )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_NOT_NEW );
        return;
    }
	
    Map@ map = player.GetMap();
    if( map is null || map.GetProtoId() != MAP_UTILITY_START)
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_WRONG_MAP );
        return;
    }

    Log( "Starting game for " + player.Id );

    // Legacy behaivor
    uint count = player.CountItem(  PID_SKIN_CHANGER );
    if( count > 0 )
	{
        player.DeleteItem( PID_SKIN_CHANGER, count );
	}
	
    bool tele = false;
    tele = player.TransitToHex( 305 + Random( -3, 3 ), 240 + Random( -3, 3 ), 0 );
    if( !tele )
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_TRY_AGAIN );
    }
	else
	{
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_SURVIVAL );
	}
}

void answer_StartGM_talk( Critter& player, uint answerI, string& answerS )
{
    if( answerI == 0 )
	{
		OpenLinkRemote(player, "http://frp.su");
		
	}
	else if( answerI == 1 )
	{
        // ask client to open browser and confirm Discord role
		RequestStartGameRemote(player);
    }
	else if( answerI == 2 )
	{
		uint16[] Skins;
		player.Stat[ ST_GENDER ] == GENDER_MALE ? Skins = MaleSkins : Skins = FemaleSkins;
		player.StatBase[ ST_BASE_CRTYPE ];
		uint16 index = Skins.find( player.StatBase[ ST_BASE_CRTYPE ] );
		if( index < Skins.length() - 1 )
		{
			player.StatBase[ ST_BASE_CRTYPE ] = Skins[ index + 1 ];
		}
		else
		{
			player.StatBase[ ST_BASE_CRTYPE ] = Skins[ 0 ];
		}
		player.ChangeCrType( player.StatBase[ ST_BASE_CRTYPE ] );
		ShowStartVars( player );
	}
	else if( answerI == 3 )
	{
		if( player.Stat[ ST_GENDER ] == GENDER_MALE )
		{
			player.StatBase[ ST_GENDER ] = GENDER_FEMALE;
			player.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DEFAULT_F;
		}
		else
		{
			player.StatBase[ ST_GENDER ] = GENDER_MALE;
			player.StatBase[ ST_BASE_CRTYPE ] = CRTYPE_DEFAULT_M;
		}
		player.ChangeCrType( player.StatBase[ ST_BASE_CRTYPE ] );
		ShowStartVars( player );
	}
}

void kind_tele2( Critter& master, Critter@ slave, int val )
{
    if( not valid( master ) )
	{
        return;
	}
	
    Location @ loc = GetLocationByPid( val, 0 );
    if( not valid( loc ) )
    {
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_AREA_INVALID );
        return;
    }

	Map @ map = loc.GetMapByIndex(0);
    if( not valid( map ) )
    {
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_MAP_INVALID );
        return;
    }
	
    master.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 200, master.HexX, master.HexY );

    master.SetEvent( CRITTER_EVENT_USE_ITEM, null );
    master.SetEvent( CRITTER_EVENT_DROP_ITEM, null );
    master.SetEvent( CRITTER_EVENT_ATTACK, null );
    master.SetEvent( CRITTER_EVENT_DEAD, null );	
		
	if( loc.GetProtoId() == 369 )
	{
		master.TransitToMap( map.Id, Random( 174, 184 ), 255, 0 );
		master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_GREETING );
		return;
	}	
}

void _crIn( Map& map, Critter& cr )
{
    if( cr.IsPlayer() && !isGM( cr ) )
    {
        cr.SetEvent( CRITTER_EVENT_USE_ITEM, "_Start_Player_use" );
        cr.SetEvent( CRITTER_EVENT_DROP_ITEM, "_Start_Player_drop" );
        cr.SetEvent( CRITTER_EVENT_ATTACK, "_Start_Player_attack" );
        cr.SetEvent( CRITTER_EVENT_DEAD, "_Start_Player_dead" );
    }
}

void _crOut( Map& map, Critter& cr )
{
	cr.SetEvent( CRITTER_EVENT_USE_ITEM, null );
	cr.SetEvent( CRITTER_EVENT_DROP_ITEM, null );
	cr.SetEvent( CRITTER_EVENT_ATTACK, null );
	cr.SetEvent( CRITTER_EVENT_DEAD, null );
}

void _Start_Player_dead( Critter& cr, Critter@ killer )
{
    Map@ start = GetMapByPid( MAP_UTILITY_START, 0 );
    _crOut( start, cr );
    Item@[] items;
    cr.GetItems( SLOT_ARMOR, items );
    cr.GetItems( SLOT_INV, items );
    cr.GetItems( SLOT_HAND1, items );
    cr.GetItems( SLOT_HAND2, items );
    DeleteItems( items );
}

void _Start_Player_drop( Critter& cr, Item& item )
{
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_ANNIHILATION );
    if( valid( item ) )
	{
        DeleteItem( item );
	}
}

bool _Start_Player_attack( Critter& cr, Critter& target )
{
	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_INAPPROPRIATE );
    return true;
}

bool _Start_Player_use( Critter& cr, Item& item, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_START_INAPPROPRIATE );
    return true;
}

#endif // MAP_START