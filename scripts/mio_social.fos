// Author: Mio
// Социальные приправы.

#include "_utils.fos"

// Основные.
import string Colorizing( int number, string[] list, int[] listX ) from "mio_deviants_toolkit";
import string Dictkeys( int number, string[] list, int[] listX ) from "mio_deviants_toolkit";
import int MenuChoice( int storage, uint answerI, string cell, bool rec ) from "mio_deviants_toolkit";
import string[] StatusMaker( Critter& initiator, Critter@ target, string[] list, int[] listX, uint8[] listV ) from "mio_deviants_toolkit";

// Упаковка.
import int BitUnpacker( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitZeroing( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitPacker( int cell, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitChange( int number, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";

// Сторонние.
import void ChangeCritterSpeed( Critter& cr ) from "speed";
import void PlayMusic( Map& map, string& musicName, uint pos, uint repeat ) from "media";

import uint8 ChoiceMask( int[] list ) from "mio_deviants_toolkit";
import bool MovePosition( Critter& player ) from "mio_deviants_toolkit";



// ####################################################################################################
// #                                       Obvious AID Manager                                        #
// ####################################################################################################

// ДЛЯ ВСЕХ.
#define TARGETID								( ST_VAR0 )					// Параметр криттера содержащий ID, с которым происходит взаимодействие.
#define TARGETPID								( ST_VAR1 )					// Параметр криттера содержащий PID, с которым происходит взаимодействие.
#define MENU_STORAGE							( ST_VAR2 )					// Параметр криттера содержащий выбор меню.
#define MENU_PAGE								( ST_VAR3 )					// Параметр криттера содержащий дополнительные данные меню-журналов.

// Пачки.
#define NUM_MENU_PAGE							( 1 )						// Страница. Начальный индекс.
#define BIT_MENU_PAGE							( 4 )						// 
#define NUM_MENU_SIGN							( 32 )						// Знак. Начальный индекс.
#define BIT_MENU_SIGN							( 1 )						// 

#define STARTING_POINT							( 1 )						// Начало отсчёта.
#define INDEX									# ( X ) ( X - STARTING_POINT )

// Types.
#define TYPE_NONE								( 0 )
#define TYPE_ITEM								( 1 )
#define TYPE_MAP								( 2 )
#define TYPE_CRITTER							( 3 )
#define TYPE_CRITTER_PARAM						( 4 )
#define TYPE_CRITTER_NEEDS						( 5 )
#define TYPE_CRITTER_COMBAT						( 6 )
#define TYPE_CRITTER_DIFFERENT					( 7 )
#define TYPE_LOC_NAVIGATION						( 8 )



// ####################################################################################################
// #                                        Condition Control                                         #
// ####################################################################################################

// Condition Control.

#define NUM_HIDEFACE							( 1 )						// Закрыто лицо.
#define BIT_HIDEFACE							( 1 )						// 
#define NUM_HIDELEX								( 2 )						// Закрыто лексему.
#define BIT_HIDELEX								( 1 )						// 
#define NUM_SHOWSPAM							( 3 )						// Отображение точек при печати.
#define BIT_SHOWSPAM							( 1 )						// 
#define NUM_VOICEVOLUME							( 4 )						// Громкость речи.
#define BIT_VOICEVOLUME							( 2 )						// 
#define NUM_ITEMNAMES							( 6 )						// Отображение подсветки итемов.
#define BIT_ITEMNAMES							( 1 )						// 
#define NUM_HINTS								( 7 )						// Отображение подсказки о предмете.
#define BIT_HINTS								( 1 )						// 
#define NUM_RADIOFUSE							( 28 )						// Блокировщик хоткей-типов сообщений.
#define BIT_RADIOFUSE							( 1 )						// 
#define NUM_SLEEPMODE							( 29 )						// Режим ожидания.
#define BIT_SLEEPMODE							( 2 )						// 
#define NUM_DELIRIUM							( 31 )						// Галлюны.
#define BIT_DELIRIUM							( 1 )						// 

bool F_Hideface( Critter& player )             { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_HIDEFACE ), BIT_HIDEFACE ) == 1; }
void F_Hideface( Critter& player, int num )    { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_HIDEFACE ), BIT_HIDEFACE ); }
bool F_Hidelex( Critter& player )              { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_HIDELEX ), BIT_HIDELEX ) == 1; }
void F_Hidelex( Critter& player, int num )     { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_HIDELEX ), BIT_HIDELEX ); }
bool F_Showspam( Critter& player )             { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_SHOWSPAM ), BIT_SHOWSPAM ) == 1; }
void F_Showspam( Critter& player, int num )    { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_SHOWSPAM ), BIT_SHOWSPAM ); }
uint8 F_VoiceVolume( Critter& player )         { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_VOICEVOLUME ), BIT_VOICEVOLUME ); }
void F_VoiceVolume( Critter& player, int num ) { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_VOICEVOLUME ), BIT_VOICEVOLUME ); }
bool F_ItemNames( Critter& player )            { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_ITEMNAMES ), BIT_ITEMNAMES ) == 1; }
void F_ItemNames( Critter& player, int num )   { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_ITEMNAMES ), BIT_ITEMNAMES ); }
bool F_Hints( Critter& player )                { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_HINTS ), BIT_HINTS ) == 1; }
void F_Hints( Critter& player, int num )       { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_HINTS ), BIT_HINTS ); }
bool F_Radiofuse( Critter& player )            { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_RADIOFUSE ), BIT_RADIOFUSE ) == 1; }
void F_Radiofuse( Critter& player, int num )   { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_RADIOFUSE ), BIT_RADIOFUSE ); }
uint8 F_Sleepmode( Critter& player )           { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_SLEEPMODE ), BIT_SLEEPMODE ); }
void F_Sleepmode( Critter& player, int num )   { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_SLEEPMODE ), BIT_SLEEPMODE ); }
bool F_Delirium( Critter& player )             { return BitUnpacker( player.Param[ MIO_FLAGS ], INDEX( NUM_DELIRIUM ), BIT_DELIRIUM ) == 1; }
void F_Delirium( Critter& player, int num )    { player.ParamBase[ MIO_FLAGS ] = BitPacker( num, player.Param[ MIO_FLAGS ], INDEX( NUM_DELIRIUM ), BIT_DELIRIUM ); }


// ####################################################################################################
// #                                           Compression                                            #
// ####################################################################################################

void MenuMaker( Critter& initiator, string[] list, string@ headline, string@ pointer ) // Генератор менюшек.
{
	uint8 length = list.length();
	initiator.ShowScreen( SCREEN_DIALOGBOX, length, pointer );
	initiator.Say( SAY_DIALOGBOX_TEXT, headline );
	for( uint8 i = 0; i < length; i++ ) { initiator.Say( SAY_DIALOGBOX_BUTTON( i ), Centering( list[ i ] ) ); }
	initiator.Say( SAY_DIALOGBOX_BUTTON( length ), Centering( "Отмена" ) );
}

//string UINTColor( uint color ) { return "|"+color+" "; }- переместила в module/utils/server/junk.fos
void ShortRec( Critter& player, string cell, uint num ) { player.ParamBase[ MENU_STORAGE ] = MenuChoice( player.Param[ MENU_STORAGE ], num, cell, true ); }
void PageReset( Critter& player ) { player.ParamBase[ MENU_PAGE ] = BitZeroing( player.Param[ MENU_PAGE ], INDEX( NUM_MENU_PAGE ), BIT_MENU_PAGE ); }
void Empty( Critter& player, uint answerI, string& answerS ) { null; }



// ================================================== Обработчики ==================================================

void Dispatcher( Critter& player, uint answerI, string& answerS ) // Координатор меню.
{
	ShortRec( player, "MENU_CHOICE", answerI );

	int storage = 		player.Param[ MENU_STORAGE ];
	uint8 branch = 		MenuChoice( storage, 0, "MENU_BRANCH", false );
	uint8 depth = 		MenuChoice( storage, 0, "MENU_DEPTH", false );
	uint8 count = 		MenuChoice( storage, 0, "MENU_COUNT", false );

	bool BACK = 		( answerI == count-1 );
	if( depth == 0 )	{ BACK = false; }
	if( BACK )			{ depth--; ShortRec( player, "MENU_DEPTH", depth ); }

	uint8 menumark_1 = 	MenuChoice( storage, 0, "MENU_MENUMARK_1", false );
	uint8 menumark_2 = 	MenuChoice( storage, 0, "MENU_MENUMARK_2", false );

	//player.Say( SAY_NETMSG, "dpt: "+depth +" - answerI: "+answerI +"/"+count );

	if( branch == 0 )
	{
		if( depth == 0 )
		{
			if( BACK ) { CP_BASIC( player ); return; }																	// Рекурсия.
			if( answerI == 0 ) { MenuAFK( player, answerI, "" ); }														// АФК				- Меню.
			if( answerI == 1 ) { MenuTALKVOLUME( player, answerI, "" ); }												// Голос			- Меню.
			if( answerI == 2 ) { MenuOVERVIEW( player, answerI, "" ); }													// Обзор			- Меню.
			if( answerI == 3 ) { ChangeRADIOFUSE( player, answerI, "" ); return; }										// Предохранитель	- Логика.
			if( answerI == 4 ) { MenuDEBUG( player, answerI, "Фикс заглючившей скорости:" ); }							// Debug			- Меню.
			if( answerI == 5 ) 																							// Подветка			- Меню.
			{  
				bool isOn = !F_ItemNames( player );//Было включено - стало выключено, и наоборот.
				F_ItemNames( player, isOn ? 1 : 0 ); //Устанавливает НОВОЕ состояние.
				player.Say( SAY_NETMSG, "Отображение итемов " + ( isOn ? "|0x00ff00 в": "|0xff0000 вы" ) + "ключено" + "|0x00ff00 ." );
				CP_BASIC( player );
				return;
			}							
			if( answerI == 6 ) 																							// Подсказки			- Меню.
			{  
				bool isOn = !F_Hints( player );//Было включено - стало выключено, и наоборот.
				F_Hints( player, isOn ? 1 : 0 ); //Устанавливает НОВОЕ состояние.
				player.Say( SAY_NETMSG, "Отображение подсказок " + ( isOn ? "|0x00ff00 в": "|0xff0000 вы" ) + "ключено" + "|0x00ff00 ." );
				CP_BASIC( player );
				return;
			}							
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

		if( menumark_1 == 0 )
		{
			if( depth == 1 ) { ChangeAFK( player, answerI, "" ); return; }												// АФК				- Логика.
		}
		if( menumark_1 == 1 )
		{
			if( depth == 1 ) { ChangeTALKVOLUME( player, answerI, "" ); return; }										// Голос			- Логика.
		}
		if( menumark_1 == 2 )
		{
			if( depth == 1 )
			{
				if( answerI == 0 ) { ChangeMASK( player, answerI, "" ); return; }										// Харя				- Логика.
				if( answerI == 1 ) { ChangeHIDELEX( player, answerI, "" ); return; }									// Лексема			- Логика.
				if( answerI == 2 ) { ChangeSPAM( player, answerI, "" ); return; }										// Спам				- Логика.
			}
		}
		if( menumark_1 == 4 )
		{
			if( depth == 1 ) { ChangeDEBUG( player, answerI, "" ); return; }											// Debug			- Логика.
		}
	}
	if( branch == 1 )
	{
		Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
		if( targetCr is null ) { return; }

		if( depth == 0 )
		{
			if( BACK ) { CP_CRITTER( player, targetCr ); return; }														// Рекурсия.
			if( answerI == 0 ) { PlayerSlap( player, answerI, "" ); return; }											// Ситуации			- Логика.
			ShortRec( player, "MENU_MENUMARK_1", answerI );
			ShortRec( player, "MENU_DEPTH", depth+1 );
			return;
		}

	}
}



// ####################################################################################################
// #                                               MENU                                               #
// ####################################################################################################

void unsafe_CONTROL_PANEL_PLAYER( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	player.ParamBase[ MENU_STORAGE ] = 0;

	if( param2 == 0 )
	{
		CP_BASIC( player );
		return;
	}
	if( param2 == 1 )
	{
		Critter@ targetCr = GetCritter( param0 );
		if( targetCr is null ) { return; }
		CP_CRITTER( player, targetCr );
		return;
	}
}

void unsafe_QuickSoundTuning( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	int8 VVO = F_VoiceVolume( player );
	int8 VV = VVO;
	string[] listV = { "50", "20", "10", "5" };
	if( param0 == 0 )
	{
		player.Say( SAY_NETMSG, "|0x606060 Громкость голоса: " +listV[ VV ]+ " шагов." );
	}
	if( param0 == 1 )
	{
		VV = CLAMP( VV+1, 0, 3 );
		F_VoiceVolume( player, VV );
		if( VV != VVO ) { player.Say( SAY_NETMSG, "|0x606060 Громкость голоса: " +listV[ VV ]+ " шагов." ); }
	}
	else if( param0 == 2 )
	{
		VV = CLAMP( VV-1, 0, 3 );
		F_VoiceVolume( player, VV );
		if( VV != VVO ) { player.Say( SAY_NETMSG, "|0x606060 Громкость голоса: " +listV[ VV ]+ " шагов." ); }
	}
}

// ================================================== Обработчики ==================================================

string UserMenuInfo( Critter& player )
{
	string voicedist = "50";
		 if( F_VoiceVolume( player ) == 1 ) { voicedist = "20"; }
	else if( F_VoiceVolume( player ) == 2 ) { voicedist = "10"; }
	else if( F_VoiceVolume( player ) == 3 ) { voicedist =  "5"; }

	string s1 = ( F_Hideface( player ) ? "|0x900000 Лицо скрываю" : "|0x3CF800 Лицо открыто" );
	string s2 = ( F_Hidelex( player ) ? "|0x900000 Приметы скрываю" : "|0x3CF800 Приметы видны" );
	string s3 = ( F_Showspam( player ) ? "|0x900000 Набор текста скрываю" : "|0x3CF800 Набор текста отображаю" );
	string s4 = ( F_Radiofuse( player ) ? "|0x900000 Рация на предохранителе" : "|0x3CF800 Рация свободна" );

	string result = "|0x606060 Громкость речи: "+voicedist+" шагов"+"\n" +s1+"\n" +s2+"\n" +s3+"\n" +s4+"\n";

	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) { result = UINTColor( COLOR_LRED )+"АФК РЕЖИМ !!!"; }

	return result;
}
string PlayerMenuInfo( Critter& player )
{
	string result = "Панель взаимодействий:";

	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) { result = UINTColor( COLOR_LRED )+"АФК РЕЖИМ !!!"; }

	return result;
}



// ####################################################################################################
// #                                            Main Menu                                             #
// ####################################################################################################

void CP_BASIC( Critter& player )
{
	string[] list = { "АФК", "Голос", "Обзор", "Радио предохр.", "Debug", "Подсветка", "Подсказки" };
	ShortRec( player, "MENU_BRANCH", 0 );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}

void MenuAFK( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "*Очнуться*", "Дремлет", "Работает", "Читает", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}
void MenuTALKVOLUME( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Громогласно", "Громко", "Спокойно", "Вполголоса", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}
void MenuOVERVIEW( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Скрывать лицо", "Скрывать лексему", "Извещение печати", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, UserMenuInfo( player ), "Dispatcher" );
}
void ChangeRADIOFUSE( Critter& player, uint answerI, string& answerS )
{
	if( F_Radiofuse( player ) ) { F_Radiofuse( player, 0 ); } else { F_Radiofuse( player, 1 ); }
	CP_BASIC( player );
}
void MenuDEBUG( Critter& player, uint answerI, string& answerS )
{
	string[] list = { "Пересчет скорости", "<<< Назад" };
	ShortRec( player, "MENU_COUNT", list.length() );
	MenuMaker( player, list, answerS, "Dispatcher" );
}

uint cte_AFK( Critter& player, int num, uint& rate )
{
	if( MovePosition( player ) ) { F_Sleepmode( player, 0 ); }
	uint8 AFK = F_Sleepmode( player );
	if( AFK == 0 ) 
	{ 
		//F_VoiceVolume( player, 0 );
		player.Say( SAY_NETMSG, UINTColor( COLOR_GRAY )+"AFK режим деактивирован." ); 
		return 0; 
	}

	string[] list = { "", "Дремлет", "Работает", "Читает" };
	player.Say( SAY_NORM_ON_HEAD, "|0x606060 (" +list[ AFK ] +")" );
	return REAL_SECOND( 3 );
}
void ChangeAFK( Critter& player, uint answerI, string& answerS )
{
	MovePosition( player );
	F_Sleepmode( player, answerI );
	if( player.GetTimeEvents( CTE_AFK, null, null, null ) > 0 ) { player.EraseTimeEvents( CTE_AFK ); }
	if( answerI > 0 )
	{
		//F_VoiceVolume( player, 3 );
		player.AddTimeEvent( "cte_AFK", REAL_SECOND( 1 ), CTE_AFK, 0 );
		player.Say( SAY_NORM_ON_HEAD, "|0x606060 (AFK)" );
		player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"AFK режим активирован." );
	}
	else
	{
		//F_VoiceVolume( player, 0 );
		player.EraseTimeEvents( CTE_AFK );
		player.Say( SAY_NETMSG, UINTColor( COLOR_LRED )+"AFK режим деактивирован." );
	}
	MenuAFK( player, answerI, "" );
}
void ChangeTALKVOLUME( Critter& player, uint answerI, string& answerS )
{
	F_VoiceVolume( player, answerI );
	MenuTALKVOLUME( player, answerI, "" );
}

void ChangeMaskAction( Critter& player, bool toHide )
{
	if( F_Hideface( player ) || !toHide )
	{
		F_Hideface( player, 0 );
		ArmorEffects( player, 0 );
	}
	else
	{
		F_Hideface( player, 1 );
		ArmorEffects( player, 1 );
	}
}

void ChangeMASK( Critter& player, uint answerI, string& answerS )
{
	ChangeMaskAction( player, !F_Hideface( player ) );
	MenuOVERVIEW( player, answerI, "" );
}
void ChangeHIDELEX( Critter& player, uint answerI, string& answerS )
{
	if( F_Hidelex( player ) ) { F_Hidelex( player, 0 ); } else { F_Hidelex( player, 1 ); }
	MenuOVERVIEW( player, answerI, "" );
}
void ChangeSPAM( Critter& player, uint answerI, string& answerS )
{
	if( F_Showspam( player ) ) { F_Showspam( player, 0 ); } else { F_Showspam( player, 1 ); }
	MenuOVERVIEW( player, answerI, "" );
}
void ChangeDEBUG( Critter& player, uint answerI, string& answerS )
{
	ChangeCritterSpeed( player );
	MenuDEBUG( player, answerI, "|0xFF0000 Пересчитано!" );
}



// ####################################################################################################
// #                                           Critter Menu                                           #
// ####################################################################################################

void CP_CRITTER( Critter& player, Critter& targetCr )
{
	ShortRec( player, "MENU_BRANCH", 1 );
	player.ParamBase[ TARGETID ] = targetCr.Id;
	targetCr.ParamBase[ TARGETID ] = player.Id;

	string[] list = { "Тормошить" };
	MenuMaker( player, list, PlayerMenuInfo( targetCr ), "Dispatcher" );
}

// ================================================== Тормошить ==================================================

void PlayerSlap( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ TARGETID ] );
	if( targetCr is null || @targetCr == @player ) { return; }

	uint dist = GetDistantion( player.HexX, player.HexY, targetCr.HexX, targetCr.HexY );

	if( dist < 6 )
	{
		player.Say( SAY_NETMSG, UINTColor( COLOR_YELLOW )+"Вы пытаетесь растормошить." );
		targetCr.Say( SAY_NETMSG, UINTColor( COLOR_YELLOW )+"Вас пытаются растормошить." );
	}
	else { player.Say( SAY_NETMSG, UINTColor( COLOR_YELLOW )+"Слишком далеко!" ); }
}





// ================================================== Мелочёвка ==================================================

void unsafe_KnockSay( Critter& cr, int sayType, int param1, int param2, string@ message, int[]@ ) 
{ 
	cr.Say( sayType, message ); 
}

void LordOfDestruction( Critter& cr, Item& item, int8 type = 0 )
{
	string[] emote = { "Уничтожает что-то", "Смывает что-то в унитаз" };
	_SubItem( item, 1 );
	cr.Say( SAY_EMOTE_ON_HEAD, emote[ type ] );
	Map@ map = cr.GetMap();	
	map.PlaySound( "toilet.ogg", cr.HexX, cr.HexY, 5 );
}

void ShowTheWay( Critter& cr, Critter@ targetCr )
{
	if( targetCr is null )
	{
		if( cr.Karma[ KARMA_SEPARATED ] == 0 ) { cr.Say( SAY_NETMSG, "Карта местности, на которой какие-то непонятные каракули." ); }
		return;
	}

	if( cr.Karma[ KARMA_SEPARATED ] == 1 )
	{
		cr.Say( SAY_EMOTE_ON_HEAD, "Показывает обходные пути" );
		targetCr.KarmaBase[ KARMA_SEPARATED ] = 1;
	}
}

// ####################################################################################################
// #                                            Hide Face                                             #
// ####################################################################################################

void ArmorEffects( Critter& cr, int8 sign )
{
	bool hidename = B_Showname( cr );
	uint QST = cr.Param[ QST_MEDIUM ];
	bool update = false;

	if( sign == 1 && hidename )
	{
		if( QST != 2 )
		{
			cr.Say( SAY_EMOTE, "Скрывает лицо" );
			cr.ParamBase[ QST_MEDIUM ] = 2;
			update = true;
		}
	}
	else
	{
		if( QST != 0 )
		{
			cr.Say( SAY_EMOTE, "Показывает лицо" );
			cr.ParamBase[ QST_MEDIUM ] = 0;
			update = true;
		}
	}

	Item@ item = cr.GetItem( 0, SLOT_ARMOR );
	if( valid( item ) )
	{
		uint PID = item.GetProtoId();
		if( PID == PID_POWERED_ARMOR ) {
			cr.ChangeCrType( ArmorSkin( cr, CRTYPE_PA ) ); 
		}
		if( PID == PID_HARDENED_POWER_ARMOR ) { 
			cr.ChangeCrType( ArmorSkin( cr, CRTYPE_PA_HARDY ) ); 
		}
	}

	if( update )
	{
		Critter@[] crs;
		GetAllPlayers( crs );
		for( uint i = 0, l = crs.length(); i < l; i++ ) { crs[ i ].RunClientScript( "client_main@NamesUpdater", 0, 0, 0, null, null ); }
	}
}

bool B_Showname( Critter& cr )
{
	uint16[] FaceMasks = { PID_RED_BANDANA, PID_raspir2, PID_BALACLAV, PID_RESPIRATOR };
	Item@ offhand = getItem( cr, 0, SLOT_HEAD );
	bool wearMask = valid( offhand ) ? ( FaceMasks.find( offhand.GetProtoId() ) != -1 ) : false;

	Item@ item = getItem( cr, 0, SLOT_ARMOR );
	if( item is null ) { return wearMask && FLAG( cr.Param[ MIO_FLAGS ], ITEM_HIDDEN ); }

	uint16[][] OpenArmorList =
	{
		{
			PID_PURPLE_ROBE, PID_BLACK_ROBE, PID_SANDROBE, PID_BROWN_ROBE, PID_DARK_GREEN_ROBE, PID_RED_RITUAL_ROBE, PID_BLACK_RITUAL_ROBE, PID_DARK_BLACK_ROBE, 
			PID_DARK_RED_ROBE, PID_RED_ROBE, PID_DARK_BROWN_ROBE, PID_DARK_BLUE_ROBE, PID_ATOM_CHILD_ROBE
		},{
			PID_EKZO, PID_OXIDENED_POWER_ARMOR, PID_aras2k1, PID_arekzo, PID_EKZO_2, PID_POWERED_ARMOR_NEVADA, PID_aras2k2, PID_arbattl1,
			PID_ardfnder, PID_HYENA_PA, PID_HYENA_PA_MK2, PID_ADVANCED_POWER_ARMOR, PID_ADVANCED_POWER_ARMOR_MK2
		},{
			PID_POWERED_ARMOR, PID_HARDENED_POWER_ARMOR
		}
		// ,{
			// //броня которая не скрывает твое лицо, даже если шлем одет. косметический скин
		// }
	};
	uint8 OpenArmor = 0;
	uint16 PID = item.GetProtoId();

	for( uint8 i = 0, l = OpenArmorList.length(); i < l; i++ )
	{
		for( uint8 ii = 0, ll = OpenArmorList[ i ].length(); ii < ll; ii++ )
		{
			if( PID == OpenArmorList[ i ][ ii ] ) { OpenArmor = i+1; break; }
		}
	}

	bool hidename = wearMask && FLAG( cr.Param[ MIO_FLAGS ], ITEM_HIDDEN );
	if( ( OpenArmor == 1 || OpenArmor == 3 ) && FLAG( cr.Param[ MIO_FLAGS ], ITEM_HIDDEN ) ) { hidename = true; }
	else if( OpenArmor == 2 ) { hidename = true; }

	return hidename;
}

uint ArmorSkin( Critter& cr, uint skin )
{
	if( !B_Showname( cr ) )
	{
		if( skin == CRTYPE_PA ) {
			if( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_SULIK_TRIBAL ) {
				skin = CRTYPE_SULIK_PA;
			} else {
				skin = CRTYPE_PA_HEADLESS; 
			}
		} else if( skin == CRTYPE_PA_HARDY ) { 
			skin = CRTYPE_PA_HARDY_HEADLESS; 
		}
	}
	return skin;
}

// ####################################################################################################
// #                                             Recorder                                             #
// ####################################################################################################

void RecorderAdjustment( Critter& cr, Item& targetItem )
{
	if( targetItem.Val3 == 0 ) { return; }
	cr.ParamBase[ TARGETID ] = targetItem.Id;

	string Power = "|0x606060 Питание: |0x3CF800 " +int( targetItem.Val2 * 0.1 )+ " %";
	string PowerVolume = "|0x606060 Громкость: |0x3CF800 " +targetItem.Val5+ " шагов";
	string result = Power+ "\n" +PowerVolume;
	string Play = targetItem.Val1 == 1 ? "Вкл" : "Выкл";
	string PickUp = FLAG( targetItem.Flags, ITEM_CAN_PICKUP ) ? "Переносной" : "Настольный";
	string[] list = { Play, "Громкость", "Перемотка", PickUp };
	MenuMaker( cr, list, result, "RecorderModification" );
}
void RecorderModification( Critter& cr, uint answerI, string& answerS )
{
	Item@ ItemRecorder = GetItem( cr.Param[ TARGETID ] );
	if( !valid( ItemRecorder ) ) { return; }

	if( answerI == 0 )
	{
		RecorderUse( cr, ItemRecorder );
		RecorderAdjustment( cr, ItemRecorder );
		return;
	}
	if( answerI == 1 )
	{
		string[] list = { "5", "10", "15", "20", "25", "30" };
		MenuMaker( cr, list, "Выставить уровень громкости:", "RecorderVolume" );
		return;
	}
	if( answerI == 2 )
	{
		ItemRecorder.Val3 = 1;
		ItemRecorder.Val4 = 0;
		cr.Say( SAY_EMOTE_ON_HEAD, "Перематывает плёнку" );
		RecorderAdjustment( cr, ItemRecorder );
		return;
	}
	if( answerI == 3 )
	{
		FLAG( ItemRecorder.Flags, ITEM_CAN_PICKUP ) ? UNSETFLAG( ItemRecorder.Flags, ITEM_CAN_PICKUP ) : SETFLAG( ItemRecorder.Flags, ITEM_CAN_PICKUP );
		RecorderAdjustment( cr, ItemRecorder );
		return;
	}
}
void RecorderVolume( Critter& cr, uint answerI, string& answerS )
{
	Item@ ItemRecorder = GetItem( cr.Param[ TARGETID ] );
	if( !valid( ItemRecorder ) ) { return; }

	answerI++;
	answerI *= 5;
	ItemRecorder.Val5 = answerI;
	cr.Say( SAY_EMOTE_ON_HEAD, "Настраивает громкость" );
	RecorderAdjustment( cr, ItemRecorder );
}



void RecorderOn( Item& item )
{
	uint[] recorders = { item.Id };
	item.Val1 = 1;
	item.Val0 = CreateTimeEvent( __FullSecond + REAL_SECOND( 5 ), "e_RecorderPlay", recorders, true );
	item.LightIntensity = 2;
	item.Update();
}
void RecorderOff( Item& item )
{
	if( item.Val0 != 0 ) { EraseTimeEvent( item.Val0 ); }
	item.Val0 = 0;
	item.Val1 = 0;
	item.LightIntensity = 0;
	item.Update();
}

void RecorderUse( Critter& cr, Item& item )
{
	if( item.Val3 == 0 ) { return; }

	if( item.Val1 == 1 )
	{
		RecorderOff( item );
		cr.Say( SAY_EMOTE_ON_HEAD, "Выключает магнитофон" );
	}
	else
	{
		if( item.Val2 > 0 )
		{
			RecorderOn( item );
			cr.Say( SAY_EMOTE_ON_HEAD, "Включает магнитофон");
		}
		else
		{
			RecorderOff( item );
			cr.Say( SAY_EMOTE_ON_HEAD, "Возится с магнитофоном" );
			cr.Say( SAY_NETMSG, "Сели батареи.");
		}
	}
}

uint e_RecorderPlay( uint[] @ values )
{
	Item@ item = GetItem( values[ 0 ] );
	if( !valid( item ) || item.Val1 == 0 ) { return 0; }

	if( item.Val2 > 0 )
	{
		int[] parts = { 0, 20, 36, 16, 21, 12, 24, 22, 19 };
		uint16 hx = 0, hy = 0;
		Map@ map = item.GetMapPosition( hx, hy );
		if( !valid( map ) ) { return 0; }
		PlayMusic( map, "None.ogg", 0, 0 );
		string song = "rec"+item.Val3;
		song += ""+item.Val4+".ogg";
		map.PlaySound( song, hx, hy, item.Val5 );
		item.Val2--;
		if( item.Val4 > parts[ item.Val3 ] )
		{
			if( item.Val3 + 1 < int( parts.length() ) ) 
			{ 
				item.Val3++; 
				item.Val4 = 0; 
				return REAL_SECOND( 10 ); 
			} 
			else 
			{ 
				RecorderOff( item ); 
				return 0; 
			}
		}
		item.Val4++;
		return REAL_SECOND( 10 );
	}
	else { RecorderOff( item ); }
	return 0;
}


