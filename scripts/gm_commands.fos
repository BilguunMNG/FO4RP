void unsafe_GM_SetFollow( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_SetFollow( player, param0, param1, param2, param3, param4 );
}

void GM_SetFollow( Critter& player, int crId, int leaderId, int param2, string@ param3, int[] @ param4 )
{
	if( crId == 0 ) return;
	
	Critter@ mob = GetCritter( crId );
	if( !valid( mob ) ) return;
	
	GM_follow( leaderId, mob );
	mob.SetEvent( CRITTER_EVENT_ATTACKED, "mob@_Attacked" );
}

void unsafe_mobs_calm_down( Critter& player, int id, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( id != 0 )
	{
		Critter@ target = GetCritter( id );
		if( isGM( player ) || target.StatBase[ST_FOLLOW_CRIT] == int( player.Id ) )
			mob_calm_down( target ); 
		return;
	}		

	Critter@[] mobs;
    uint count = player.GetFollowGroup( FIND_LIFE, mobs );
	for( uint i = 0; i < count; i++ )
		mob_calm_down( mobs[i] );
}

void mob_calm_down( Critter& mob )
{
    mob.DropPlanes();
	mob.ClearEnemyStack();
}

void GM_follow( uint playerId, Critter& mob ) 
{
    mob.DropPlanes();
    mob.ClearEnemyStack();
	if( mob.StatBase[ST_FOLLOW_CRIT] != int( playerId ) )
	{
		mob.StatBase[ST_FOLLOW_CRIT] = playerId;
    	mob.ModeBase[MODE_NO_HOME] = 1;
    	mob.AddTimeEvent( "cte_mob_follow", 0, CTE_BRAHMIN_FOLLOW, 0 );
    	mob.Say( SAY_EMOTE_ON_HEAD, "Следует" );
	} 
	else
	{
		mob.StatBase[ST_FOLLOW_CRIT] = 0;
		mob.ModeBase [MODE_NO_HOME] = 0;
		mob.SetHomePos( mob.HexX, mob.HexY, mob.Dir );
		mob.EraseTimeEvents( CTE_BRAHMIN_FOLLOW );
		mob.Say( SAY_EMOTE_ON_HEAD, "Останавливается" );
	}
}

uint cte_mob_follow (Critter& cr, int identifier, uint& rate) 
{
	if( cr.IsDead() || cr.IsKnockout() || cr.Stat[ST_CURRENT_HP] < 0 )
		return REAL_SECOND(5);	
	
	int masterId = cr.Stat[ST_FOLLOW_CRIT];
	if( masterId > 0 ) 
	{
		Critter@ master = GetCritter( masterId );
		if( master is null )
			return REAL_SECOND(10);
		
		Map@ myMap = cr.GetMap();
		Map@ masterMap = master.GetMap();
		
		if( myMap.Id == masterMap.Id ) 
		{
			cr.ErasePlane( AI_PLANE_WALK, true );
			
			int distance = GetDistantion( cr.HexX, cr.HexY, master.HexX, master.HexY );
			if( distance < 3 )
			{
				cr.MoveRandom();
				return REAL_SECOND(5);
			}
			else
			{
				AddWalkPlane( cr, 0, master.HexX, master.HexY, GetDirection( cr.HexX, cr.HexY, master.HexX, master.HexY ), false, 1 );
			}
			
		} 
		else 
		{
			cr.TransitToMap( masterMap.Id, master.HexX, master.HexY, Random (0,5) );
			cr.ErasePlane (AI_PLANE_WALK, true);
		}
	}
	return REAL_SECOND(2);
}

void unsafe_GM_AddItemOnMap( Critter& player, int pid, int x, int y, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_AddItemOnMap( player, pid, x, y );
}

void GM_AddItemOnMap( Critter& player, int pid, int x, int y )
{
	Map@ map = player.GetMap();
	if( !valid( map ) ) return;
	map.AddItem( x, y, pid, 1 );
}

void unsafe_ctd( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		_ctd( player, param0, param1, param2, param3, param4 );
}

void _ctd( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    ctd( player, param0, param1, param2 );
}

void ctd( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( param0 );
    if( not valid( target ) )
        return;

    Critter@ daddy = ( ( param2 != 0 ) ? target : player );
    Critter@ child = ( ( param2 == 0 ) ? target : player );


    Map@ map = daddy.GetMap();
    if( not valid( map ) )
        return;

	if( child.ParamBase[ QST_GAMEMODE ] == GAME_START && !isGM( daddy ) )
	{
		child.Say( SAY_NETMSG, "Игрок в стартовом режиме, его нельзя телепортировать." );
		return;
	}
	
		
    uint8 temp_dir = Random( 0, 5 );
    for( uint i = 0; i < 6; i++ )
    {
        uint16 hexX = daddy.HexX, hexY = daddy.HexY;
        map.MoveHexByDir( hexX, hexY, ( temp_dir + i ) % 6, 1 + param1 );
        if( not map.IsHexPassed( hexX, hexY ) )
            continue;
		Location@ loc = map.GetLocation();
		if(!valid(loc)) return;
		
		child.SetWorldPos(loc.WorldX, loc.WorldY);
        child.TransitToMap( map.Id, hexX, hexY, 0 );
        break;
    }
}

void unsafe_GM_god( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_god( player, param0, param1, param2, param3, param4 );
}

void GM_god( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
        player.StatBase[ i ] = 10;
    for( uint i = SK_SMALL_GUNS; i <= SK_OUTDOORSMAN; i++ )
        player.SkillBase[ i ] = 300;
	
	FullHeal( player );
}

void unsafe_GM_tele( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		tele( player, param0, param1, param2 );
}

void GM_tele( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    tele( player, param0, param1, param2 );
}

void tele( Critter& player, int param0, int param1, int param2 )
{
    Critter@ target = GetCritter( def( param0, player.Id ) );
    if( not valid( target ) )
        return;
    Location @ loc = GetLocationByPid( def( param1, player.GetMap().Id ), 0 );
    if( not valid( loc ) )
    {
        player.Say( SAY_NETMSG, "Location not found" );
        return;
    }
    Map @ map = loc.GetMapByIndex( param2 );
    if( not valid( map ) )
    {
        player.Say( SAY_NETMSG, "Map index not found" );
        @map = loc.GetMapByIndex( 0 );
        if( not valid( map ) )
            return;
    }
    
    target.SetWorldPos(loc.WorldX, loc.WorldY);
    target.TransitToMap( map.Id, 0 );
}

void unsafe_GM_tel( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_tel( player, param0, param1, param2, param3, param4 );
}

void GM_tel( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
	if(!valid(cr)) return;
	
	Map@ map = cr.GetMap();
	if(!valid(map)) return;
	
	Location@ loc = map.GetLocation();
	if(!valid(loc)) return;
    
	if( !map.IsHexPassed( param1, param2 ) ) 
	{
		player.Say( SAY_NETMSG, "Гекс занят." );
		//cr.Say( SAY_NETMSG, "Что-то пошло не так.." );
		return;
	}
    
	cr.SetWorldPos(loc.WorldX, loc.WorldY);
	cr.TransitToHex( param1, param2, cr.Dir );
}


void unsafe_GM_lock( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_lock( player, param0, param1, param2, param3, param4 );
}

void GM_lock( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Map@  map = player.GetMap();
    Item@ item = map.GetItem( param0 );
    if( valid( item ) )
        lock( player, param0, param1, param2 );
}

void lock( Critter& player, int itemId, int complexity, int lockId )
{
    Map@  map = player.GetMap();
    Item@ item = map.GetItem( itemId );
    if( valid( item ) )
    {
        item.LockerCondition = LOCKER_LOCKED;
        item.LockerComplexity = complexity;
        item.LockerId = lockId;
        item.Update();
        Item@ key = player.AddItem( PID_KEY, 1 );
        if( valid( key ) )
            key.LockerId = lockId;
        key.Update();
    }
}

void unsafe_GM_setcodedoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_setcodedoor( player, param0, param1, param2, param3, param4 );
}

void GM_setcodedoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    setcodedoor( player, param0, param1, param2 );
}

void setcodedoor( Critter& cr, int p0, int p1, int p3 )
{
    Item @ item = GetItem( p0 );
    if( @item == null )
        return;
//	item.SetScript("item@_InitCodeDoor");
    item.Val0 = 4;
    item.Val1 = p1 + 1;
    item.Val4 = p3 != 0 ? p3 : Random( pow( 10, item.Val1 ), pow( 10, ( item.Val1 + 1 ) ) - 1 );
    cr.Say( SAY_NETMSG, "code " + item.Val4 );
    item.LockerComplexity = Random( 50, 200 );
    SETFLAG( item.LockerCondition, LOCKER_ELECTRO );
    item.Update();
}

void unsafe_Flushblack( Critter& player, int p0, int p1, int p3, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		Flushblack( player, p0, p1, p3, param3, param4 );
}
void Flushblack( Critter& player, int p0, int p1, int p3, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( p0 );
    FlushScreen( cr, COLOR_BLACK, COLOR_BLACK, p1 );
}

void unsafe_GiveItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GiveItem( player, param0, param1, param2, param3, param4 );
}

void GiveItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    cr.AddItem( param1, 1 );
}

void unsafe_GM_mobinit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) ) GM_mobinit( player, param0, param1, param2, param3, param4 );
}

void GM_mobinit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    cr.StatBase[ ST_TEAM_ID ] = 33;
    GM_MobInit( cr );
}

void unsafe_GM_GetParam( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_GetParam( player, crId, param1, param2, param3, param4 );
}

void GM_GetParam( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
    if( crId == 0 )
        crId = player.Id;
    Critter@ toCr = GetCritter( crId );
    if( valid( toCr ) )
        player.Say( SAY_NETMSG, "Param #" + param1 + " is " + toCr.Param[ param1 ] + " of " + toCr.ParamBase[ param1 ] + "." );
}

void unsafe_GM_SetParam( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_SetParam( player, crId, param1, param2, param3, param4 );
}

void GM_SetParam( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
    if( crId == 0 )
        crId = player.Id;
    Critter@ toCr = GetCritter( crId );
    if( valid( toCr ) )
    {
		int value = toCr.ParamBase[ param1 ];
        toCr.ParamBase[ param1 ] = param2;
        player.Say( SAY_NETMSG, "ParamBase #" + param1 + " was " +  value + " now " + toCr.ParamBase[ param1 ] + "." );
    }
}

void unsafe_GM_openDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_openDoor( player, param0, param1, param2, param3, param4 );
}

void GM_openDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ item = GetItem( uint( param0 ) );
    if( item is null )
        return;

    item.LockerOpen();
}

void unsafe_GM_closeDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_closeDoor( player, param0, param1, param2, param3, param4 );
}

void GM_closeDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ item = GetItem( uint( param0 ) );
    if( item is null )
        return;

    item.LockerClose();
}

void unsafe_GM_noopenDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_noopenDoor( player, param0, param1, param2, param3, param4 );
}

void GM_noopenDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ door = GetItem( uint( param0 ) );
    if( door is null )
        return;
    if( param1 == 0 )
        SETFLAG( door.LockerCondition, LOCKER_NOOPEN );
    else
        UNSETFLAG( door.LockerCondition, LOCKER_NOOPEN );
}

void unsafe_GM_clearDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_clearDoor( player, param0, param1, param2, param3, param4 );
}

void GM_clearDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ door = GetItem( uint( param0 ) );
    if( door is null )
        return;

    door.LockerClose();

    door.LockerCondition = 0;
    door.LockerId = 0;
    door.LockerComplexity = 0;
    door.Val0 = 0;
    door.Val1 = 0;
}

funcdef void GM_deleteCritterdef( Critter& critter );

void DeleteCritter_all( Critter& critter )
{
	DeleteNpc( critter );
}

// void DeleteCritter_default( Critter& critter )
// {
	// if( critter.KindIndex != 0 )
		// DeleteNpc( critter );
// }

void DeleteCritter_deads( Critter& critter )
{
	if( critter.IsDead() )
		DeleteNpc( critter );
}

void unsafe_GM_deleteCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) ) GM_deleteCritter( player, param0, param1, param2, param3, param4 );
}

void GM_deleteCritter( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( param1 == 0 )
	{
		Critter@ critter = GetCritter( param0 );
		if( !valid( critter ) ) return;
		DeleteNpc( critter );
	}
	else 
	{
		GM_deleteCritterdef @delete = @DeleteCritter_all;
		if( @param3 !is null )
		{
			// if( param3 == "all" )
				// @delete = @DeleteCritter_all;
			// else if
			if( param3 == "dead" )
				@delete = @DeleteCritter_deads;
		}
		Critter@[] critters(0);
		Map@ map = player.GetMap();
		for( uint i = 0, iEnd = map.GetCrittersHex ( param1, param2, param0, FIND_ALL | FIND_ONLY_NPC, critters ); i < iEnd; i++ )
			if( @critters[i] !is null)
				delete( critters[i] );
	}
}

void unsafe_GM_delItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_delItem( player, param0, param1, param2, param3, param4 );
}

void GM_delItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( param1 == 0 )
	{
		Item@ item = player.GetMap().GetItem( param0 );
		if( !valid( item ) )
			return;
		DeleteItem( item );
	}
	else 
	{
		Item@[] items(0);
		Map@ map = player.GetMap();
		for( uint16 x = param1 - param0, xMax = param1 + param0; x < xMax; x++ )
			for( uint16 y = param2 - param0, yMax = param2 + param0; y < yMax; y++ )
				map.GetItems( x, y, items );
		DeleteItems( items );
	}
}

void unsafe_GM_brokeItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_brokeItem( player, param0, param1, param2, param3, param4 );
}

//import void GM_brokeItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) from "debug";
void GM_brokeItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 ) //exported
{
    Item @ item = GetItem( param0 );
    if( !valid( item ) )
        return;
    item.Deterioration = param1;
	item.Update();
    
	player.Say( SAY_NETMSG, "Предмет " + item.Id + " сломан на " + param1 + "%." );
}

void unsafe_GM_ClearAoE( Critter& player, Map& map, uint radius, uint16 hexX, uint16 hexY )
{
	if( isGM( player ) )
		GM_ClearAoE( map, radius, hexX, hexY );
}
 
void GM_ClearAoE( Map& map, uint radius, uint16 hexX, uint16 hexY )
{
    Item@[] items;
    map.GetItems( hexX, hexY, radius, 0, items );
    DeleteItems( items );
}

void unsafe_GM_GiveAll( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_GiveAll( player, param0, param1, param2, param3, param4 );
}

void GM_GiveAll( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    Item@[] items;
	
    if( param1 == 0 )
    {
        cr.GetItems( SLOT_INV, items );
        cr.GetItems( SLOT_HAND1, items );
        cr.GetItems( SLOT_HAND2, items );

		Item@[] armors;
		uint count = cr.GetItems( SLOT_ARMOR, armors );
		if( count > 0 ) {
			MoveItem( armors[0], 1, cr );
			items.insertLast( armors[0] );
		}

		MoveItems( items, player );
        player.Say( SAY_NETMSG, "Вещи переданы вам от криттера " + cr.Id );
    }
    else if( param1 == 1 )
    {
        player.GetItems( SLOT_INV, items );
        player.GetItems( SLOT_HAND1, items );
        player.GetItems( SLOT_HAND2, items );

		Item@[] armors;
		uint count = player.GetItems( SLOT_ARMOR, armors );
		if( count > 0 ) {
			MoveItem( armors[0], 1, player );
			items.insertLast( armors[0] );
		}

        MoveItems( items, cr );
        player.Say( SAY_NETMSG, "Вещи переданы криттеру " + cr.Id );
    }
    else if( param1 == 2 )
    {
        cr.GetItems( SLOT_INV, items );
        cr.GetItems( SLOT_HAND1, items );
        cr.GetItems( SLOT_HAND2, items );

		Item@[] armors;
		uint count = cr.GetItems( SLOT_ARMOR, armors );
		if( count > 0 ) {
			MoveItem( armors[0], 1, cr );
			items.insertLast( armors[0] );
		}

        DeleteItems( items );
        player.Say( SAY_NETMSG, "Удалены вещи у криттера " + cr.Id + "." );
    }
}

void unsafe_Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		Clone( player, param0, param1, param2 );
}

void Clone( Critter& player, int param0, int param1, int param2 )
{
    Critter@ cr = GetCritter( param0 );
    if( !valid( cr ) )
        return;
    if( param1 == 1 )
    {
		FullClone( cr, player );
        player.Say( SAY_NETMSG, "Вы присвоили свои параметры персонажу " + cr.Id + "." );
    }
    else if( param1 == 0 )
    {
		FullClone( player, cr );
        player.Say( SAY_NETMSG, "Вам присвоенны параметры персонажа " + cr.Id );
    }
}

void unsafe_GM_Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_Clone( player, param0, param1, param2, param3, param4 );
}

void GM_Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( valid( cr ) )
    {
		FullClone( player, cr );
        player.Say( SAY_NETMSG, "Вам присвоенны параметры персонажа " + cr.Id );
    }
}

void unsafe_GM_TraderInit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_TraderInit( player, param0, param1, param2, param3, param4 );
}

void GM_TraderInit( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( !valid( cr ) )
        return;
    _TraderInit( cr, true );
}

void GM_TraderInit( Critter& player, int param0, int param1, int param2)
{
    Critter@ cr = GetCritter( param0 );
    if( !valid( cr ) )
        return;
    _TraderInit( cr, true );
}

void unsafe_setautodoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		setautodoor( player, param0, param1, param2, param3, param4 );
}

void setautodoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ door = GetItem( param0 );
    if( door is null )
        return;
    uint16 x = 0;
    uint16 y = 0;
    Map@   map = door.GetMapPosition( x, y );
    uint16 x0 = x;
    uint16 y0 = y;
    for( uint8 i = 0; i < 6; i++ )
    {
        map.MoveHexByDir( x, y, i, 1 );
        if( param1 != 2 )
        {
            Item@ pedal = map.AddItem( x, y, PID_AUTODOOR, 1 );
            pedal.Val1 = door.Id;
            pedal.Val2 = param1;
        }
        else
        {
            Item@ pedal = map.GetItem( x, y, PID_AUTODOOR );
            if( valid( pedal ) )
                DeleteItem( pedal );
        }
        x = x0;
        y = y0;
    }
}

void unsafe_GM_GetItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( isGM( player ) )
		GM_GetItem( player, param0, param1, param2, param3, param4 );
}

void GM_GetItem( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item @ item = GetItem( param0 );
    if( !valid( item ) )
        return;
    MoveItem( item, 0, player );
}