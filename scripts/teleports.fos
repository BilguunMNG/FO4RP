#ifndef TELEPORTS_MODULE
#define TELEPORTS_MODULE

//TODO: Refactor with proper constructors;
//TODO: Add player-teleporting when selected button of current map;
//TODO: When all done - export all text into MSG;

#include "_utils.fos"
#include "teleports_h.fos"

import uint CountMapPlayers( Map@ map ) from "manager";

//~run teleports go 0 0 0
void go( Critter& cr, int p0, int p1, int p2 )
{
	ShowTeleports(cr);
}

void ShowTeleports( Critter& cr )
{
	InitTeleports();
	iMenuHandler@ handler = MenuTeleports( "", teleports );
	iDialogBox@ menu = OpenMenu( cr, "Select", handler );
}

class MenuTeleports: CenteredMenuHandler
{
	bool isRoot;
	string fullName;
	Teleport@ teleport;
	
	MenuTeleports( string fullName, Teleport@ teleport ) 
	{
		this.isRoot = true;
		this.fullName = fullName;
		@this.teleport = @teleport;
	}

	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		uint l = teleport.list();
		for( uint n = 0; n < l; n++ )
		{
			//TODO: Format ButtonMsg as: {@lex name@: @lex list@}
			if( menu.Button( teleport.online(n) + " " + teleport.name(n) )  )
			{ 
				Teleport@ target = teleport.get(n);
				if( target.list() == 0 )
				{
					target.warp( cr );
				}
				else
				{
					MenuTeleports@ new_menu = MenuTeleports( this.name(), target );
					new_menu.isRoot = false;
					return menu.OpenChild( this.name(), new_menu );
				}
			}
		}		
		
		if( menu.Button( isRoot ? "Close" : "Back" ) )
		{
			return false;
		}

		return true;
	}

	//TODO: later
	// int getDescriptionFile()
	// {
		// return TEXTMSG_TEXT;
	// }

	//TODO: later
	// int getDescriptionLine()
	// {
		// return STR_TELEPORTS_MENU_MAIN;
	// }
	
	string name() {
		return this.fullName + " " + this.teleport.name();
	}
	
	string@ Description( Critter& cr )
	{
		string info;
		//TODO: Format string as {|0xFFFF00 @lex name@\n|0xFFFFFF \tSelect your destination|0x00FF00 :}
		info = "|0xFFFFFF " + "Select your destination" + "|0x00FF00 " + ":" + "\n" + "|0xFFFF00 " + name();		
		
		return info;
	}
	
	bool ShouldRedraw( Critter& cr )
	{
		return true;
	}
	
}

Teleport@ teleports;

void InitTeleports()
{
	if( valid( teleports ) )
	{
		return;
	}
	
	@teleports = 
		Teleport( "Teleports" )
		//English Segment Locations:
		.add( Teleport( "ENG" )
			.add( Teleport( "Town" )
				.add( "Silverlake",				202,	0, 170, 270 )
				.add( "Silverlake_dn",			202,	1,  95,  75 )
				.add( "Silverlake_up",			202,	2,  80,  70 )
				.add( "Quarry",					200,	0, 170, 270 )
				.add( "Uranium Mine",			201,	0, 170, 270 )
				.add( "Downtown",				203,	0, 170, 270 )
				.add( "Warehouses",				204,	0, 170, 270 )
				.add( "Trailer Park",			205,	0, 170, 270 )
				.add( "Crossroads",				206,	0, 170, 270 )
				.add( "Waterplant",				207,	0, 170, 270 )
				)
			.add( Teleport( "Mines" )
				.add( "Iron Mine",				200,	1, 435, 390 )
				.add( "Copper Mine",			200,	2, 190, 210 )
				.add( "Uranium Fever",			201,	2, 225, 240 )
				.add( "Coal Mine In",			212,	1, 170, 175 )
				)
			.add( Teleport( "Suburbs" )
				.add( "Paradise Avenue",		208,	0, 170, 270 )
				.add( "Spider Hive",			209,	0, 170, 270 )
				.add( "Highway",				210,	0, 170, 270 )
				.add( "Hills",					211,	0, 170, 270 )
				.add( "Coal Mine",				212,	0, 170, 270 )
				.add( "Radio Tower",			213,	0, 170, 270 )
				.add( "South Interstate",		214,	0, 170, 270 )
				.add( "Road to Elbrus",			215,	0, 170, 270 )
				.add( "Elbrus",					216,	0, 170, 270 )
				.add( "Desert",					218,	0, 170, 270 )
				.add( "Ruined Mall",			219,	0, 170, 270 )
				.add( "Junkyard",				220,	0, 170, 270 )
				.add( "Hacienda",				221,	0, 170, 270 )
				.add( "Road to GasCO",			222,	0, 170, 270 )
				.add( "GasCO",					223,	0, 170, 270 )
				.add( "Hill road",				224,	0, 170, 270 )
				)
			.add( Teleport( "Events" )
				.add( "Launch site",			225,	0, 170, 270 )
				.add( "Shuttle",				226,	0, 170, 270 )
				)
			)
		//Russian Segment Locations:	
		.add( Teleport( "RUS" )
			.add( Teleport( "Шахты" )
				.add( "Центр",					418,	1, 138, 168 )
				.add( "Штольня СВ", 			418,	2, 379, 390 )
				.add( "Штольня СЗ", 			418,	3, 225, 256 )
				.add( "Штольня ЮЗ", 			418,	4, 305, 412 )
				)
			.add( Teleport( "Округ" )
				.add( "Элк Фоллс",				400,	0, 382, 317 )
				.add( "Сток",       			403,	0, 168, 142 )
				.add( "Западный склон",    		404,	0, 138, 168 )
				.add( "Болотное предгорье",		406,	0, 138, 168 )
				.add( "Гадкая топь",			407,	0, 138, 168 )
				.add( "Кэмпинг",    			413,	0, 138, 168 )
				.add( "Лесная дорога",			414,	0, 138, 168 )
				.add( "Лесное озеро",			415,	0, 138, 168 )
				.add( "Новая свалка",			416,	0, 138, 168 )
				.add( "Река восток",			417,	0, 138, 168 )
				.add( "Шахта",      			418,	0, 138, 168 )
				)
			.add( Teleport( "Руины" )
				.add( "Перекресток",			401,	0, 138, 168 )
				.add( "Старая заправка",		402,	0, 138, 168 )
				.add( "Бродвей",    			405,	0, 138, 168 )
				.add( "Магазины",   			408,	0, 138, 168 )
				.add( "Магазины подземка",		408,	1, 138, 168 )
				.add( "Подстанция", 			409,	0, 138, 168 )
				.add( "Подстанция низ",     	409,	1, 138, 168 )
				.add( "Старый проезд",			412,	0, 138, 168 )
				.add( "Окраина",    			410,	0, 138, 168 )
				.add( "Старая свалка",			411,	0, 138, 168 )
				)
			.add( Teleport( "Ивенты" )
				.add( "Лагерь Ревнителей", 		419,	0, 170, 270 )
				)
			)
		//General Tech Locations:
		.add( "Activation",						92,		0, 337, 184 )
		.add( "Sleep",							93,		0, 296, 178 )
		.add( "Haven",							95,		0, 129, 77  )
		.add( "Hell",							300,	0, 229, 177 )
		.add( "Arena1",							96,		0, 440, 510 )
		.add( "Arena2",							96,		1, 180, 270 )
	;
}

class Pos
{
	uint mapId;
	uint x;
	uint y;
	
	Pos( Map@ map, uint x, uint y )
	{
		this.mapId = valid( map ) ? map.Id : 0;
		this.x = x;
		this.y = y;
	}

	Pos( uint mapId, uint x, uint y )
	{
		this.mapId = mapId;
		this.x = x;
		this.y = y;
	}
	
	bool TransitToMap( Critter& cr )
	{
		if( mapId == 0 ) return false;
		
		Map@ map = GetMap( mapId );
		if( !valid( map ) ) return false;
		
		int attempt = 0;
		uint16 hexX = x, hexY = y;
		while( attempt < 10 )
		{
			if( !map.IsHexPassed( hexX, hexY ) )
				map.MoveHexByDir( hexX, hexY, Random( 0, 5 ), 1 );
			attempt++;
		}

		if( !map.IsHexPassed( hexX, hexY ) )
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 Hexes are busy." );
			return false;
		}
		
		cr.TransitToMap( mapId, hexX, hexY, cr.Dir );
		
		Location@ loc = map.GetLocation();
		if( valid(loc) )
			cr.SetWorldPos( loc.WorldX, loc.WorldY );
		else
			cr.Say( SAY_NETMSG, "|0xFFFF00 You have no idea where you are." );
		
		return true;
	}
	
	uint online() 
	{
		if( mapId == 0 )
		{
			return 0;
		}
		
		Map@ map = GetMap( mapId );
		if( !valid( map ) )
		{
			return 0;
		}

		return CountMapPlayers( map );
	}
}

class Teleport
{
	Teleport[] _list;
	uint list() 
	{ 
		return _list.length(); 
	}
	
	Teleport@ get( uint n ) 
	{ 
		if( n < 0 || n >= list() ) 
		{
			Log( "[" + name() + "] " + "Attempt of getting teleport #" + n + "/" + list() + "." );
			return null; 
		}
		
		return _list[n];
	}
	
	string _name;
	string name() { return _name; }
	string name( uint n ) 
	{ 
		Teleport@ target = get(n);
		return valid( target ) ? target.name() : "N-A";
	}

	Teleport( string name )
	{
		init( name );
	}
	
	Teleport( string name, uint locPID, uint mapN, uint x, uint y )
	{
		init( name );
		
		Map@ map = GetLocationMap( locPID, mapN );
		@this._pos = Pos( map, x, y );
		
		if( !valid( map ) )
		{
			this._name += " #" + locPID + "-" + mapN;
		}
	}
	
	void init( string name )
	{
		this._name = name;
		this._list.resize(0);
		@this._pos = null;
	}
	
	Teleport@ add( string name )
	{
		return add( Teleport( name ) );
	}
	
	Teleport@ add( string name, uint locPID, uint mapN, uint x, uint y )
	{
		return add( Teleport( name, locPID, mapN, x, y ) );
	}
	
	Teleport@ add( Teleport teleport )
	{
		_list.insertLast( teleport );
		return this;
	}

	Pos@ _pos;
	Teleport@ pos( Pos@ pos )
	{
		@this._pos = @pos;
		return this;
	}

	Teleport@ pos( Map@ map, uint x, uint y )
	{
		return pos( Pos( map, x, y ) );
	}

	Teleport@ pos( uint mapId, uint x, uint y )
	{
		return pos( Pos( mapId, x, y ) );
	}

	uint posOnline() 
	{
		return valid(_pos) ? _pos.online() : 0;
	}

	uint online() 
	{ 
		uint result = posOnline();
		for( uint n = 0, l = list(); n < l; n++ )
		{
			result += online(n);
		}
		
		return result;
	}
	
	uint online( uint n ) 
	{ 
		Teleport@ target = get(n);
		return valid( target ) ? target.online() : 0;
	}

	bool warp( Critter& cr )
	{
		return _pos.TransitToMap( cr );
	}
}

Map@ GetLocationMap( uint location_pid )
{
	return GetLocationMap( location_pid, 0 );
}

Map@ GetLocationMap( uint location_pid, uint map_index )
{
	Location@ loc = GetLocationByPid( location_pid, 0 );
	if( !valid( loc ) ) 
	{
		Log( "There is no Location pid #" + location_pid + "." );
		return null;
	}
	
	Map@ map = loc.GetMapByIndex( map_index );
	if( !valid( map ) )
	{
		Log( "There is no map # " + map_index + " at location pid #" + location_pid + "." );
	}

	return map;
}

#endif