#include "_utils.fos"

import uint CountMapPlayers( Map@ map ) from "manager";

#define MaxSize		19
#define ListSize	( MaxSize - 2 )

#define Page		ParamBase[ST_VAR1]

//~run teleports go 0 0 0
void go( Critter& cr, int p0, int p1, int p2 )
{
	ShowTeleports(cr);
}

//import void ShowTeleports( Critter& cr ) from "teleports";
void ShowTeleports( Critter& cr ) //exported
{
	InitTeleports();
	cr.Page = 0;
	teleports.show( cr );
}

TeleportList@ teleports;
void InitTeleports()
{
	if( valid( teleports ) ) return;

	@teleports = CreateTeleports( "Телепорты" )
	//  .add( "NAME",	   LOCATIONPID,	MAP_N,   X,   Y )
		//Базовые:
		.add( "Активация",			92,		0, 337, 184 )
		.add( "Сон",				93,		0, 296, 178 )
		.add( "Рай",				95,		0, 129, 77 )
		.add( "Ад",					300,	0, 229, 177 )
		/*//ПИРС
		.add( "Склады",				360,	0, 170, 270 )
		.add( "Подстанция",			361,	0, 170, 270 )
		.add( "Магазины",			362,	0, 170, 270 )
		.add( "Пирс",				363,	0, 170, 270 )
		.add( "Холм",				364,	0, 170, 270 )
		.add( "Руины",				365,	0, 170, 270 )
		.add( "Главная улица",		366,	0, 170, 270 )
		.add( "Сток",				367,	0, 170, 270 )
		.add( "Кэмпинг",			368,	0, 170, 270 )
		.add( "Лагерь",				369,	0, 170, 270 )*/
		//Ривердейл
		.add( "РДР",				52,		0, 474, 335 )
		.add( "РДР подвал",			52,		1, 480, 370 )
		.add( "РДР 2 этаж",			52,		2, 185, 160 )
		.add( "РДР 3 этаж",			52,		3, 152, 150 )
		/*.add( "Топь",				138,	0, 170, 270 )
		.add( "Старая часовня",		139,	0, 170, 270 )
		.add( "Лесное Племя",		130,	0, 170, 270 )
		.add( "Лес костей",			82,		0, 170, 270 )
		.add( "Западный Утес",		76,		0, 170, 270 )
		.add( "Мотель Псов",		77,		0, 170, 270 )
		.add( "Заброшенная шахта",	78,		0, 170, 270 )
		.add( "Племенная могила",	73,		0, 170, 270 )
		.add( "Распутье",			74,		0, 170, 270 )
		.add( "Дорога на Шейди",	75,		0, 170, 270 )
		.add( "Каньон",				72,		0, 170, 270 )
		.add( "Cтанция",			131,	0, 170, 270 )
		.add( "ШГ - Запад",			132,	0, 170, 270 )
		.add( "ШГ - Восток",		133,	0, 170, 270 )
		.add( "ШГ - Шахта",			133,	1, 190, 210 )
		.add( "Урановая Шахта",		133,	2, 165, 150 )*/
		.add( "Токсичная яма",		69,		0, 170, 270 )
		.add( "Каньон, Юг",			70,		0, 170, 270 )
		.add( "Логово Смерти",		71,		0, 170, 270 )
		.add( "Восточный склон",	134,	0, 170, 270 )
		.add( "Ущелье",				135,	0, 170, 270 )
		.add( "Западный Склон",		68,		0, 170, 270 )
		.add( "Дорога",				53,		0, 170, 270 )
		.add( "Побережье",			54,		0, 170, 270 )
		.add( "Чёртов остров",		136,	0, 170, 270 )
		.add( "Предгорье",			137,	0, 170, 270 )
		.add( "Рыбацкий привал",	67,		0, 170, 270 )
		.add( "Мост",				55,		0, 170, 270 )
		.add( "Утес",				56,		0, 170, 270 )
		.add( "Рудные Шахты",		57,		0, 170, 270 )
		.add( "Свинцовая Шахта",	60,		0, 170, 270 )
		.add( "Холмы",				61,		0, 170, 270 )
		.add( "Пляж",				62,		0, 170, 270 )
		.add( "Старая Шахта",		63,		0, 170, 270 )
		.add( "Руины",				64,		0, 170, 270 )
		.add( "Кладбище",			65,		0, 170, 270 )
		.add( "Промзона",			79,		0, 170, 270 )
		.add( "Центр",				80,		0, 170, 270 )
		.add( "Жилой Район",		81,		0, 170, 270 )
		//.add( "Цветение",			83,		0, 170, 270 )
		//.add( "Институт - 1эт",		83,		1, 205, 190 )
		
		/*//Сессия Эда
		.add( "Свалка",				250, 	0, 170, 270 )
		.add( "Племя",				251, 	0, 170, 270 )
		.add( "Дорога",				252, 	0, 170, 270 )
		.add( "Водокачка",			253, 	0, 170, 270 )
		.add( "Поселение",			254, 	0, 170, 270 )
		.add( "Лес",				255, 	0, 170, 270 )
		.add( "Угольная шахта",		256, 	0, 170, 270 )
		//Сессия Эда - ивентовые
		.add( "Караванный путь",	279, 	0, 692, 451 )
		//Перфекшен
		.add( "Болото",				1, 		0, 170, 270 )
		.add( "З Склон",			2, 		0, 170, 270 )
		.add( "Вершина",			3, 		0, 170, 270 )
		.add( "В Склон",			4, 		0, 170, 270 )
		.add( "Ферма",				5, 		0, 170, 270 )
		.add( "Болотистый Лес",		6, 		0, 170, 270 )
		.add( "ЮЗ Склон",			7, 		0, 170, 270 )
		.add( "КПП",				8, 		0, 675, 375 )
		.add( "Перфекшен",			8, 		1, 170, 270 )
		.add( "ЮВ Склон",			9, 		0, 170, 270 )
		.add( "Холмы",				10, 	0, 170, 270 )
		.add( "В Лес",				11, 	0, 170, 270 )
		.add( "Поворот",			12, 	0, 170, 270 )
		.add( "Подстанция",			13, 	0, 170, 270 )
		.add( "Служ пом",			13, 	1, 170, 270 )		
		.add( "Магазины",			14, 	0, 170, 270 )
		.add( "Стр Лаба",			14, 	1, 170, 270 )		
		.add( "Окраина",			15, 	0, 170, 270 )
		.add( "ЮЗ Лес",				16, 	0, 170, 270 )
		.add( "Перекресток",		17, 	0, 170, 270 )
		.add( "Холм",				18, 	0, 170, 270 )
		.add( "Старая Шахта",		18, 	1, 325, 390 )
		.add( "Форт",				19, 	0, 170, 270 )
		.add( "Бродвей",			20, 	0, 170, 270 )
		.add( "Ю Лес",				21, 	0, 170, 270 )
		.add( "Мотель",				22, 	0, 170, 270 )
		.add( "Сток",				23, 	0, 170, 270 )
		.add( "Кэмпинг",			24, 	0, 170, 270 )
		.add( "Лагерь Гулей",		25, 	0, 170, 270 )
		.add( "Могильник",			27, 	0, 170, 270 )	
		.add( "Лагерь в ущелье",	28, 	0, 170, 270 )	*/
		
		//Города:
		.add( "НКР",				111,	0,  62, 102 )
		.add( "Рено",				112,	0, 269, 167 )
		.add( "Фриско",				117,	0, 269, 167 )
	;
}

#ifndef __TELEPORT_CLASSES
	#define __TELEPORT_CLASSES
	
	class Pos
	{
		uint mapId;
		uint x;
		uint y;
		
		Pos( Map@ map, uint x, uint y )
		{
			this.mapId = valid( map ) ? map.Id : 0;
			this.x = x;
			this.y = y;
		}

		Pos( uint mapId, uint x, uint y )
		{
			this.mapId = mapId;
			this.x = x;
			this.y = y;
		}
		
		bool TransitToMap( Critter& cr )
		{
			if( mapId == 0 ) return false;
			
			Map@ map = GetMap( mapId );
			if( !valid( map ) ) return false;
			
			int attempt = 0;
			uint16 hexX = x, hexY = y;
			while( attempt < 10 )
			{
				if( !map.IsHexPassed( hexX, hexY ) )
					map.MoveHexByDir( hexX, hexY, Random( 0, 5 ), 1 );
				attempt++;
			}

			if( !map.IsHexPassed( hexX, hexY ) )
			{
				cr.Say( SAY_NETMSG, "Гексы заняты." );
				return false;
			}
			
			cr.TransitToMap( mapId, hexX, hexY, cr.Dir );
			
			Location@ loc = map.GetLocation();
			if( valid(loc) )
				cr.SetWorldPos( loc.WorldX, loc.WorldY );
			else
				cr.Say( SAY_NETMSG, "Вы не знаете, где точно находитесь." );
			
			return true;
		}
	}

	class Teleport
	{
		string name;
		uint LocationPID;
		uint MapNumber;
		Pos pos;
		
		Teleport( string name, uint locPID, uint mapN, uint x, uint y )
		{
			this.name = name;
			this.LocationPID = locPID;
			this.MapNumber = mapN;
			this.pos = Pos( getMap(), x, y );
		}
		
		Map@ getMap()
		{
			return GetLocationMap( LocationPID, MapNumber );
		}
		
		string info()
		{
			Map@ map = getMap();
			return "[" + ( valid( map ) ? "" + CountMapPlayers( map ) : ( LocationPID + ":" + MapNumber ) ) + "] " + name;
			//return ( valid( map ) ? "" + CountMapPlayers( map ) : ( LocationPID + ":" + MapNumber ) ) + " " + name;
		}
		
		bool warp( Critter& cr )
		{
			return pos.TransitToMap( cr );
		}
	}

	//TODO: Группификаторы.
	
	class TeleportList
	{
		string name;
		Teleport[] list;
		
		TeleportList( string name )
		{
			this.name = name;
		}
		
		TeleportList@ add( string name, uint locPID, uint mapN, uint x, uint y )
		{
			return add( Teleport( name, locPID, mapN, x, y ) );
		}
		
		TeleportList@ add( Teleport teleport )
		{
			list.insertLast( teleport );
			return this;
		}
		
		bool show( Critter& cr )
		{
			Critter@[] crs;

			int x = cr.WorldX * 0.1, y = cr.WorldY * 0.1;
			string[] data = { "teleports@answer_TELEPORTS", "[" + x + ", " + y +"]\nСейчас " + CountMapPlayers( cr.GetMap() ) + " из " + GetAllPlayers( crs ) + " игроков на карте." };

			int len = list.length();

			if( len > MaxSize )
			{
				int start = cr.Page * ListSize;
				if( start < len )
				{
					int max = CLAMP( len, start, start + ListSize );
					data.insertLast( "[ НАЗАД ]" );
					for( int i = start; i < max; i++ )
						data.insertLast( list[i].info() );
						//data.insertLast( i + ":" + list[i].info() );
					data.insertLast( "[ ВПЕРЕД ]" );
					DIALOG_MENU( cr, data );
				}
				else
				{
					cr.Page = 0;
					return show(cr);
				}
			}
			else
			{
				for( int i = 0; i < len; i++ )
					data.insertLast( list[i].info() );
				DIALOG_MENU( cr, data );
			}
			
			return len > 0;
		}
		
		bool process( Critter& cr, uint answer )
		{
			if( list.length() > MaxSize )
			{
				if( answer == 0 )
				{
					cr.Page--;
					if( cr.Page < 0 )
						cr.Page = list.length() / ListSize;
					return show(cr);					
				}
				if( answer == ListSize + 1 || cr.Page * ListSize + answer - 1 == int( list.length() ) )
				{
					cr.Page++;
					if( cr.Page > int( list.length() / ListSize ) )
						cr.Page = 0;
					return show(cr);
				}
				return list[ cr.Page * ListSize + answer - 1 ].warp( cr );
			}
			
			if( answer < list.length() )
				return list[answer].warp( cr );
			
			return false;
		}
	}
#endif

#ifndef __TELEPORT_SUBFUNCTIONS
	#define __TELEPORT_SUBFUNCTIONS
	
	TeleportList@ CreateTeleports( string name )
	{
		return TeleportList( name );
	}

	Map@ GetLocationMap( uint location_pid )
	{
		return GetLocationMap( location_pid, 0 );
	}

	Map@ GetLocationMap( uint location_pid, uint map_index )
	{
		Location @ loc = GetLocationByPid( location_pid, 0 );
		if( !valid( loc ) ) 
		{
			Log( "There is no Location pid #" + location_pid + "." );
			return null;
		}
		Map @ map = loc.GetMapByIndex( map_index );
		if( !valid( map ) )
			Log( "There is no map # " + map_index + " at location pid #" + location_pid + "." );

		return map;
	}
	
	void answer_TELEPORTS( Critter& player, uint answerI, string& answerS )
	{
		teleports.process( player, answerI );
	}
#endif
