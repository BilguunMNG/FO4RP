#define HITCHANCE_MODULE

#include "_utils.fos"
#include "combat_h.fos"
#include "hitchance_h.fos"
#include "mutual_h.fos"

int client_to_hit( CritterMutual& cr, CritterMutual& target, ProtoItem@ weapon, uint8 weaponMode, ProtoItem@ ammo )
{
	return to_hit( cr, target, weapon, weaponMode, ammo );
}

int to_hit( CritterMutual& cr, CritterMutual& target, ProtoItem@ weapon, uint8 weaponMode, ProtoItem@ ammo ) 
{
	uint8 use = _WeaponModeUse( weaponMode );
    uint8 aim = _WeaponModeAim( weaponMode );
    int wpnMaxDist = _WeaponMaxDist( weapon, use );
    uint skillNum = _WeaponSkill ( weapon, use );
    int skillVal = int( cr.Skill[ skillNum ] );       
    int optimalDistance = wpnMaxDist * skillVal / MAX_SKILL * EFF_PERCENT / 100;
	bool isHthAttack = ( skillNum == WS_MELEE || skillNum == WS_UNARMED );
	
	int dist = GetCrittersDistantion( cr, target );
    if( dist > wpnMaxDist )
	{
        return 0;
	}
	
    int hitChance = 0;
	
    if( isHthAttack )
    {
        hitChance = MAX_HITCHANCE;
        return hitChance;
    }

    if( dist <= optimalDistance )
    {
        hitChance = MAX_HITCHANCE;
    }
    else
    {
        int diffFromEff = dist - optimalDistance;
        int falloff = wpnMaxDist * ( 100 - EFF_PERCENT ) / 100; 
        if( diffFromEff > falloff )
        {
            hitChance = 0;
        }
        else
        {
            hitChance = MAX_HITCHANCE * CLAMP( ( falloff - diffFromEff ) / MAX( falloff, 1 ), 0, 1 );
        }
    }

    return CLAMP( hitChance, 0, MAX_HITCHANCE );
}

#ifdef __CLIENT

// Callback.
uint8 CalcEffRange( CritterCl@ cr, ItemCl@ weapon )
{
	uint8 use = _WeaponModeUse( weapon.Mode );
	int wpnMaxDist = _WeaponMaxDist( weapon.Proto, use );
	uint skillNum = _WeaponSkill  ( weapon.Proto, use );
	int skillVal = int( cr.Skill[ skillNum ] );
	uint8 effRange = wpnMaxDist * skillVal * EFF_PERCENT / MAX_SKILL  / 100;
	
	effRange = CLAMP( effRange, 1, uint( wpnMaxDist ) );
	// Message(""+effRange);
    return effRange;
}
// Getter. Возвращает указатель на функцию "CalcEffRange" типа "distCalcFunc".
/*
distCalcFunc@ GetCalcFunc()
{
	return CalcEffRange;
}
*/
#endif