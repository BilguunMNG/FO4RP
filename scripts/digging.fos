#ifndef DIGGING
#define DIGGING

#include "_utils.fos"
#include "_ltp.fos"
#include "gathering_h.fos"
#include "firestarter_h.fos"

import uint8 checkSand( Map& map, uint16 tx, uint16 ty ) from "qmap_sand";

void TryGetSand( Critter& cr, Item& shovel, int hexX, int hexY ) 
{
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	if( GetDistantion( cr.HexX, cr.HexY, hexX, hexY ) > 1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DIG_CLOSER );
		return;
	}
	
	uint8 sand_flags = 0; 	
	sand_flags = checkSand( map, H2T( hexX ), H2T( hexY ) );
	
	if( sand_flags == 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_SAND_FOUND );
		return;
	}
	
	PrepareDigging( cr, shovel );
}

bool ltp_inited = false;
void ltp_init()
{
	LTPREG( LTP_DIGGING, process_digging )
	ltp_inited = true;
}

bool PrepareDigging( Critter& cr, Item@ tool ) 
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	
	if( !valid( tool ) )
	{
		return false;
	}

   	uint toolPid = tool.GetProtoId();
	if( toolPid != PID_SHOVEL && toolPid != PID_SPADE )
	{
		return false;
	}

	if( tool.CritSlot != SLOT_HAND1 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EQUIP_TOOL );
		return false;
	}

	if( IsTired( cr ) )
	{
		return false;
	}
	
	if( cr.IsInjured() )
	{ 
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_INJURED_CANT_WORK );
		return false; 
	}
	
	start_digging( cr, tool );
	return true;
}

bool start_digging( Critter& cr, Item& tool )
{
	if( !ltp_inited )
	{
		ltp_init();
	}
	
	if( valid( tool ) )
	{	
		uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
		uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );

		uint[] values = { cr.Id, tool.Id };
		CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_diggingSound", values, false);
		CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true);	
		_CritAnimateSwing(cr);
		StartProcess( cr, LTP_DIGGING, 0, tool.Id, 0, action_pause );
		return true;
	}
	return false;
}

uint process_digging( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESS( cr, param0, LTP_DIGGING )
	uint hit_pause = ACTION_PAUSE_BASE - (cr.Stat[ST_AGILITY] * ACTION_PAUSE_BONUS_RATE );
	uint action_pause = CLAMP( hit_pause, ACTION_PAUSE_MIN, ACTION_PAUSE_MAX );
    Item@ tool = GetItem( param1 );
  	if( valid( tool ) )
    {
      	param0++;
		Item@ tool = cr.GetItem( 0, SLOT_HAND1 );
		if( valid( tool ) )
		{
			uint digging_rage = ( cr.Skill[ SK_OUTDOORSMAN ] ) + ( cr.Stat[ ST_STRENGTH ] * 10 ) + OBJECT_DPA_BASE; 
			int sequence_length = ceil( float( ( OBJECT_HP_BASE ) / ( CLAMP( digging_rage, OBJECT_DPA_MIN, OBJECT_DPA_MAX ) ) ) );
			
			if( param0 > sequence_length )
			{
				uint16 lootPid = PID_SAND;
				uint amount = 1;
				cr.AddItem( lootPid, amount );
				
				cr.RunClientScript( "client_main@__message_result", PID_SAND, amount, 0, null, null );
			}
			else
			{
				_CritAnimateSwing(cr);
				uint[] values = { cr.Id };
				CreateTimeEvent( AFTER( REAL_MS( 700 ) ), "e_diggingSound", values, false );
				CreateTimeEvent( AFTER( REAL_MS( 1000 ) ), "gathering@e_TiredenessTimeout", cr.Id, true );
				return action_pause;
			}
		}
    }
	return 0;
}

bool CheckRemainsRemoval( Critter& cr, Item@ targetItem )
{
	Map@ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( PickaxeSounds ), 30 );
	
	if( valid( targetItem ) )
	{
		uint16 pid = targetItem.GetProtoId();
		if( Ashes.find( targetItem.GetProtoId() ) != -1 )
		{
			cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_REMOVE_ASH );
			DeleteItem( targetItem );
		}
		else if( pid >= PID_BLOOD_BONES_1 && targetItem.GetProtoId() <= PID_BLOOD_BONES_3 )
		{
			
			cr.Animate( 0, ANIM2_PICKUP, null, false, true );
			targetItem.Val0 += Random( 1, 3 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVE_SOME_REMAINS );
			
			if( targetItem.Val0 > 10 )
			{
				cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_EMOTE_REMOVE_REMAINS );
				DeleteItem( targetItem );
			}
			return true;
		}
		else if( pid == PID_VAULT_DWELLER_BONES )
		{
			cr.Animate( 0, ANIM2_PICKUP, null, false, true );
			targetItem.Val0 += Random( 1, 3 );
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_REMOVE_SOME_REMAINS );
			
			if( targetItem.Val0 > 10 )
			{
				DeleteItem( targetItem );
				cr.AddItem( PID_BONES, 1 );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_COLLECT_REMAINS );
			}
		}
		else
		{
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DID_NOTHING );
			return false;
		}
		return true;
	}
	return false;
}

uint e_diggingSound( uint[]@ values )
{
	Critter@ cr = GetCritter(values[0]);
	Map@ map = cr.GetMap();
	PlayGenericSound( map, cr.HexX, cr.HexY, _GetOneRandom( PickaxeSounds ), 30 );
	return 0;
}

#endif //DIGGING