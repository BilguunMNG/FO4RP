#include "_utils.fos"

//Тратить-ли (ломать) инструменты при использовании - вопрос баланса.
//TODO: Разобраться, почему у меня работают вложенные менюшки веток докторства. Скорее всего дело в неуникальности их имён.

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, int attackerId ) from "combat"; // Export
import void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set ) from "critter_status";        // pm added
import void ChangeCritterSpeed( Critter& cr ) from "speed";                                                 // pm add
import void UseDrug( Critter& cr, Item& drug ) from "drugs";
import void Cleaning( Critter& player, Critter& target, uint soap_pid, int water_source ) from "main";

uint[] damages = { DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
string[] damage_states = { "травма головы", "п. рука", "л. рука", "п. нога", "л. нога" };

#ifndef __HEAL__UTILS
	#define __HEAL__UTILS
	
	//#run heal test trauma items fa
	void unsafe_test( Critter& cr, int p0, int p1, int p2, string@, int[]@ ) 
	{ if( isGM( cr ) ) test( cr, p0, p1, p2 ); }

	//~run heal test trauma items fa
	void test( Critter& cr, int trauma, int items, int fa )
	{ 
		if( trauma != 0 )
		{
			cr.StatBase[ ST_CURRENT_HP ] = Random( 0, cr.Stat[ST_MAX_LIFE] );
			
			if( Random( 0, 1 ) == 0 )
				SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG );
			else
				UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG );
			
			if( Random( 0, 1 ) == 0 )
				SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER );
			else
				UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER );

			for( uint i = 0, l = damages.length(); i < l; i++ )
				cr.DamageBase[ damages[i] ] = Random( 0, 1 );
			
			cr.StatBase[ST_BLOOD_TOXIC] = Random( 0, 100 );
			cr.StatBase[ST_BLEED] = Random( 0, 100 );
		}
		
		if( items != 0 )
		{
			cr.AddItem( PID_BOOZE, 5 ); 
			cr.AddItem( PID_ANTISEPTIC, 5 ); 
			cr.AddItem( PID_SUPER_STIMPAK, 5 ); 
			cr.AddItem( PID_STIMPAK, 5 ); 
			cr.AddItem( PID_HEALING_POWDER, 5 ); 
			cr.AddItem( PID_CRAFT_L_RAGS, 5 ); 
			cr.AddItem( PID_BANDAGE, 5 );  			 
		}
		
		if( fa != 0 )
			StartMenuFA( cr, cr ); 
		else
			StartMenuDOC( cr, cr );
	}
	
	void StartMenuDOC( Critter& healer, Critter& target )
	{
		OpenMenu( healer, "DOC", MenuDOC( target ) );
	}	
	
	void StartMenuFA( Critter& healer, Critter& target )
	{
		OpenMenu( healer, "FA", MenuFA( target ) );
	}

#endif

#ifndef __HEAL_ENUMS
	#define __HEAL_ENUMS
	
	#ifndef __HEAL_ENUMS_FA
		#define __HEAL_ENUMS_FA
		enum MenuFA_stage {
			ask = 0,
			stimulator = 1,
			antiseptik = 2,
			anestetik = 3, //В оригинальном коде этого этапа не было
			bandage = 4,
			processing = 5
		};

		enum MenuFA_stimulator {
			none = 0,
			powder = 1,
			stimpack = 2,
			superstim = 3
		};

		enum MenuFA_antiseptik {
			none = 0,
			booze = 1,
			antiseptik = 2
		};

		enum MenuFA_anestetik {
			none = 0,
			booze = 1,
			anestetik = 2
		};

		enum MenuFA_bandage {
			none = 0,
			rags = 1,
			bandage = 2
		};
	#endif
	
	#ifndef __HEAL_ENUMS_DOC_BULLET
		#define __HEAL_ENUMS_DOC_BULLET

		enum MenuDOC_stage {
			tool = 1,
			antiseptik = 2,
			anestetik = 3,
			processing = 4
		};

		enum MenuDOC_tool {
			none = 0,
			blade = 1,  
			clips = 2,
			multitool = 3,
			needle = 4
		};

		enum MenuDOC_antiseptik {
			none = 0,
			booze = 1,
			antiseptik = 2
		};

		enum MenuDOC_anestetik {
			none = 0,
			booze = 1,
			anestetik = 2
		};
	#endif

	#ifndef __HEAL_ENUMS_DOC_CRIPPLE
		#define __HEAL_ENUMS_DOC_CRIPPLE
		
		enum MenuCripple_stage {
			main = 0,
			tool = 1
		};
		
		enum MenuCripple_tools {
			none = 0,
			splint = 1,
			handmade
		};
		
	#endif

#endif


class MenuFA: CenteredMenuHandler 
{	
	int stage;
	
	int stimulator;
	int antiseptik;
	int anestetik;
	int bandage;
	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	MenuFA( Critter& target )
	{
		@this.target = @target;
		
		this.stage 		= MenuFA_stage::stimulator;
		
		this.stimulator = MenuFA_stimulator::none;
		this.antiseptik = MenuFA_antiseptik::none;
		this.anestetik 	= MenuFA_anestetik::none;
		this.bandage 	= MenuFA_bandage::none;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
		
		string info = "Test info:\n"
					+ "Доктор #" + cr.Id 			+ "\n"
					+ "Пациент #" + target.Id		+ "\n"
					+ "stage #" + stage				+ "\n"
					+ "stimulator #" + stimulator	+ "\n"
					+ "antiseptik #" + antiseptik	+ "\n"
					+ "anestetik #" + anestetik		+ "\n"
					+ "bandage #" + bandage			+ "\n"
				;
					
		testInfo( cr, info );
		
		switch( stage )
		{
			case(MenuFA_stage::ask): break;
			case(MenuFA_stage::stimulator):
			{
				if( check( PID_HEALING_POWDER, "исп. порошок", "нет порошка" ) )
				{
					stimulator  = MenuFA_stimulator::powder;
					stage 		= MenuFA_stage::antiseptik;	
				}
				
				if( check( PID_STIMPAK, "исп. стимпак", "нет стимпака" ) )
				{
					stimulator  = MenuFA_stimulator::stimpack;
					stage 		= MenuFA_stage::antiseptik;	
				}

				if( check( PID_SUPER_STIMPAK, "исп. суперстим", "нет суперстима" ) )
				{
					stimulator  = MenuFA_stimulator::superstim;
					stage 		= MenuFA_stage::antiseptik;	
				}

				if( menu.Button( "без стимуляторов" ) ) 
				{
					stimulator  = MenuFA_stimulator::none;
					stage 		= MenuFA_stage::antiseptik;	
				}
				
				if( menu.Button( "медосмотр" ) )
				{
					StartMenuDOC( cr, target );
					return false;
				}
			}
			return true;
			
			case(MenuFA_stage::antiseptik):
			{
				if( check( PID_BOOZE, "исп. самогон", "нет самогона" ) )
				{
					antiseptik  = MenuFA_antiseptik::booze;
					stage 		= MenuFA_stage::anestetik;	
				}
				
				if( check( PID_ANTISEPTIC, "исп. антисептик", "нет антисептика" ) )
				{
					antiseptik  = MenuFA_antiseptik::antiseptik;
					stage 		= MenuFA_stage::anestetik;	
				}

				if( menu.Button( "без обеззараживания" ) ) 
				{
					antiseptik  = MenuFA_antiseptik::none;
					stage 		= MenuFA_stage::anestetik;	
				}
				
				if( menu.Button( "[Назад]" ) )
					stage 		= MenuFA_stage::stimulator;	
				
			}
			return true;
			
			case(MenuFA_stage::anestetik):
			{
				//В оригинальном коде этого этапа не было:
				anestetik = MenuFA_anestetik::none;
				stage 	  = MenuFA_stage::bandage;
				
			}
			return MenuUpdate( cr, menu );//skip this unimplemented stage
			
			case(MenuFA_stage::bandage):
			{ 
				if( check( PID_CRAFT_L_RAGS, "исп. тряпки", "нет тряпок" ) )
				{
					bandage  = MenuFA_bandage::rags;
					stage 	 = MenuFA_stage::processing;	
				}
				
				if( check( PID_BANDAGE, "исп. бинты", "нет бинтов" ) )
				{
					bandage  = MenuFA_bandage::bandage;
					stage 	 = MenuFA_stage::processing;	
				}

				if( menu.Button( "без перевязки" ) ) 
				{
					bandage  = MenuFA_bandage::none;
					stage 	 = MenuFA_stage::processing;
				}

				if( menu.Button( "Назад" ) )
					stage 	 = MenuFA_stage::antiseptik;	

			}
			return true;
			
			case(MenuFA_stage::processing):
			{
				if( menu.Button( "Приступить" ) )
				{
					int skill = cr.Skill[ SK_FIRST_AID ];
					string skill_info = "FA base [" + skill + "] ";
					
					if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
						skill /= 2;
					if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )
						skill /= 2;
					
					skill_info += skill;
					
					switch( stimulator )
					{
						case(MenuFA_stimulator::powder):
						{
							Item@ powder = getItem( cr, PID_HEALING_POWDER );
							if( !valid( powder ) )
								stimulator 	= MenuFA_stimulator::none;
							else
							{
								ItemPowderUse( target, powder );
								skill += 15;
								skill_info += " + powder [15]";
							}
						}
						break;
						
						case(MenuFA_stimulator::stimpack):
						{
							Item@ stimpack = getItem( cr, PID_STIMPAK );
							if( !valid( stimpack ) )
								stimulator 	= MenuFA_stimulator::none;
							else
							{
								ItemStimpackUse( target, stimpack );
								skill += 30;
								skill_info += " + stimpack [30]";
							}
						}
						break;
						
						case(MenuFA_stimulator::superstim):
						{
							Item@ superstim = getItem( cr, PID_SUPER_STIMPAK );
							if( !valid( superstim ) )
								stimulator 	= MenuFA_stimulator::none;
							else
							{
								ItemSupUse( target, superstim );
								skill += 60;
								skill_info += " + superstim [60]";
							}
						}
						break;
					}
					
					if( cr.Timeout[ TO_SK_FIRST_AID ] > 0 )
					{
						stage 		= MenuDOC_stage::tool;
						
						cr.Say( SAY_NETMSG, "Вы слишком устали, напряжение убьёт вас." );
						return true;
					}
										
					switch( antiseptik )
					{
						case(MenuFA_antiseptik::booze):
						{
							Item@ booze = getItem( cr, PID_BOOZE );
							if( !valid( booze ) )
								stimulator 	= MenuFA_antiseptik::none;
							else
							{
								_SubItem( booze, 1 ); 
								cr.AddItem( PID_BOTTLE_GLASS, 1 ); 
								
								skill += 10;
								skill_info += " + booze [10]";
							}
						}
						break;
						
						case(MenuFA_antiseptik::antiseptik):
						{
							Item@ antiseptik = getItem( cr, PID_ANTISEPTIC );
							if( !valid( antiseptik ) )
								stimulator 	= MenuFA_antiseptik::none;
							else
							{
								_SubItem( antiseptik, 1 ); 
								cr.AddItem( PID_PHIAL, 1 ); 
								
								skill += 30;
								skill_info += " + antiseptik [30]";
							}
						}
						break;
											
					}
					
					switch( anestetik )
					{
						case(MenuFA_anestetik::none):
						case(MenuFA_anestetik::booze):
						case(MenuFA_anestetik::anestetik):
						{
						}
						break;
					}
					
					switch( bandage )
					{
						case(MenuFA_bandage::rags):
						{
							Item@ rags = getItem( cr, PID_CRAFT_L_RAGS );
							if( !valid( rags ) )
								bandage = MenuFA_bandage::none;
							else
							{
								skill += 10;
								skill_info += " + rags [10]";
								
								_SubItem( rags, 1 );
								
								testInfo( cr, skill_info + " = " + skill );
								UseBandage( cr, target, skill ); 
							}
						}
						break;
											
						case(MenuFA_bandage::bandage):
						{ 
							Item@ item_bandage = getItem( cr, PID_BANDAGE );
							if( !valid( item_bandage ) )
								bandage = MenuFA_bandage::none;
							else
							{
								skill += 30;
								skill_info += " + bandage [30]";

								_SubItem( item_bandage, 1 );
								
								testInfo( cr, skill_info + " = " + skill );
								UseBandage( cr, target, skill ); 
							}
						}
						break;
											
						case(MenuFA_bandage::none):
						{
							cr.Say( SAY_NETMSG, "Без повязки раны быстрее заживать не будут." );
						}
						break;
					}
					
					if(    stimulator 	== MenuFA_stimulator::none
						&& antiseptik 	== MenuFA_antiseptik::none
						&& anestetik 	== MenuFA_anestetik::none
						&& bandage 		== MenuFA_bandage::none )
					{
						cr.Say( SAY_NETMSG, "Вы практически ничего не сделали." );
					}
					
					OpenMenu( cr, "DOC", MenuDOC( target ) );
					return false;
				}
			}
			return true;
		}
		
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		switch( stage )
		{
			case(MenuFA_stage::ask):
				return "Ждём согласия пациента.."; 
			
			case(MenuFA_stage::stimulator):
			{
				string[] stages_text = { "нет серьезных повреждений", "хорошее состояние", "удовлетворительное состояние", "плохое состояние", "тяжелое состояние", "критические состояние" };
				float[] HP_stages_percentage = { 100, 90, 80, 60, 40, 20 };
				
				if( stages_text.length() != HP_stages_percentage.length() )
				{
					return "stages_text.length("+stages_text.length()+") != HP_stages_percentage.length("+HP_stages_percentage.length()+")";
				}
				
				string state;
				float HP_percentage = target.Stat[ ST_CURRENT_HP ] * 100.0f / target.Stat[ ST_MAX_LIFE ];
				for( uint i = HP_stages_percentage.length() - 1; i >= 0; i-- )
					if( HP_percentage <= HP_stages_percentage[i] )
					{
						state = stages_text[i];
						break;
					}
				
				if( target.StatBase[ ST_BLEED ] > 0 ) 
					state += ", кровотечение";
				
				if( target.GetTimeEvents( CTE_HEAL, null, null, null ) > 0 )
					state += ", бинты наложены";

				return "Результат осмотра: " + state + ".";
			}
			
			case(MenuFA_stage::antiseptik):
				return "Применяем антисептик:"; 
			
			case(MenuFA_stage::anestetik):
				return "Применяем анестезию:"; 
			
			case(MenuFA_stage::bandage):
				return "Бинтуемся:"; 

			case(MenuFA_stage::processing):
				return "Вы готовы начать перевязку пациента."; 
		}
		
		return "[UNKNOWN STATE #" + stage + "]";
	}
}

class MenuDOC: CenteredMenuHandler 
{	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	string state;
	
	MenuDOC( Critter& target )
	{
		@this.target = @target;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
	
		if( menu.Button( "Перевязка" ) )
		{
			ProccessFirstAidSkill( cr, target, true );
			return false;
		}
		
		if( menu.Button( "смыть грязь" ) )
		{
			Cleaning( cr, target, 0, 0 );
			return true;
		}
		
		state = target.Stat[ ST_CURRENT_HP ] > 0 ? "Пульс в норме" : "Пульс слабый";

		if( damages.length() != damage_states.length() )
		{
			testInfo( cr, "damages.length("+damages.length()+") != damage_states.length("+damage_states.length()+")" );
			return false;
		}
		
		bool hasDamages = false;
		for( uint i = 0, l = damages.length(); i < l; i++ )
			if( target.DamageBase[damages[i]] != 0 )
			{
				state += ", " + damage_states[i]; 
				hasDamages = true;
			}
		
		if( cr.Stat[ST_POISONING_LEVEL] > 0 )
		{
			state += ", есть признаки отравления";
			hasDamages = true;
		}
		
		if( cr.Stat[ST_RADIATION_LEVEL] > 0 )
		{
			state += ", есть признаки облучения";
			hasDamages = true;
		}
		
		if( cr.Stat[ST_BLOOD_TOXIC] > 0 )
		{
			state += ", есть признаки заражения крови";
			hasDamages = true;
		}
		
		if( cr.Stat[ST_BLEED] > 0 )
		{
			state += ", кровотечение";
			hasDamages = true;
		}
		
		state += ".";
		
		bool knife = ( _CritCountItem( cr, PID_KNIFE ) > 0 || _CritCountItem( cr, PID_COMBAT_KNIFE ) > 0 );

		if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
		{
			state += "\n" + "Пуля или осколок в ране, необходимо вынуть перед дальнейшими действиями.";
			if ( menu.Button( "Извлечение" ) ) {
				OpenMenu( cr, "BulletOver", MenuDOC_Bullet( target ) );
				return false;
			}

			return true;
		}

		if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )
		{
			state += "\n" + "Сложная рана, необходимо закрыть ее.";
			
			if ( menu.Button( "Операция" ) ) {
				OpenMenu( cr, "HeavyDamage", MenuDOC_Heavy( target ) );
				return false;
			}

			return true;
		}
			
		if( hasDamages && menu.Button( "Травмы" ) )
		{
			OpenMenu( cr, "Cripple", MenuDOC_Cripple( target ) );
			return false;
		}

		state += "\n" + "Дальше может потребоваться только перевязка.";
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		return state;
	}
}

class MenuDOC_Bullet: CenteredMenuHandler 
{	
	int stage;
	
	int tool;
	int antiseptik;
	int anestetik;
	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	MenuDOC_Bullet( Critter& target )
	{
		@this.target = @target;
		
		this.stage 		= MenuDOC_stage::tool;
		
		this.tool 		= MenuDOC_tool::none;
		this.antiseptik = MenuDOC_antiseptik::none;
		this.anestetik 	= MenuDOC_anestetik::none;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
		
		string info = "Test info:\n"
					+ "Доктор #" + cr.Id 			+ "\n"
					+ "Пациент #" + target.Id		+ "\n"
					+ "stage #" + stage				+ "\n"
					+ "tool #" + stimulator			+ "\n"
					+ "antiseptik #" + antiseptik	+ "\n"
					+ "anestetik #" + anestetik		+ "\n"

				;
					
		testInfo( cr, info );
		
		switch( stage )
		{
			case(MenuDOC_stage::tool):
			{
				if( check( PID_MEDCLIP, "щипцами", "нет щипцов" ) )
				{
					tool  = MenuDOC_tool::clips;
					stage = MenuDOC_stage::antiseptik;	
				}		
				if( check( PID_MULTI_TOOL, "мультитулом", "нет клещей" ) )
				{
					tool  = MenuDOC_tool::multitool;
					stage = MenuDOC_stage::antiseptik;	
				}

				if( hasItems( cr, blades ) )
				{
					if( menu.Button( "выковырять" ) )
					{
						tool  = MenuDOC_tool::blade;
						stage = MenuDOC_stage::antiseptik;	
					}
				}
				else menu.Button( "нет лезвия" );
				
				if( menu.Button( "Медосмотр" ) )
				{
					OpenMenu( cr, "DOC", MenuDOC( target ) );
					return false;
				}

				if( menu.Button( "Первая помощь" ) )
				{
					OpenMenu( cr, "FA", MenuFA( target ) );
					return false;
				}
				
			}
			return true;
			
			case(MenuDOC_stage::antiseptik):
			{
				if( check( PID_BOOZE, "исп. самогон", "нет самогона" ) )
				{
					antiseptik  = MenuDOC_antiseptik::booze;
					stage 		= MenuDOC_stage::anestetik;	
				}
				
				if( check( PID_ANTISEPTIC, "исп. антисептик", "нет антисептика" ) )
				{
					antiseptik  = MenuDOC_antiseptik::antiseptik;
					stage 		= MenuDOC_stage::anestetik;	
				}

				if( menu.Button( "без обеззараживания" ) ) 
				{
					antiseptik  = MenuDOC_antiseptik::none;
					stage 		= MenuDOC_stage::anestetik;	
				}
				
				if( menu.Button( "Назад" ) )
					stage 		= MenuDOC_stage::tool;	
				
			}
			return true;
			
			case(MenuDOC_stage::anestetik):
			{
				if( check( PID_BOOZE, "исп. самогон", "нет самогона" ) )
				{
					anestetik   = MenuDOC_anestetik::booze;
					stage 	    = MenuDOC_stage::processing;	
				}
				
				if( check( PID_ANESTETIC, "исп. анестетик", "нет анестезии" ) )
				{
					anestetik   = MenuDOC_anestetik::anestetik;
					stage 		= MenuDOC_stage::processing;	
				}

				if( menu.Button( "без обезболивающих" ) ) 
				{
					anestetik   = MenuDOC_anestetik::none;
					stage 		= MenuDOC_stage::processing;	
				}
				
				if( menu.Button( "Назад" ) )
					stage 		= MenuDOC_stage::antiseptik;	
				
			}
			return true;
			
			case(MenuDOC_stage::processing):
			{
				if( menu.Button( "Приступить" ) )
				{
					if( cr.Timeout[ TO_SK_DOCTOR ] > 0 )
					{
						stage 		= MenuDOC_stage::tool;
						
						cr.Say( SAY_NETMSG, "Вы слишком устали, напряжение убьёт вас." );
						return true;
					}
					
					uint16 skill = cr.Skill[ SK_DOCTOR ];
					string skill_info = "DOC base [" + skill + "] ";
					
					int damage = 0;
					string damage_info = "Taken damage: ";
					
					switch( tool )
					{
						case(MenuDOC_tool::clips):
						{
							Item@ item_tool = getItem( cr, PID_MEDCLIP );
							if( !valid( item_tool ) )
								tool = MenuDOC_tool::none;
							else
							{
								skill += 100;
								skill_info += " + clips [100]";
							}						
						}
						break;

						case(MenuDOC_tool::multitool):
						{
							Item@ item_tool = getItem( cr, PID_MULTI_TOOL );
							if( !valid( item_tool ) )
								tool = MenuDOC_tool::none;
							else
							{
								skill += 0;
								skill_info += " + multitool [0]";

								int rng = Random( 5, 15 );
								damage += rng;
								damage_info += " + multitool [" + rng + "]";
							}						
						}
						break;

						case(MenuDOC_tool::blade):
						{
							if( hasItems( cr, blades ) )
							{
								skill -= 100;
								skill_info += " - blades [100]";
								
								int rng = Random( 15, 30 );
								damage += rng;
								damage_info += " + blades [" + rng + "]";
							}						
						}
						break;
					}
					
					switch( antiseptik )
					{
						case(MenuDOC_antiseptik::booze):
						{
							Item@ item_antiseptik = getItem( cr, PID_BOOZE );
							if( !valid( item_antiseptik ) )
								antiseptik = MenuDOC_antiseptik::none;
							else
							{
								skill += 0;
								skill_info += " + booze [0]";
								
								damage += 0;
							}
						}
						break;
						
						case(MenuDOC_antiseptik::antiseptik):
						{
							Item@ item_antiseptik = getItem( cr, PID_ANTISEPTIC );
							if( !valid( item_antiseptik ) )
								antiseptik = MenuDOC_antiseptik::none;
							else
							{
								skill += 30;
								skill_info += " + antiseptik [30]";
								
								int rng = Random( 5, 10 );
								damage -= rng;
								damage_info += " - antiseptik [" + rng + "]";

								_SubItem( item_antiseptik, 1 );
								cr.AddItem( PID_PHIAL, 1 );
							}
						}
						break;
						
						case(MenuDOC_antiseptik::none):
						{
							skill -= 30;
							skill_info += " - no antiseptik [30]";
								
							int rng = Random( 5, 10 );
							damage += rng;
							damage_info += " + no antiseptik [" + rng + "]";

							cr.ParamBase[ CR_DIRTINESS ] += Random( 5, 10 );
						}
						break;
						
					}
					
					switch( anestetik )
					{
						case(MenuDOC_anestetik::booze):
						{
							Item@ item_anestetik = getItem( cr, PID_BOOZE );
							if( !valid( item_anestetik ) )
								antiseptik = MenuDOC_anestetik::none;
							else
							{
								skill += 30;
								skill_info += " + booze [30]";
								
								int rng = Random( 5, 20 );
								damage -= rng;
								damage_info += " - booze [" + rng + "]";
							}
						}
						break;
						
						case(MenuDOC_anestetik::anestetik):
						{
							Item@ item_anestetik = getItem( cr, PID_ANESTETIC );
							if( !valid( item_anestetik ) )
								anestetik = MenuDOC_antiseptik::none;
							else
							{
								skill += 60;
								skill_info += " + anestetik [60]";
								
								int rng = Random( 15, 30 );
								damage -= rng;
								damage_info += " - anestetik [" + rng + "]";

								_SubItem( item_anestetik, 1 );
								cr.AddItem( PID_HYPODERMIC_NEEDLE, 1 );
							}
						}
						break;
						
						case(MenuDOC_anestetik::none):
						{
							skill += 0;
							skill_info += " + no anestetik [0]";
								
							damage += 0;
						}
						break;
						
					}

					target.StatBase[ ST_CURRENT_HP ] -= damage;
					
					testInfo( cr, skill_info + " = " + skill + "." );
					testInfo( cr, damage_info + " = " + damage + "." );

					int luck = cr.Stat[ST_LUCK];
					int chances = ( skill + rollLuck( luck ) * HEALING_LUCK_DEPENDENCY );
					testInfo( cr,
						"skill [" + skill + "]" +
						" + rollLuck( luck[" + luck + "] )[" + rollLuck( luck ) + "]" + 
						" * HEALING_LUCK_DEPENDENCY [" + HEALING_LUCK_DEPENDENCY + "]" +
						"{" + chances + "}" +
							" > " +
						"Random( 0, 100 * HEALING_DIFFICULTY[" + HEALING_DIFFICULTY + "] )" +
						"\n\nChances are: " + float( chances / HEALING_DIFFICULTY ) + "%." +
						""
					);
					
					if( HealingProcessSucceed( skill, cr.Stat[ST_LUCK] ) )
					{
						ChangeStatus( target, CR_STATUS_BULLET_OVER, 0, false );
						cr.Say( SAY_NETMSG, "Вы вытащили пулю из раны." );
					}
					else 
						cr.Say( SAY_NETMSG, "У вас не вышло извлечь пулю." );

					cr.TimeoutBase[ TO_SK_DOCTOR ] = DOCTOR_TIMEOUT( player );
					
					OpenMenu( cr, "DOC", MenuDOC( target ) );
					return false;
				}

				if( menu.Button( "Назад" ) )
					stage 		= MenuDOC_stage::anestetik;	
			}
			return true;
		}
		
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		switch( stage )
		{
			case(MenuDOC_stage::tool):
				return "Выберите инструмент:";
				
			case(MenuDOC_stage::antiseptik):
				return "Применяем антисептик:"; 
			
			case(MenuDOC_stage::anestetik):
				return "Применяем анестезию:"; 
			
			case(MenuDOC_stage::processing):
				return "Вы готовы провести операцию по извлечению инородного тела из раны пациента."; 
		}
		
		return "[UNKNOWN STATE #" + stage + "]";
	}
}

class MenuDOC_Heavy: CenteredMenuHandler 
{	
	int stage;
	
	int tool;
	int antiseptik;
	int anestetik;
	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	MenuDOC_Heavy( Critter& target )
	{
		@this.target = @target;
		
		this.stage 		= MenuDOC_stage::tool;
		
		this.tool 		= MenuDOC_tool::none;
		this.antiseptik = MenuDOC_antiseptik::none;
		this.anestetik 	= MenuDOC_anestetik::none;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
		
		string info = "Test info:\n"
					+ "Доктор #" + cr.Id 			+ "\n"
					+ "Пациент #" + target.Id		+ "\n"
					+ "stage #" + stage				+ "\n"
					+ "tool #" + stimulator			+ "\n"
					+ "antiseptik #" + antiseptik	+ "\n"
					+ "anestetik #" + anestetik		+ "\n"

				;
					
		testInfo( cr, info );
		
		switch( stage )
		{
			case(MenuDOC_stage::tool):
			{
				if( check( PID_MEDNEEDLE, "зашить", "нечем зашить" ) )
				{
					tool  = MenuDOC_tool::needle;
					stage = MenuDOC_stage::antiseptik;	
				}		

				if( hasItems( cr, blades ) )
				{
					if( menu.Button( "прижечь" ) )
					{
						tool  = MenuDOC_tool::blade;
						stage = MenuDOC_stage::antiseptik;	
					}
				}
				else menu.Button( "нечем прижечь" );
				
				if( menu.Button( "Медосмотр" ) )
				{
					OpenMenu( cr, "DOC", MenuDOC( target ) );
					return false;
				}

				if( menu.Button( "Первая помощь" ) )
				{
					OpenMenu( cr, "FA", MenuFA( target ) );
					return false;
				}

			}
			return true;
			
			case(MenuDOC_stage::antiseptik):
			{
				if( check( PID_BOOZE, "исп. самогон", "нет самогона" ) )
				{
					antiseptik  = MenuDOC_antiseptik::booze;
					stage 		= MenuDOC_stage::anestetik;	
				}
				
				if( check( PID_ANTISEPTIC, "исп. антисептик", "нет антисептика" ) )
				{
					antiseptik  = MenuDOC_antiseptik::antiseptik;
					stage 		= MenuDOC_stage::anestetik;	
				}

				if( menu.Button( "без обеззараживания" ) ) 
				{
					antiseptik  = MenuDOC_antiseptik::none;
					stage 		= MenuDOC_stage::anestetik;	
				}
				
				if( menu.Button( "Назад" ) )
					stage 		= MenuDOC_stage::tool;	
				
			}
			return true;
			
			case(MenuDOC_stage::anestetik):
			{
				if( check( PID_BOOZE, "исп. самогон", "нет самогона" ) )
				{
					anestetik   = MenuDOC_anestetik::booze;
					stage 	    = MenuDOC_stage::processing;	
				}
				
				if( check( PID_ANESTETIC, "исп. анестетик", "нет анестезии" ) )
				{
					anestetik   = MenuDOC_anestetik::anestetik;
					stage 		= MenuDOC_stage::processing;	
				}

				if( menu.Button( "без обезболивающих" ) ) 
				{
					anestetik   = MenuDOC_anestetik::none;
					stage 		= MenuDOC_stage::processing;	
				}
				
				if( menu.Button( "Назад" ) )
					stage 		= MenuDOC_stage::antiseptik;	
				
			}
			return true;
			
			case(MenuDOC_stage::processing):
			{
				if( menu.Button( "Приступить" ) )
				{
					if( cr.Timeout[ TO_SK_DOCTOR ] > 0 )
					{
						stage 		= MenuDOC_stage::tool;
						
						cr.Say( SAY_NETMSG, "Вы слишком устали, напряжение убьёт вас." );
						return true;
					}
					
					uint16 skill = cr.Skill[ SK_DOCTOR ];
					string skill_info = "DOC base [" + skill + "] ";
					
					int damage = 0;
					string damage_info = "Taken damage: ";
					string action_info = "";
					
					switch( tool )
					{
						case(MenuDOC_tool::needle):
						{
							Item@ needle = getItem( cr, PID_MEDNEEDLE );
							Item@ thread = getItem( cr, PID_MEDTHREAD );
							if( !valid( needle ) || !valid( thread ) )
							{
								tool = MenuDOC_tool::none;
								stage 		= MenuDOC_stage::tool;
								
								cr.Say( SAY_NETMSG, "Нет иглы и ниток." );
								return true;
							}
							else
							{
								skill += 100;
								skill_info += " + needle [100]";
								
								int rng = Random( 5, 10 );
								damage += rng;
								damage_info += " + needle [" + rng + "]";
								
								action_info = "зашили";

								_SubItem( thread, 1 );
							}						
						}
						break;

						case(MenuDOC_tool::blade):
						{
							if( hasItems( cr, blades ) && hasItems( cr, heatsources ) )
							{
								skill -= 100;
								skill_info += " - blades [100]";
								
								int rng = Random( 15, 30 );
								damage += rng;
								damage_info += " + blades [" + rng + "]";

								action_info = "прижгли";
							}
							else
							{
								tool = MenuDOC_tool::none;
								stage 		= MenuDOC_stage::tool;
								
								cr.Say( SAY_NETMSG, "Нет источника тепла, или нечем прижечь рану." );
								return true;
							}
						}
						break;
					}
					
					switch( antiseptik )
					{
						case(MenuDOC_antiseptik::booze):
						{
							Item@ item_antiseptik = getItem( cr, PID_BOOZE );
							if( !valid( item_antiseptik ) )
								antiseptik = MenuDOC_antiseptik::none;
							else
							{
								skill += 0;
								skill_info += " + booze [0]";
								
								damage += 0;
							}
						}
						break;
						
						case(MenuDOC_antiseptik::antiseptik):
						{
							Item@ item_antiseptik = getItem( cr, PID_ANTISEPTIC );
							if( !valid( item_antiseptik ) )
								antiseptik = MenuDOC_antiseptik::none;
							else
							{
								skill += 30;
								skill_info += " + antiseptik [30]";
								
								int rng = Random( 5, 10 );
								damage -= rng;
								damage_info += " - antiseptik [" + rng + "]";

								_SubItem( item_antiseptik, 1 );
								cr.AddItem( PID_PHIAL, 1 );
							}
						}
						break;
						
						case(MenuDOC_antiseptik::none):
						{
							skill -= 30;
							skill_info += " - no antiseptik [30]";
								
							int rng = Random( 5, 10 );
							damage += rng;
							damage_info += " + no antiseptik [" + rng + "]";

							cr.ParamBase[ CR_DIRTINESS ] += Random( 5, 10 );
						}
						break;
						
					}
					
					switch( anestetik )
					{
						case(MenuDOC_anestetik::booze):
						{
							Item@ item_anestetik = getItem( cr, PID_BOOZE );
							if( !valid( item_anestetik ) )
								antiseptik = MenuDOC_anestetik::none;
							else
							{
								skill += 30;
								skill_info += " + booze [30]";
								
								int rng = Random( 5, 20 );
								damage -= rng;
								damage_info += " - booze [" + rng + "]";
							}
						}
						break;
						
						case(MenuDOC_anestetik::anestetik):
						{
							Item@ item_anestetik = getItem( cr, PID_ANESTETIC );
							if( !valid( item_anestetik ) )
								anestetik = MenuDOC_antiseptik::none;
							else
							{
								skill += 60;
								skill_info += " + anestetik [60]";
								
								int rng = Random( 15, 30 );
								damage -= rng;
								damage_info += " - anestetik [" + rng + "]";

								_SubItem( item_anestetik, 1 );
								cr.AddItem( PID_HYPODERMIC_NEEDLE, 1 );
							}
						}
						break;
						
						case(MenuDOC_anestetik::none):
						{
							skill += 0;
							skill_info += " + no anestetik [0]";
								
							damage += 0;
						}
						break;
						
					}

					target.StatBase[ ST_CURRENT_HP ] -= damage;
					
					testInfo( cr, skill_info + " = " + skill + "." );
					testInfo( cr, damage_info + " = " + damage + "." );

					int luck = cr.Stat[ST_LUCK];
					int chances = ( skill + rollLuck( luck ) * HEALING_LUCK_DEPENDENCY );
					testInfo( cr,
						"skill [" + skill + "]" +
						" + rollLuck( luck[" + luck + "] )[" + rollLuck( luck ) + "]" + 
						" * HEALING_LUCK_DEPENDENCY [" + HEALING_LUCK_DEPENDENCY + "]" +
						"{" + chances + "}" +
							" > " +
						"Random( 0, 100 * HEALING_DIFFICULTY[" + HEALING_DIFFICULTY + "] )" +
						"\n\nChances are: " + float( chances / HEALING_DIFFICULTY ) + "%." +
						""
					);
					
					if( HealingProcessSucceed( skill, cr.Stat[ST_LUCK] ) )
					{
						ChangeStatus( target, CR_STATUS_HEAVY_DMG, 0, false );
						cr.Say( SAY_NETMSG, "Вы " + action_info + " рану." );
					}
					else 
						cr.Say( SAY_NETMSG, "Операция не удалась." );

					cr.TimeoutBase[ TO_SK_DOCTOR ] = DOCTOR_TIMEOUT( player );
					
					OpenMenu( cr, "DOC", MenuDOC( target ) );
					return false;
				}
				
				if( menu.Button( "Назад" ) )
					stage 		= MenuDOC_stage::anestetik;	
			}
			return true;
		}
		
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		switch( stage )
		{
			case(MenuDOC_stage::tool):
				return "Выберите инструмент:";
				
			case(MenuDOC_stage::antiseptik):
				return "Применяем антисептик:"; 
			
			case(MenuDOC_stage::anestetik):
				return "Применяем анестезию:"; 
			
			case(MenuDOC_stage::processing):
				return "Вы готовы провести операцию на открытой ране пациента."; 
		}
		
		return "[UNKNOWN STATE #" + stage + "]";
	}
}

class MenuDOC_Cripple: CenteredMenuHandler 
{	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	int stage;
	uint limb;
	string description;
	
	MenuDOC_Cripple( Critter& target )
	{
		this.stage = MenuCripple_stage::main;
		@this.target = @target;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
		description = "";
		
		string info = "Test info:\n"
					+ "Доктор #" + cr.Id 			+ "\n"
					+ "Пациент #" + target.Id		+ "\n"
				;
					
		testInfo( cr, info );
		
		switch( stage )
		{
			case(MenuCripple_stage::main ):
			{
				if( target.Stat[ ST_BLOOD_TOXIC ] > 0 )
				{
					description += "Уровень заражения: " + target.Stat[ST_BLOOD_TOXIC] + ".\n";
					
					if( hasItem( cr, PID_PILLS ) )
					{
						if( menu.Button( "Дать таблетки" ) )
						{
							Item@ pills = getItem( cr, PID_PILLS );
							if( !valid( pills ) ) return true;
							
							_SubItem( pills, 1 );
							cr.AddItem( PID_PHIAL, 1 );
							
							target.StatBase[ ST_CURRENT_HP ] -= target.StatBase[ ST_BLOOD_TOXIC ];
							target.StatBase[ ST_BLOOD_TOXIC ] = 0;
							target.Say( SAY_EMOTE, "Закидывает горсть таблеток в рот" );
							ChangeStatus( target, CR_STATUS_BLOOD_TOXIC, 0, false );
							
							return true;
						}
					}
					else
					{
						if( menu.Button( "Нет таблеток" ) )
						{
							cr.Say( SAY_NETMSG, "Вам нужны таблетки от заражения крови, что бы вылечить недуг пациента. При достижении 100% заражения, он умрёт от сепсиса!" );
							return true;
						}
					}
				}

				if( target.Stat[ ST_POISONING_LEVEL ] > 0 )
				{
					description += "Уровень отравления: " + target.Stat[ST_BLOOD_TOXIC] + ".\n";
					
					if( hasItem( cr, PID_ANTIDOTE ) )
					{
						if( menu.Button( "Дать противоядие" ) )
						{
							Item@ antidote = getItem( cr, PID_ANTIDOTE );
							if( !valid( antidote ) ) return true;
							
							_SubItem( antidote, 1 );
							cr.AddItem( PID_BOTTLE_GLASS, 1 );
							
							target.StatBase[ ST_POISONING_LEVEL ] = CLAMP( target.StatBase[ ST_POISONING_LEVEL ] - 50, 0, 1000 );
							
							return true;
						}
					}
					else
					{
						if( menu.Button( "Нет противоядия" ) )
						{
							cr.Say( SAY_NETMSG, "Вам нужно противоядие для того, что бы вывести яд из организма пациента. Сильное отравление может убить его ослабший организм!" );
							return true;
						}
					}		
				}
				
				for( uint i = 0, l = damages.length(); i < l; i++ )
				{
					if( target.DamageBase[damages[i]] != 0 && menu.Button(damage_states[i]) )
					{
						stage = MenuCripple_stage::tool;
						limb = damages[i];
						return true;
					}
				}

				if( menu.Button("Назад") )
				{
					OpenMenu( cr, "DOC", MenuDOC( target ) );
					return false;
				}
			}
			return true;
			
			case(MenuCripple_stage::tool):
			{
				uint[] rates;
				uint[] ids;
				uint8 countTimes = target.GetTimeEvents( CTE_DOC, ids, null, rates );
				for( uint8 i = 0; i < countTimes; i++ )
				{
					if( rates[i] == limb )
					{
						description += "Эта часть тела уже лечится.\n";
						
						if( menu.Button( "Снять " + ( limb == DAMAGE_EYE ? "бинт" : "шину" ) ) )
						{
							target.EraseTimeEvent( ids[i] );
							
							cr.Say( SAY_NETMSG, "Теперь прийдётся заного обработать: " + damage_states[damages.find(limb)] + "." );
							
							stage = MenuCripple_stage::main;
							limb = 0;
						}

						if( menu.Button("Назад") )
						{
							stage = MenuCripple_stage::main;
							limb = 0;
						}

						return true;
					}
				}
				
				if( target.DamageBase[ limb ] == 0 )
				{
					description += "Эта часть тела не нуждается в лечении.\n";
					
					if( menu.Button("Назад") )
					{
						stage = MenuCripple_stage::main;
						limb = 0;
					}
					
					return true;
				}
				
				switch( limb )
				{
					case(DAMAGE_EYE):
					{
						if( check( PID_CRAFT_L_RAGS, "Замотать тряпкой", "Нет тряпки" ) )
						{
							Item@ bandage = getItem( cr, PID_CRAFT_L_RAGS );
							if( !valid( bandage ) ) return true;
							
							_SubItem( bandage, 1 );

							int docTime = MAX_LIMB_HEALING_TIME - cr.Skill[ SK_DOCTOR ] - target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY;
							target.AddTimeEvent( "cte_Doc", REAL_MINUTE( CLAMP( docTime, 5, MAX_LIMB_HEALING_TIME ) ), CTE_DOC, limb );
							cr.Say( SAY_NETMSG, "Вы наложили повязку на рану, потребуется немало времени на то что бы она зажила." );
							
							testInfo( cr, "Time: " + MAX_LIMB_HEALING_TIME + " - " + ( cr.Skill[ SK_DOCTOR ] ) + " - " + ( target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY ) + " = " + docTime	);
							
							stage = MenuCripple_stage::main;
							limb = 0;
							
							return true;
						}

						if( check( PID_BANDAGE, "Наложить бинт", "Нет бинта" ) )
						{
							Item@ bandage = getItem( cr, PID_BANDAGE );
							if( !valid( bandage ) ) return true;
							
							_SubItem( bandage, 1 );

							int docTime = MAX_LIMB_HEALING_TIME - cr.Skill[ SK_DOCTOR ] * 2 - target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY;
							target.AddTimeEvent( "cte_Doc", REAL_MINUTE( CLAMP( docTime, 5, MAX_LIMB_HEALING_TIME ) ), CTE_DOC, limb );
							cr.Say( SAY_NETMSG, "Вы обработали и перебинтовали рану, потребуется время на то что бы она зажила." );

							testInfo( cr, "Time: " + MAX_LIMB_HEALING_TIME + " - " + ( cr.Skill[ SK_DOCTOR ] * 2 ) + " - " + ( target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY ) + " = " + docTime	);
							
							stage = MenuCripple_stage::main;
							limb = 0;

							return true;
						}
						
					}						
					return true;
					
					case( DAMAGE_RIGHT_ARM ):
					case( DAMAGE_LEFT_ARM ):
					case( DAMAGE_RIGHT_LEG ):
					case( DAMAGE_LEFT_LEG ):
					{
						
						if( hasItem( cr, PID_ROPE ) && hasItems( cr, makeshift_splints ) )
						{
							if( menu.Button( "Самодельная шина" ) )
							{
								Item@ rope = getItem( cr, PID_ROPE );
								if( !valid( rope ) ) return true;
								
								Item@[] splints = getItems( cr, makeshift_splints );
								if( splints.length() == 0 )	return true;
								
								Item@ splint = splints[ Random( 0, splints.length() - 1 ) ];
								if( !valid( splint ) ) return true;
								
								_SubItem( splint, 1 );
								_SubItem( rope, 1 );								

								int docTime = MAX_LIMB_HEALING_TIME - cr.Skill[ SK_DOCTOR ] - target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY;
								target.AddTimeEvent( "cte_Doc", REAL_MINUTE( CLAMP( docTime, 5, MAX_LIMB_HEALING_TIME ) ), CTE_DOC, limb );
								cr.Say( SAY_NETMSG, "Вы соорудили самодельную шину, потребуется немало времени на то что бы травма зажила." );
								
								testInfo( cr, "Time: " + MAX_LIMB_HEALING_TIME + " - " + ( cr.Skill[ SK_DOCTOR ] ) + " - " + ( target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY ) + " = " + docTime	);

								stage = MenuCripple_stage::main;
								limb = 0;
								
								return true;
							}
						}
						else
						{
							if( menu.Button( "Нечем фиксировать" ) )
							{
								string list = "";
								for( uint i = 0, l = makeshift_splints.length(); i < l; i++ )
									list += " " + itemName( makeshift_splints[i] );
								cr.Say( SAY_NETMSG, "Вам нужна верёвка или что-либо из списка: " + list );
								
								return true;
							}
						}

						if( check( PID_MEDSPLINT, "Наложить шину", "Нет мед. шины" ) )
						{
							Item@ splint = getItem( cr, PID_MEDSPLINT );
							if( !valid( splint ) ) return true;
							
							_SubItem( splint, 1 );

							int docTime = MAX_LIMB_HEALING_TIME - cr.Skill[ SK_DOCTOR ] * 2 - target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY;
							target.AddTimeEvent( "cte_Doc", REAL_MINUTE( CLAMP( docTime, 5, MAX_LIMB_HEALING_TIME ) ), CTE_DOC, limb );
							cr.Say( SAY_NETMSG, "Вы наложили медицинскую шину, потребуется некоторое время на то что травма прошла." );

							testInfo( cr, "Time: " + MAX_LIMB_HEALING_TIME + " - " + ( cr.Skill[ SK_DOCTOR ] * 2 ) + " - " + ( target.Stat[ ST_ENDURANCE ] * HEALING_ENDURANCE_DEPENDENCY ) + " = " + docTime	);
							
							stage = MenuCripple_stage::main;
							limb = 0;

							return true;
						}
						
						if( menu.Button("Назад") )
						{
							stage = MenuCripple_stage::main;
							limb = 0;

							return true;
						}
					}				
					return true;
				}
			}
			return true;
		}
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		switch( stage )
		{
			case(MenuCripple_stage::main):
				return description + "Выберите действие:";
				
			case(MenuCripple_stage::tool):
				return description + "Выберите способ лечения:"; 
		}
		
		return "[UNKNOWN STATE #" + stage + "]";
	}
}
#ifndef __HEAL_MAIN
	#define __HEAL_MAIN
	
	//import bool ProccessFirstAidSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) from "heal";
	bool ProccessFirstAidSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed )
	{
		if( targetCr.IsDead() )
		{
			cr.Say( SAY_NETMSG, "Это уже не поможет." );
			return true;
		}
		
		targetCr.StatBase[ST_VAR0] = cr.Id;
		cr.StatBase[ST_VAR0] = targetCr.Id;
		
		if( targetCr.Id != cr.Id && !targetCr.IsKnockout() && targetCr.Stat[ST_CURRENT_HP] > 0 && !alreadyAllowed && targetCr.IsPlayer() )
		{//TODO: Проверка на то, что цель не может сопротивляться (связана и т.п.)
			targetCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_ProccessFirstAidSkill" );
			targetCr.Say( SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
			targetCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да" );
			
			targetCr.Say( SAY_NETMSG, "Вас хотят осмотреть." );
			cr.Say( SAY_NETMSG, "Вы ждёте согласия пациента." );
		}
		else
		{
			answer_ProccessFirstAidSkill( targetCr, 0, "" );
		}
		
		return true;
	}
		
	void answer_ProccessFirstAidSkill( Critter& targetCr, uint answerI, string& answerS)
	{
		Critter@ cr = GetCritter( targetCr.Stat[ ST_VAR0 ] );
		if( !valid( cr ) ) return;
		
		StartMenuFA( cr, targetCr );
	}

	//import bool ProccessDoctorSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) from "heal";
	bool ProccessDoctorSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) //exported
	{
		targetCr.StatBase[ST_VAR0] = cr.Id;
		cr.StatBase[ST_VAR0] = targetCr.Id;
		
		if(targetCr.Id != cr.Id && !targetCr.IsKnockout() && targetCr.Stat[ST_CURRENT_HP] > 0 && !alreadyAllowed && targetCr.IsPlayer ())
		{
			targetCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_SelectAction" );
			targetCr.Say( SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
			targetCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да" );
			targetCr.Say( SAY_NETMSG, "Вас хотят осмотреть." );
			cr.Say( SAY_NETMSG, "Вы ждёте согласия пациента." );
		}
		else
		{
			answer_SelectAction(targetCr, 0, "");
		}
		
		return true;
	}

	void answer_SelectAction(Critter& targetCr, uint answerI, string& answerS)
	{
		Critter@ cr = GetCritter( targetCr.StatBase[ST_VAR0] );
		if( !valid( cr ) ) return;
		
		StartMenuDOC( cr, targetCr );
	}

#endif

void Prolonged_Doc( Critter& targetCr, uint16 doctime, uint16 damage )   // Export
{
	doctime = CLAMP( doctime, 900, 3600 );   // 15-60 минут
    if (damage >= 502 && damage <= 506 ) 
		targetCr.AddTimeEvent( "cte_Doc", REAL_SECOND( doctime ), CTE_DOC, damage );
}

//~run heal test_cte_Doc limb 0 0
void test_cte_Doc( Critter& cr, int limb, int, int )
{
	cr.AddTimeEvent( "cte_Doc", REAL_SECOND( 1 ), CTE_DOC, damages[CLAMP( uint( limb ), 0, damages.length() )] );
}

uint cte_Doc( Critter& cr, int identifier, uint& rate )
{
    cr.DamageBase[ rate ] = 0;
	
	string[] effects = {
		"Ваше зрение проясняется, ваша голова пришла в норму.",
		"Вашей правой руке уже значительно легче, вы снова можете ей двигать.",
		"Вашей левой руке уже значительно легче, вы снова можете ей двигать.",
		"Вашей правой ноге уже значительно легче, вы снова можете опираться на неё.",
		"Вашей левой ноге уже значительно легче, вы снова можете опираться на неё."		
	};
	
	cr.Say( SAY_NETMSG, effects[ rate - DAMAGE_EYE ] );
	ChangeCritterSpeed(cr);
	
    return 0;
}

bool ItemStimpackUse( Critter& cr, Item& item )
{
	if( !valid( item ) ) 
		return false;
	
	_SubItem( item, 1 );
	cr.AddItem( PID_HYPODERMIC_NEEDLE, 1 );
	
    int16  hpCurrent = cr.Stat[ ST_CURRENT_HP ];
    int16 hpMax = ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_STRENGTH ] * 4 + cr.Stat[ ST_ENDURANCE ] * 8 );
    int8  hpHealRate = cr.Stat[ ST_HEALING_RATE ];

    uint8 overdose = cr.GetTimeEvents( CTE_STIMOVERDOSE, null, null, null ) + cr.GetTimeEvents(CTE_SSTIMOVERDOSE, null, null, null ) * 2; // overdose

    int16 healAdd = ( hpHealRate * (5-overdose));

	_testInfo( cr, CR_TEST_MODE_COMBAT, SAY_NETMSG, overdose + " overdose with healing " + hpHealRate + " gives: " + healAdd );

    //healAdd = CLAMP( healAdd, 1, (cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ])*3);
    hpCurrent + healAdd > hpMax ? cr.StatBase[ ST_CURRENT_HP ] = hpMax : cr.StatBase[ ST_CURRENT_HP ] += healAdd;
    
    cr.Say (SAY_NETMSG, "Ваша боль отступает, а раны начинают затягиваться.");
	Map@ map = cr.GetMap();
	map.PlaySound( "Stimpack.ogg", cr.HexX, cr.HexY, 1 );
    cr.AddTimeEvent ("cte_stimoverdose", REAL_SECOND( 600 ), CTE_STIMOVERDOSE, 0 );

    // bleed
    if( hpCurrent >= ( hpMax * 0.75 ) )
    {
        ChangeStatus( cr, CR_STATUS_BLEED, healAdd * 0.5, false );
    }

    if (cr.IsNpc()) 
		return true;

	//cr.StatBase[ ST_OVERDOSE ] = CLAMP( overdose + 2, 0, 7 );

    if( overdose <= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) / 2.5 )
    {
    }
    else
    {
		cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 200 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
		cr.Say( SAY_NETMSG, "У Вас передозировка." );
    }

    // cr.Say(SAY_NETMSG, "after "+cr.StatBase[ST_OVERDOSE]);

    ChangeCritterSpeed( cr );   // pm added

    //cr.Say( SAY_NETMSG, "Вы восстановили " + healAdd + " жизней." );
    return true;
}

bool ItemPowderUse( Critter& cr, Item& item )
{
    if( cr.IsNpc() ) return true;
    if( !valid(item) ) return false;

    uint8 overdose = cr.Stat[ ST_OVERDOSE ];

    int16 hpCurrent = cr.Stat[ ST_CURRENT_HP ];
    int16 hpMax = ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_STRENGTH ] * 4 + cr.Stat[ ST_ENDURANCE ] * 8 );
    uint8 hpHealRate = cr.Stat[ ST_HEALING_RATE ];

    int16 healAdd = hpHealRate * ( 3 - overdose );
 
	_testInfo( cr, CR_TEST_MODE_COMBAT, SAY_NETMSG, overdose + " overdose with healing " + hpHealRate + " gives: " + healAdd );

	//healAdd = CLAMP( healAdd, 1, cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] );
    if( hpCurrent + healAdd > hpMax )
		cr.StatBase[ ST_CURRENT_HP ] = hpMax;
	else
		cr.StatBase[ ST_CURRENT_HP ] += healAdd;
	
    cr.Say( SAY_NETMSG, "Ваша боль отступает." );
    cr.StatBase[ ST_OVERDOSE ] = CLAMP( overdose + Random( 0, 1 ), 0, 7 );
	
    if( overdose <= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) * 2 / 5 )
    {
        
    }
    else
    {
		cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 200 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
		cr.Say( SAY_NETMSG, "У вас передозировка." );
    }

	_SubItem( item, 1 );

    return true;
}

bool __Bandage( Critter& cr, Critter@ targetCr )
{
	ProccessFirstAidSkill(cr, targetCr, false);
    return true;
}

void Prolonged_heal ( Critter& targetCr, uint16 sk )   // Export
{
    targetCr.AddTimeEvent( "cte_Heal", 1500, CTE_HEAL, sk );
}

bool UseBandage( Critter& cr, Critter& targetCr, uint16 sk )
{
	uint rate = 0;
	
	Map@ map = cr.GetMap();
	map.PlaySound( "bandage.ogg", cr.HexX, cr.HexY, 2 );
	
	rate = 1.0f + targetCr.Stat[ST_MAX_LIFE] * sk / 750.0f;
    targetCr.AddTimeEvent( "cte_Heal", 0, CTE_HEAL, rate );

    ChangeStatus( targetCr, CR_STATUS_BLEED, sk * 0.5, false );

    if( targetCr.Id != cr.Id )
		targetCr.Say( SAY_NETMSG, "Вам наложили повязки.");
	
	targetCr.ParamBase[ CR_DIRTINESS ] += targetCr.StatBase[ ST_BLEED ];
	targetCr.StatBase[ ST_BLEED ] /= 8.0f;
	
	if ( valid (cr) )
	{
		if( cr.IsPlayer() )
		{
			cr.Say( SAY_NETMSG, "Вы наложили повязку." );	
			cr.TimeoutBase[ TO_SK_FIRST_AID ] = FIRST_AID_TIMEOUT( cr );
			cr.AddScore( SCORE_DOCTOR, 1 );
		}
	}
    return true;
}

uint cte_Heal( Critter& cr, int identifier, uint& rate )
{
    int heal = cr.Stat[ST_HEALING_RATE];
    if( heal < 1 ) heal = 3;
    if( heal > int(rate) ) heal = rate;
	if( heal <= 0 ) return 0;
    
	cr.StatBase[ST_CURRENT_HP] += heal;
    
	cr.Say( SAY_NETMSG, "Вы восстановили " + heal + " жизней." );

	testInfo( cr, "Healed " + heal + " , rate = " + rate );
	
    int result = int(rate) - heal;
	if( result < 0 || cr.Stat[ ST_CURRENT_HP ] >= cr.Stat[ ST_MAX_LIFE ] )
	{
		cr.Say( SAY_NETMSG, "Кажется, от повязки больше нет проку." );
		return 0;
    }
		
	rate = uint(result);

    ChangeCritterSpeed( cr );
	
    return REAL_SECOND( 60 );
}

void ItemHypoUse (Critter& cr, Item& item) {	// Гипо
	cr.AddTimeEvent ("cte_quickheal", 0, CTE_QUICKHEAL, cr.Stat [ST_MAX_LIFE]);
	cr.Say (SAY_NETMSG, "Вы начинаете быстро регенерировать.");
	cr.Say (SAY_EMOTE, "Раны срастаются");
	cr.ParamBase[ BP_BLOOD_LOSS ] -= 30;
	cr.StatBase [ST_CURRENT_HP] += 100;
}

uint cte_quickheal (Critter& cr, int identifier, uint& rate) {

	int heal = 10;
	if( heal > int( rate ) ) heal = rate;
	bool isHealed = true;
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		if (cr.ParamBase [i] > 0) isHealed = false;
		cr.ParamBase [i] -= heal;
		if (cr.ParamBase [i] < 0) cr.ParamBase [i] = 0;
		i ++;
	}
	*/
	cr.StatBase [ST_CURRENT_HP] += heal;
	int16 aidTime = REAL_SECOND( 1 );
	
	rate -= heal;

	ChangeCritterSpeed (cr);
	
	bool repeat = true;
	if (rate <= 0) 
	{
		repeat = false;
	}
	return repeat ? aidTime : 0;
}

void ItemSupUse (Critter& cr, Item& item) 
{ // Суперстимулятор / СС
	uint8 overdose = cr.GetTimeEvents (CTE_STIMOVERDOSE, null, null, null) + cr.GetTimeEvents (CTE_SSTIMOVERDOSE, null, null, null) * 3;
	Critter@ targetCr = GetCritter( cr.Stat[ ST_VAR0 ] );
	
	_SubItem( item, 1 );
	cr.AddItem( PID_HYPODERMIC_NEEDLE, 1 );
	
	ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
	cr.AddTimeEvent ("cte_quickheal", 0, CTE_QUICKHEAL, cr.Stat[ST_MAX_LIFE]/3);
	Map@ map = cr.GetMap();
	map.PlaySound( "Stimpack.ogg", cr.HexX, cr.HexY, 1 );
	cr.Say (SAY_NETMSG, "Ваше сердце бьется учащенно. Вы чувствуете себя легче.");
	cr.Say (SAY_EMOTE, "Быстро дышит");
	cr.AddTimeEvent ("cte_sstimoverdose", REAL_SECOND( 600 ), CTE_SSTIMOVERDOSE, 0);
	
	cr.StatBase[ ST_OVERDOSE ] = CLAMP( overdose + 3, 0, 7 );
	
	if( overdose <= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) / 2.5 )
    {
    }
    else
    {
        if( Random( 0, 95 ) > cr.Stat[ ST_ENDURANCE ] * 10 ) //Допилить
        {
            /*cr.ToDead( Random( 0, 1 ) > 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );*/
            cr.Say( SAY_NETMSG, "У вас передозировка" );
			map.PlaySound( "head_damage1.ogg", cr.HexX, cr.HexY, 1 );
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 300 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
        }
        else
        {
            cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 150 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
            cr.Say( SAY_NETMSG, "Вам становится плохо.." );
			map.PlaySound( "head_damage2.ogg", cr.HexX, cr.HexY, 1 );
        }
    }
}

uint cte_stimoverdose (Critter& cr, int identifier, uint& rate) {
	return 0;
}

uint cte_sstimoverdose (Critter& cr, int identifier, uint& rate) {
	cr.StatBase[ ST_CURRENT_HP ] -= cr.Stat [ST_MAX_LIFE] / 12;
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		cr.ParamBase [i] += damage;
		i ++;
	}
	*/
	return 0;
}
