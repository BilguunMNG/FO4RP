#include "_utils.fos"

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat"; // Export
import void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set ) from "critter_status";        // pm added
import void ChangeCritterSpeed( Critter& cr ) from "speed";                                                 // pm add
import void UseDrug( Critter& cr, Item& drug ) from "drugs";

uint[] damages = { DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG, DAMAGE_POISONED };
string[] damage_states = { ", повреждены глаза", ", повреждена правая рука", ", повреждена левая рука", ", повреждена правая нога", ", повреждена левая нога", ", есть признаки отравления" };

#ifndef __HEAL__UTILS
	#define __HEAL__UTILS
	
	//#run heal test trauma items fa
	void unsafe_test( Critter& cr, int p0, int p1, int p2, string@, int[]@ ) 
	{ if( isGM( cr ) ) test( cr, p0, p1, p2 ); }

	//~run heal test trauma items fa
	void test( Critter& cr, int trauma, int items, int fa )
	{ 
		if( trauma != 0 )
		{
			cr.StatBase[ ST_CURRENT_HP ] = Random( 0, cr.Stat[ST_MAX_LIFE] );
			
			if( Random( 0, 1 ) == 0 )
				SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG );
			else
				UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG );
			
			if( Random( 0, 1 ) == 0 )
				SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER );
			else
				UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER );

			for( uint i = 0, l = damages.length(); i < l; i++ )
				cr.DamageBase[ damages[i] ] = Random( 0, 1 );
			
			cr.StatBase[ST_BLOOD_TOXIC] = Random( 0, 100 );
			cr.StatBase[ST_BLEED] = Random( 0, 100 );
		}
		
		if( items != 0 )
		{
			cr.AddItem( PID_BOOZE, 5 ); 
			cr.AddItem( PID_ANTISEPTIC, 5 ); 
			cr.AddItem( PID_SUPER_STIMPAK, 5 ); 
			cr.AddItem( PID_STIMPAK, 5 ); 
			cr.AddItem( PID_HEALING_POWDER, 5 ); 
			cr.AddItem( PID_CRAFT_L_RAGS, 5 ); 
			cr.AddItem( PID_BANDAGE, 5 );  			 
		}
		
		if( fa != 0 )
			StartMenuFA( cr, cr ); 
		else
			StartMenuDOC( cr, cr );
	}
	
	void StartMenuDOC( Critter& healer, Critter& target )
	{
		OpenMenu( healer, "DOC", MenuDOC( target ) );
	}	
	
	void StartMenuFA( Critter& healer, Critter& target )
	{
		OpenMenu( healer, "FA", MenuFA( target ) );
	}

	bool hasItem( Critter& cr, uint pid )
	{
		return valid( getItem( cr, pid ) );
	}
	
	Item@ getItem( Critter& cr, uint pid )
	{
		Item@ result = cr.GetItem( pid, -1 );
		if( valid( result ) )
			return result;

		Item@[] items;
		uint count = cr.GetItems( -1, items );
		
		uint[] fast_containers = { PID_DOCTORS_BAG, PID_FIRST_AID_KIT };
		for( uint i = 0; i < count; i++ )
		{
			uint itemPID = items[i].GetProtoId();
			
			if( itemPID == pid )
				return items[i];
			
			if( fast_containers.find( itemPID ) != -1 )
			{
				Item@[] subitems;
				uint subcount = items[i].GetItems( 0, subitems );
				
				for( uint j = 0; j < subcount; j++ )
					if( subitems[j].GetProtoId() == pid )
						return subitems[j];
			}
		}
		return null;
	}
#endif

#ifndef __HEAL_ENUMS
	#define __HEAL_ENUMS
	
	enum MenuFA_stage {
		ask = 0,
		stimulator = 1,
		antiseptik = 2,
		anestetik = 3, //В оригинальном коде этого этапа не было
		bandage = 4,
		processing = 5
	};

	enum MenuFA_stimulator {
		none = 0,
		powder = 1,
		stimpack = 2,
		superstim = 3
	};

	enum MenuFA_antiseptik {
		none = 0,
		booze = 1,
		antiseptik = 2
	};

	enum MenuFA_anestetik {
		none = 0,
		booze = 1,
		anestetik = 2
	};

	enum MenuFA_bandage {
		none = 0,
		rags = 1,
		bandage = 2
	};

#endif


class MenuFA: CenteredMenuHandler 
{	
	int stage;
	
	int stimulator;
	int antiseptik;
	int anestetik;
	int bandage;
	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	MenuFA( Critter& target )
	{
		@this.target = @target;
		
		this.stage 		= MenuFA_stage::stimulator;
		
		this.stimulator = MenuFA_stimulator::none;
		this.antiseptik = MenuFA_antiseptik::none;
		this.anestetik 	= MenuFA_anestetik::none;
		this.bandage 	= MenuFA_bandage::none;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
		
		string info = "Test info:\n"
					+ "Доктор #" + cr.Id 			+ "\n"
					+ "Пациент #" + target.Id		+ "\n"
					+ "stage #" + stage				+ "\n"
					+ "stimulator #" + stimulator	+ "\n"
					+ "antiseptik #" + antiseptik	+ "\n"
					+ "anestetik #" + anestetik		+ "\n"
					+ "bandage #" + bandage			+ "\n"
				;
					
		testInfo( cr, info );
		
		switch( stage )
		{
			case(MenuFA_stage::ask): break;
			case(MenuFA_stage::stimulator):
			{
				if( check( PID_HEALING_POWDER, "исп. порошок", "нет порошка" ) )
				{
					stimulator  = MenuFA_stimulator::powder;
					stage 		= MenuFA_stage::antiseptik;	
				}
				
				if( check( PID_STIMPAK, "исп. стимпак", "нет стимпака" ) )
				{
					stimulator  = MenuFA_stimulator::stimpack;
					stage 		= MenuFA_stage::antiseptik;	
				}

				if( check( PID_SUPER_STIMPAK, "исп. суперстим", "нет суперстима" ) )
				{
					stimulator  = MenuFA_stimulator::superstim;
					stage 		= MenuFA_stage::antiseptik;	
				}

				if( menu.Button( "без стимуляторов" ) ) 
				{
					stimulator  = MenuFA_stimulator::none;
					stage 		= MenuFA_stage::antiseptik;	
				}
				
				if( menu.Button( "медосмотр" ) )
				{
					StartMenuDOC( cr, target );
					return false;
				}
			}
			return true;
			
			case(MenuFA_stage::antiseptik):
			{
				if( check( PID_BOOZE, "исп. самогон", "нет самогона" ) )
				{
					antiseptik  = MenuFA_antiseptik::booze;
					stage 		= MenuFA_stage::anestetik;	
				}
				
				if( check( PID_ANTISEPTIC, "исп. антисептик", "нет антисептика" ) )
				{
					antiseptik  = MenuFA_antiseptik::antiseptik;
					stage 		= MenuFA_stage::anestetik;	
				}

				if( menu.Button( "без обеззараживания" ) ) 
				{
					antiseptik  = MenuFA_antiseptik::none;
					stage 		= MenuFA_stage::anestetik;	
				}
				
				if( menu.Button( "[Назад]" ) )
					stage 		= MenuFA_stage::stimulator;	
				
			}
			return true;
			
			case(MenuFA_stage::anestetik):
			{
				//В оригинальном коде этого этапа не было:
				anestetik = MenuFA_anestetik::none;
				stage 	  = MenuFA_stage::bandage;
				
			}
			return MenuUpdate( cr, menu );//skip this unimplemented stage
			
			case(MenuFA_stage::bandage):
			{ 
				if( check( PID_CRAFT_L_RAGS, "исп. тряпки", "нет тряпок" ) )
				{
					bandage  = MenuFA_bandage::rags;
					stage 	 = MenuFA_stage::processing;	
				}
				
				if( check( PID_BANDAGE, "исп. бинты", "нет бинтов" ) )
				{
					bandage  = MenuFA_bandage::bandage;
					stage 	 = MenuFA_stage::processing;	
				}

				if( menu.Button( "без перевязки" ) ) 
				{
					bandage  = MenuFA_bandage::none;
					stage 	 = MenuFA_stage::processing;
				}

				if( menu.Button( "[Назад]" ) )
					stage 	 = MenuFA_stage::antiseptik;	

			}
			return true;
			
			case(MenuFA_stage::processing):
			{
				int skill = cr.Skill[ SK_FIRST_AID ];
				string skill_info = "FA base [" + skill + "] ";
				
				if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
					skill /= 2;
				if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )
					skill /= 2;
				
				skill_info += skill;
				
				switch( stimulator )
				{
					case(MenuFA_stimulator::powder):
					{
						Item@ powder = getItem( cr, PID_HEALING_POWDER );
						if( !valid( powder ) )
							stimulator 	= MenuFA_stimulator::none;
						else
						{
							ItemPowderUse( target, powder );
							skill += 15;
							skill_info += " + powder [15]";
						}
					}
					break;
					
					case(MenuFA_stimulator::stimpack):
					{
						Item@ stimpack = getItem( cr, PID_STIMPAK );
						if( !valid( stimpack ) )
							stimulator 	= MenuFA_stimulator::none;
						else
						{
							ItemStimpackUse( target, stimpack );
							skill += 30;
							skill_info += " + stimpack [30]";
						}
					}
					break;
					
					case(MenuFA_stimulator::superstim):
					{
						Item@ superstim = getItem( cr, PID_SUPER_STIMPAK );
						if( !valid( superstim ) )
							stimulator 	= MenuFA_stimulator::none;
						else
						{
							ItemSupUse( target, superstim );
							skill += 60;
							skill_info += " + superstim [60]";
						}
					}
					break;
				}
				
				switch( antiseptik )
				{
					case(MenuFA_antiseptik::booze):
					{
						Item@ booze = getItem( cr, PID_BOOZE );
						if( !valid( booze ) )
							stimulator 	= MenuFA_antiseptik::none;
						else
						{
							_SubItem( booze, 1 ); 
							cr.AddItem( PID_BOTTLE_GLASS, 1 ); 
							
							skill += 10;
							skill_info += " + booze [10]";
						}
					}
					break;
					
					case(MenuFA_antiseptik::antiseptik):
					{
						Item@ antiseptik = getItem( cr, PID_ANTISEPTIC );
						if( !valid( antiseptik ) )
							stimulator 	= MenuFA_antiseptik::none;
						else
						{
							_SubItem( antiseptik, 1 ); 
							cr.AddItem( PID_BOTTLE_GLASS, 1 ); 
							
							skill += 30;
							skill_info += " + antiseptik [10]";
						}
					}
					break;
										
				}
				
				switch( anestetik )
				{
					case(MenuFA_anestetik::none):
					case(MenuFA_anestetik::booze):
					case(MenuFA_anestetik::anestetik):
					{
					}
					break;
				}
				
				switch( bandage )
				{
					case(MenuFA_bandage::rags):
					{
						Item@ rags = getItem( cr, PID_CRAFT_L_RAGS );
						if( !valid( rags ) )
							bandage = MenuFA_bandage::none;
						else
						{
							skill += 10;
							skill_info += " + rags [10]";
							
							_SubItem( rags, 1 );
							
							testInfo( cr, skill_info + " = " + skill );
							UseBandage( cr, target, skill ); 
						}
					}
					break;
										
					case(MenuFA_bandage::bandage):
					{ 
						Item@ item_bandage = getItem( cr, PID_BANDAGE );
						if( !valid( item_bandage ) )
							bandage = MenuFA_bandage::none;
						else
						{
							skill += 30;
							skill_info += " + bandage [30]";

							_SubItem( item_bandage, 1 );
							
							testInfo( cr, skill_info + " = " + skill );
							UseBandage( cr, target, skill ); 
						}
					}
					break;
										
					case(MenuFA_bandage::none):
					{
						cr.Say( SAY_NETMSG, "Без повязки раны быстрее заживать не будут." );
					}
					break;
				}
				
				if(    stimulator 	== MenuFA_stimulator::none
					&& antiseptik 	== MenuFA_antiseptik::none
					&& anestetik 	== MenuFA_anestetik::none
					&& bandage 		== MenuFA_bandage::none )
				{
					cr.Say( SAY_NETMSG, "Вы практически ничего не сделали." );
				}

			}
			return false;
		}
		
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		switch( stage )
		{
			case(MenuFA_stage::ask):
				return "Ждём согласия пациента.."; 
			
			case(MenuFA_stage::stimulator):
			{
				string[] stages_text = { "нет серьезных повреждений", "хорошее состояние", "удовлетворительное состояние", "плохое состояние", "тяжелое состояние", "критические состояние" };
				float[] HP_stages_percentage = { 100, 90, 80, 60, 40, 20 };
				
				if( stages_text.length() != HP_stages_percentage.length() )
				{
					return "stages_text.length("+stages_text.length()+") != HP_stages_percentage.length("+HP_stages_percentage.length()+")";
				}
				
				string state;
				float HP_percentage = target.Stat[ ST_CURRENT_HP ] * 100.0f / target.Stat[ ST_MAX_LIFE ];
				for( uint i = HP_stages_percentage.length() - 1; i >= 0; i-- )
					if( HP_percentage <= HP_stages_percentage[i] )
					{
						state = stages_text[i];
						break;
					}
				
				if( target.StatBase[ ST_BLEED ] > 0 ) 
					state += ", кровотечение";
				
				if( target.GetTimeEvents( CTE_HEAL, null, null, null ) > 0 )
					state += ", бинты наложены";

				return "Результат осмотра: " + state + ".";
			}
			
			case(MenuFA_stage::antiseptik):
				return "Применяем антисептик:"; 
			
			case(MenuFA_stage::anestetik):
				return "Применяем анестезию:"; 
			
			case(MenuFA_stage::bandage):
				return "Бинтуемся:"; 

			case(MenuFA_stage::processing):
				return "Первая помощь оказана."; 
		}
		
		return "[UNKNOWN STATE #" + stage + "]";
	}
}

class MenuDOC: CenteredMenuHandler 
{	
	Critter@ cr;
	Critter@ target;
	iDialogBox@ menu;
	
	string state;
	
	MenuDOC( Critter& target )
	{
		@this.target = @target;
	}

	//TODO: Вынести общий функционал.
	bool check( uint pid, string success, string failed )
	{
		if( hasItem( cr, pid ) )
		{
			if( menu.Button( success ) )
				return true;
		}
		else menu.Button( failed );
		
		return false;
	}
	
	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		@this.cr = @cr;
		@this.menu = @menu;
	
		if( menu.Button( "Перевязка" ) )
		{
			ProccessFirstAidSkill( cr, target, true );
			return false;
		}
		
		if( menu.Button( "смыть грязь" ) )
		{
			Cleaning( cr, target, 0, 0 );
			return true;
		}
		
		state = target.Stat[ ST_CURRENT_HP ] > 0 ? "Пульс в норме" : "Пульс слабый";

		if( damages.length() != damage_states.length() )
		{
			testInfo( cr, "damages.length("+damages.length()+") != damage_states.length("+damage_states.length()+")" );
			return false;
		}
		
		bool hasDamages = false;
		for( uint i = 0, l = damages.length(); i < l; i++ )
			if( target.Param[damages[i]] != 0 )
			{
				state += damage_states[i]; 
				hasDamages = true;
			}
			
		if( cr.StatBase[ST_BLOOD_TOXIC] > 0 )
			state += ", есть признаки заражения крови";
		
		if( cr.StatBase[ST_BLEED] > 0 )
			state += ", кровотечение";
		
		state += ".";
		
		bool knife = ( _CritCountItem( cr, PID_KNIFE ) > 0 || _CritCountItem( cr, PID_COMBAT_KNIFE ) > 0 );

		if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
		{
			state += "\n" + "Пуля или осколок в ране, необходимо вынуть перед дальнейшими действиями.";
			if( menu.Button( "Извлечение" ) )
			{//submenu 'bullet':
				cr.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_DOCTOR_BULLET" );
					cr.Say( SAY_DIALOGBOX_TEXT, "" + state );
				if( _CritCountItem( cr, PID_MEDCLIP ) > 0 ) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "щипцами" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет шипцов" );
				if( _CritCountItem( cr, PID_MULTI_TOOL ) > 0 ) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "мультитулом" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет клещей" );
				if( knife ) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "ножом" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "нет ножа" );
				
				return false;
			}
			return true;
		}

		if( FLAG( target.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )
		{
			state += "\n" + "Сложная рана, необходимо закрыть ее.";
			
			if( menu.Button( "Операция" ) )
			{//submenu 'heavy':
				cr.ShowScreen( SCREEN_DIALOGBOX, 2, "answer_DOCTOR_HEAVY" );
					cr.Say( SAY_DIALOGBOX_TEXT, "" + state);
				if( _CritCountItem( cr, PID_MEDNEEDLE ) > 0 && _CritCountItem( cr, PID_MEDTHREAD ) > 0 ) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "игла + нитки" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет иглы и ниток" );
				if( knife && ( _CritCountItem( cr, PID_LIGHTER ) > 0  || _CritCountItem( cr, PID_FIREPLACE_TOKEN ) > 0 ) )
					cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нож + зажигалка" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет ножа и зажигалки" );
				
				return false;
			}
			return true;
		}
			
		if( hasDamages )
		{ //submenu 'cripple':
			if( menu.Button( "Травмы" ) )
			{
				cr.ShowScreen( SCREEN_DIALOGBOX, 7, "answer_DOCTOR_CRIPPLE" );
				cr.Say( SAY_DIALOGBOX_TEXT, "" + state + ".");

				if (target.ParamBase[ DAMAGE_EYE ] >0) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "лечить глаза" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "глаза в порядке" );
				if (target.ParamBase[ DAMAGE_RIGHT_ARM ] >0) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "лечить п.руку" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "п.рука в порядке" );
				if (target.ParamBase[ DAMAGE_LEFT_ARM ] >0) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "лечить л.руку" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "л.рука в порядке" );
				if (target.ParamBase[ DAMAGE_RIGHT_LEG ] >0) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "лечить п.ногу" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "п.нога в порядке" );
				if (target.ParamBase[ DAMAGE_LEFT_LEG ] >0) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), "лечить л.ногу" );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), "л.нога в порядке" );
				if (target.ParamBase[ ST_BLOOD_TOXIC ] >0) 
					cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), "таблетки от зар." );
				else 
					cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), "заражения нет" );
				if (target.StatBase[ ST_POISONING_LEVEL ] >0)
				{
					if (_CritCountItem( cr, PID_ANTIDOTE )>0) 
						cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), "дать антидот" );
					else 
						cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), "нет антидота" );
				}
				else
				{
					cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), "отравления нет" );
				}
				return false;
			}
		}

		state += "\n" + "Дальше может потребоваться только перевязка.";
		return true;
	}

	string@ Description( Critter& cr ) 
	{
		return state;
	}
}

#ifndef __HEAL_MAIN
	#define __HEAL_MAIN
	
	//import bool ProccessFirstAidSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) from "heal";
	bool ProccessFirstAidSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed )
	{
		if( targetCr.IsDead() )
		{
			cr.Say( SAY_NETMSG, "Это уже не поможет." );
			return true;
		}
		
		targetCr.StatBase[ST_VAR0] = cr.Id;
		cr.StatBase[ST_VAR0] = targetCr.Id;
		
		if( targetCr.Id != cr.Id && !targetCr.IsKnockout() && targetCr.Stat[ST_CURRENT_HP] > 0 && !alreadyAllowed && targetCr.IsPlayer() )
		{//TODO: Проверка на то, что цель не может сопротивляться (связана и т.п.)
			targetCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_ProccessFirstAidSkill" );
			targetCr.Say( SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
			targetCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да" );
			
			targetCr.Say( SAY_NETMSG, "Вас хотят осмотреть." );
			cr.Say( SAY_NETMSG, "Вы ждёте согласия пациента." );
		}
		else
		{
			answer_ProccessFirstAidSkill( targetCr, 0, "" );
		}
		
		return true;
	}
		
	void answer_ProccessFirstAidSkill( Critter& targetCr, uint answerI, string& answerS)
	{
		Critter@ cr = GetCritter( targetCr.Stat[ ST_VAR0 ] );
		if( !valid( cr ) ) return;
		
		StartMenuFA( cr, targetCr );
	}

	//import bool ProccessDoctorSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) from "heal";
	bool ProccessDoctorSkill( Critter& cr, Critter& targetCr, bool alreadyAllowed ) //exported
	{
		targetCr.StatBase[ST_VAR0] = cr.Id;
		cr.StatBase[ST_VAR0] = targetCr.Id;
		
		if(targetCr.Id != cr.Id && !targetCr.IsKnockout() && targetCr.Stat[ST_CURRENT_HP] > 0 && !alreadyAllowed && targetCr.IsPlayer ())
		{
			targetCr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_SelectAction" );
			targetCr.Say( SAY_DIALOGBOX_TEXT, "Вас хотят осмотреть, согласиться?");
			targetCr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Да" );
			targetCr.Say( SAY_NETMSG, "Вас хотят осмотреть." );
			cr.Say( SAY_NETMSG, "Вы ждёте согласия пациента." );
		}
		else
		{
			answer_SelectAction(targetCr, 0, "");
		}
		
		return true;
	}

	void answer_SelectAction(Critter& targetCr, uint answerI, string& answerS)
	{
		Critter@ cr = GetCritter( targetCr.StatBase[ST_VAR0] );
		if( !valid( cr ) ) return;
		
		StartMenuDOC( cr, targetCr );
	}

#endif

//TODO: Q3 menu this ->
void answer_DOCTOR_CRIPPLE( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;
	if( answerI == 5 )
	{	
		if (_CritCountItem( player, PID_PILLS )>0)  //Снятие заражения крови
			{
			player.DeleteItem( PID_PILLS, 1 );
			player.AddItem(PID_BOTTLE_EMPTY, 1); //выдаем спасенную пластиковую тару
			targetCr.StatBase[ ST_CURRENT_HP ] -= targetCr.StatBase[ ST_BLOOD_TOXIC ];
			targetCr.StatBase[ ST_BLOOD_TOXIC ] = 0;
			targetCr.Say( SAY_EMOTE, "Закидывает горсть таблеток в рот" );
			ChangeStatus( targetCr, CR_STATUS_BLOOD_TOXIC, 0, false );
			}
		player.Say( SAY_NETMSG, "Уровень заражения: " + targetCr.StatBase[ST_BLOOD_TOXIC] + "." );
		ProccessDoctorSkill(player, targetCr, true);
		return;
	}
    else if( answerI == 6 )
    {	
		if (_CritCountItem( player, PID_ANTIDOTE )>0)
			{
			player.DeleteItem( PID_ANTIDOTE, 1 );
			player.AddItem(PID_BOTTLE_GLASS, 1); //выдаем спасенную стеклянную тару
			targetCr.StatBase[ ST_POISONING_LEVEL ] = CLAMP( targetCr.StatBase[ ST_POISONING_LEVEL ] - 50, 0, 1000 );
			}
	    ProccessDoctorSkill(player, targetCr, true);
		return;
    }
	else
	{
		string state;
		uint16 damage = answerI + 502;
		player.StatBase[ ST_VAR1 ] = damage;
	
		uint[] rates;
		uint8 countTimes = targetCr.GetTimeEvents( CTE_DOC, null, null, rates );
		if( countTimes > 0 )
		{
			for( uint8 i = 0; i < countTimes; i++ )
			{
				if( rates[ i ] == damage )
				{
					player.Say( SAY_NETMSG, "Эта часть тела уже лечится." );
					ProccessDoctorSkill(player, targetCr, true);
					return;
				}
			}
		}

		if( targetCr.DamageBase[ damage ] == 0 )
		{
			player.Say( SAY_NETMSG, "Эта часть тела не нуждается в лечении." );
			ProccessDoctorSkill(player, targetCr, true);
			return;
		}

		if ( answerI == 0)
		{
			state="Необходимо наложить тугую повязку.";
			player.ShowScreen( SCREEN_DIALOGBOX, 2, "answer_DOCTOR_CRIPPLE_EYE" );
			player.Say( SAY_DIALOGBOX_TEXT, ""+state);
			if (_CritCountItem( player, PID_CRAFT_L_RAGS )>0) 
				player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "исп.тряпки" );
			else 
				player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет тряпок" );
			if (_CritCountItem( player, PID_BANDAGE )>0) 
				player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп.бинты" );
			else 
				player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет бинтов" );
		}
		else
		{
			state="Необходимо правильно вправить и зафиксировать конечность.";
			bool plank = (_CritCountItem( player, PID_SPEAR )>0) || 
			(_CritCountItem( player, PID_SHARP_SPEAR )>0) || 
			(_CritCountItem( player, PID_SHARPENED_POLE )>0) || 
			(_CritCountItem( player, PID_CLUB )>0) || 
			(_CritCountItem( player, PID_WOOD_PLANK )>0) || 
			(_CritCountItem( player, PID_IRON_PROD )>0) || 
			(_CritCountItem( player, PID_FIREWOOD )>0) || 
			(_CritCountItem( player, PID_WOOD_PLANK )>0);
			player.ShowScreen( SCREEN_DIALOGBOX, 2, "answer_DOCTOR_CRIPPLE_LIMB" );
			player.Say( SAY_DIALOGBOX_TEXT, ""+state);
			if (_CritCountItem( player, PID_MEDSPLINT )>0) 
				player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "мед.шина" );
			else 
				player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет шины" );
			if (plank && _CritCountItem( player, PID_ROPE )>0) 
				player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "веревка+деревяшка" );
			else 
				player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет веревки и др." );
		}
	}	
}

void answer_DOCTOR_CRIPPLE_EYE( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;
    if( answerI == 0 )
    {
		if (_CritCountItem( player, PID_CRAFT_L_RAGS )>0) 
			player.DeleteItem( PID_CRAFT_L_RAGS, 1 );
		else return;
	}
	if( answerI == 1 )
    {
		if (_CritCountItem( player, PID_BANDAGE )>0) 
			player.DeleteItem( PID_BANDAGE, 1 );
		else return;
	}

	int damage = player.StatBase[ ST_VAR1 ];
	uint docTime = 10* (400 - answerI*100 - player.Skill[ SK_DOCTOR ] - ( targetCr.Stat[ ST_ENDURANCE ] * 10 ));
	docTime = CLAMP( docTime, 900, 3600 );   // 15-60 минут
	if (damage >= 502 && damage <= 506 ) 
		targetCr.AddTimeEvent( "cte_Doc", REAL_SECOND( docTime ), CTE_DOC, damage );
	else 
	{
		player.Say( SAY_NETMSG, "Ошибка, обратитесь к разработчикам." ); 
		return;
	}
    player.TimeoutBase[ TO_SK_DOCTOR ] = DOCTOR_TIMEOUT( player );
    player.AddScore( SCORE_DOCTOR, 1 );
    player.Say( SAY_NETMSG, "Вы наложили тугую повязку, остается только ждать." );
}

void answer_DOCTOR_CRIPPLE_LIMB( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;
    if( answerI == 0 )
    {
		if (_CritCountItem( player, PID_MEDSPLINT )>0) 
			player.DeleteItem( PID_MEDSPLINT, 1 );
		else 
		{
			player.Say( SAY_NETMSG, "У вас нет медицинской шины." ); 
			return;
		}
	}
	if( answerI == 1 )
    {
		uint[] planks = { PID_SHARPENED_POLE, PID_CLUB, PID_WOOD_PLANK, PID_IRON_PROD, PID_FIREWOOD };
		int plank = -1;

		for( uint i = 0, l = planks.length(); i < l; i++ )
			if( _CritCountItem( player, planks[i] ) > 0 )
			{
				plank = i;
				break;
			}
		
		if ( plank > -1 && _CritCountItem( player, PID_ROPE )>0 ) 
		{
			player.DeleteItem( PID_ROPE, 1 );
			player.DeleteItem( planks[plank], 1 );
		}
		else 
		{
			player.Say( SAY_NETMSG, "Нужна веревка и какая-нибудь палка или планка." );
			return;
		}
	}

	int damage = player.StatBase[ ST_VAR1 ];
	uint docTime = 10 * ( 400 + answerI * 100 - player.Skill[ SK_DOCTOR ] - ( targetCr.Stat[ ST_ENDURANCE ] * 10 ) );
	docTime = CLAMP( docTime, 900, 3600 );   // 15-60 минут
	if (damage >= 502 && damage <= 506 ) targetCr.AddTimeEvent( "cte_Doc", REAL_SECOND( docTime ), CTE_DOC, damage );
	else {player.Say( SAY_NETMSG, "Ошибка, обратитесь к разработчикам." ); return;}
    player.TimeoutBase[ TO_SK_DOCTOR ] = DOCTOR_TIMEOUT( player );
    player.AddScore( SCORE_DOCTOR, 1 );
    player.Say( SAY_NETMSG, "Вы зафиксировали конечность, остается только ждать." );
}

void answer_FIRSTAID_TO_DOCTOR( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;
    if( answerI == 0 )
    {
        ProccessDoctorSkill(player, targetCr, false);
		return;
    }
    if( answerI == 1 && ( _CritCountItem( player, PID_HEALING_POWDER ) > 0 ) )
    {
		Item@ item = player.GetItem( PID_HEALING_POWDER, -1 );
		ItemPowderUse( targetCr, item);
    }
    if( answerI == 2 && ( _CritCountItem( player, PID_STIMPAK ) > 0) )
    {
		Item@ item = player.GetItem( PID_STIMPAK, -1 );
		ItemStimpackUse( targetCr, item );
    }
    if( answerI == 3 && ( _CritCountItem( player, PID_SUPER_STIMPAK ) > 0 ) )
    {
		Item@ item = player.GetItem( PID_SUPER_STIMPAK, -1 );
		ItemSupUse( targetCr, item );
    }
	ProccessFirstAidSkill( player, targetCr, true);
}

void answer_FIRSTAID_TO_UNBANDAGE( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;
    if( answerI == 0 )
    {
		player.Say( SAY_NETMSG, "Вы сняли бинты." );
        targetCr.EraseTimeEvents( CTE_HEAL );
    }
    if( answerI == 1 && ( _CritCountItem( player, PID_HEALING_POWDER ) > 0 ) )
    {
		Item@ item = player.GetItem( PID_HEALING_POWDER, -1 );
		ItemPowderUse( targetCr, item );
    }
    if( answerI == 2 && ( _CritCountItem( player, PID_STIMPAK ) > 0 ) )
    {
		Item@ item = player.GetItem( PID_STIMPAK, -1 );
		ItemStimpackUse( targetCr, item );
    }
	ProccessFirstAidSkill( player, targetCr, true );
}

void Prolonged_Doc( Critter& targetCr, uint16 doctime, uint16 damage )   // Export
{
	doctime = CLAMP( doctime, 900, 3600 );   // 15-60 минут
    if (damage >= 502 && damage <= 506 ) 
		targetCr.AddTimeEvent( "cte_Doc", REAL_SECOND( doctime ), CTE_DOC, damage );
}

uint cte_Doc( Critter& cr, int identifier, uint& rate )
{
    cr.DamageBase[ rate ] = 0;
	switch( rate )
        {
        case DAMAGE_EYE:	
			cr.Say( SAY_NETMSG, "Кажется глазам возвращается чувствительность." );	
			break;
		case DAMAGE_RIGHT_ARM:	
			cr.Say( SAY_NETMSG, "Кажется вы снова можете свободно двигать правой рукой." );	
			break;
		case DAMAGE_LEFT_ARM:	
			cr.Say( SAY_NETMSG, "Кажется вы снова можете свободно двигать левой рукой." );	
			break;
		case DAMAGE_RIGHT_LEG:	
			cr.Say( SAY_NETMSG, "Кажется вы снова можете свободно двигать правой ногой." );	
			break;
		case DAMAGE_LEFT_LEG:	
			cr.Say( SAY_NETMSG, "Кажется вы снова можете свободно двигать левой ногой." );	
			break;
		}
	ChangeCritterSpeed(cr);
    return 0;
}

import void Cleaning( Critter& player, Critter& target, uint soap_pid, int water_source ) from "main";

void answer_DOCTOR_HEAVY( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;

    if( answerI == 0 )
    {
		if(_CritCountItem( player, PID_MEDNEEDLE )>0 && _CritCountItem( player, PID_MEDTHREAD )>0) 
			player.StatBase[ ST_VAR1 ] = 1;
		else 
		{
			ProccessDoctorSkill(player, targetCr, true);
			return;
		}
    }
    if( answerI == 1 )
    {
		bool knife = ( _CritCountItem( player, PID_KNIFE ) > 0 || _CritCountItem( player, PID_COMBAT_KNIFE ) > 0 );
		if ( ( knife ) && ( _CritCountItem(player,PID_LIGHTER ) > 0 || _CritCountItem( player, PID_FIREPLACE_TOKEN ) > 0 ) ) 
			player.StatBase[ ST_VAR1 ] = 2;
		else 
		{
			ProccessDoctorSkill( player, targetCr, true ); 
			return;
		}
    }

	bool booze = ( _CritCountItem( player, PID_BOOZE ) > 0 );
	bool anti = ( _CritCountItem( player, PID_ANTISEPTIC ) > 0 );

	player.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_DOCTOR_HEAVY_2" );
    player.Say( SAY_DIALOGBOX_TEXT, "Применяем антисептик:");

	if (booze) 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "исп. Самогон" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет Самогона" );
	if (anti) 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. Антисептик" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет Антисептика" );

	player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "без обеззараживания" );
}

void answer_DOCTOR_HEAVY_2( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;

	bool booze = ( _CritCountItem( player, PID_BOOZE ) > 0 );
	bool anti = ( _CritCountItem( player, PID_ANTISEPTIC ) > 0) ;
	bool anest = ( _CritCountItem( player, PID_ANESTETIC ) > 0 );

    if( answerI == 0 )
    {
		if(booze) 
			player.StatBase[ ST_VAR2 ] = 1;
		else 
		{
			ProccessDoctorSkill( player, targetCr, true ); 
			return;
		}
    }
    if( answerI == 1 )
    {
		if ( _CritCountItem( player, PID_ANTISEPTIC ) > 0 ) 
			player.StatBase[ ST_VAR2 ] = 2;
		else 
		{
			ProccessDoctorSkill(player, targetCr, true); 
			return;
		}
    }
    if( answerI == 2 )
    {
		player.StatBase[ ST_VAR2 ] = 3;
    }


	player.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_DOCTOR_HEAVY_3" );
    player.Say( SAY_DIALOGBOX_TEXT, "Применяем анестезию:");

	if (anest) 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "исп. Анестетик" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет Анестетика" );

	if (booze) 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. Самогон" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет Самогона" );

	player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "без анестезии" );
}

void answer_DOCTOR_HEAVY_3( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;

	bool booze = (_CritCountItem( player, PID_BOOZE )>0);
	bool anti = (_CritCountItem( player, PID_ANTISEPTIC )>0);
	bool anest = (_CritCountItem( player, PID_ANESTETIC )>0);

	
    if( answerI == 0 )
    {
		if( anest )
		{
			player.StatBase[ ST_VAR3 ] = 1;
			player.DeleteItem( PID_ANESTETIC, 1 );
			player.AddItem( PID_BOTTLE_EMPTY, 1 ); //возвращаем пустую тару
		}
		else 
		{
			ProccessDoctorSkill( player, targetCr, true ); 
			return;
		}
    }
	
    if( answerI == 1 )
    {
		if( booze )
		{
			player.StatBase[ ST_VAR3 ] = 2;
			player.DeleteItem( PID_BOOZE, 1 ); 
			player.AddItem( PID_BOTTLE_GLASS, 1 );
		}
		else 
		{
			ProccessDoctorSkill( player, targetCr, true ); 
			return;
		}
    }
	
    if( answerI == 2 )
    {
		player.StatBase[ ST_VAR3 ] = 3;
    }

	int damage = 0;
	uint16 sk = player.Skill[ SK_DOCTOR ] + 30 * ( 2 - player.StatBase[ ST_VAR1 ] );
	
	damage += 2 + Random( 3, 9 ) * ( player.StatBase[ ST_VAR1 ] - 1 ) * player.StatBase[ ST_VAR3 ];
	damage += Random( 1, 3 ) * ( player.StatBase[ ST_VAR3 ] - 1 );

	int safeDirt = 5; //Уровень "безопасной грязи".

	if ( player.StatBase[ ST_VAR2 ] == 1) 
	{
		safeDirt += 10;
		player.DeleteItem( PID_BOOZE, 1 ); 
		player.AddItem( PID_BOTTLE_GLASS, 1 );
	}
	if ( player.StatBase[ ST_VAR2 ] == 2) 
	{
		safeDirt += 20;
		player.DeleteItem( PID_ANTISEPTIC, 1 );
		player.AddItem( PID_BOTTLE_EMPTY, 1 );
	}
		
	int dirt = player.ParamBase[ CR_DIRTINESS ];
	if( targetCr.Id != player.Id )
		dirt += targetCr.ParamBase[ CR_DIRTINESS ]; //Грязь доктора учитывается, своя дважды не стакается.
	if( player.StatBase[ ST_VAR1 ] == 1 )
		dirt *= 0.5; //Грязь делится пополам, если прижигаешься.
	
	// //Бонусы и штрафы от удачи.
	// //safeDirt += 2 * ( 5 - targetCr.Stat[ST_LUCK] ); //Временно отключил, что бы не ныли.
	// if( dirt >= Random( safeDirt, 100 ) ) 
	// {
		// player.Say( SAY_NETMSG, "Вы занесли грязь в раны." );
		// ChangeStatus( targetCr, CR_STATUS_BLOOD_TOXIC, 0, true );
	// }
	
	targetCr.StatBase[ ST_CURRENT_HP ] -= damage;

	if( HealingProcessSucceed( sk, player.Stat[ST_LUCK] ) )
	{
		ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
		player.Say( SAY_NETMSG, "Вы " + ( player.StatBase[ ST_VAR1 ] == 1 ? "зашили" : "прижгли" ) + " рану." );
	}
	else 
		player.Say( SAY_NETMSG, "У вас не вышло закрыть рану." );
    
	ProccessFirstAidSkill(player, targetCr, true);
}

void answer_DOCTOR_BULLET( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;

    if( answerI == 0 )
    {
		if(_CritCountItem( player, PID_MEDCLIP )>0) 
			player.StatBase[ ST_VAR1 ] = 1;
		else 
		{
			ProccessDoctorSkill(player, targetCr, true); 
			return;
		}
    }
    if( answerI == 1 )
	{
		if (_CritCountItem( player, PID_MULTI_TOOL )>0) 
			player.StatBase[ ST_VAR1 ] = 2;
		else 
		{
			ProccessDoctorSkill(player, targetCr, true); 
			return;
		}
	}
    if( answerI == 2 )
    {
		bool knife = (_CritCountItem( player, PID_KNIFE )>0 || _CritCountItem( player, PID_COMBAT_KNIFE )>0);
		if (knife) 
			player.StatBase[ ST_VAR1 ] = 3;
		else 
		{
			ProccessDoctorSkill(player, targetCr, true); 
			return;
		}
    }

	bool booze = (_CritCountItem( player, PID_BOOZE )>0);
	bool anti = (_CritCountItem( player, PID_ANTISEPTIC )>0);

	player.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_DOCTOR_BULLET_2" );
    player.Say( SAY_DIALOGBOX_TEXT, "Применяем антисептик:");

	if (booze) 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "исп. Самогон" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет Самогона" );

	if (anti) 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. Антисептик" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет Антисептика" );

	player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "без обеззараживания" );
}

void answer_DOCTOR_BULLET_2( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;

	bool booze = (_CritCountItem( player, PID_BOOZE )>0);
	bool anti = (_CritCountItem( player, PID_ANTISEPTIC )>0);
	bool anest = (_CritCountItem( player, PID_ANESTETIC )>0);

    if( answerI == 0 )
    {
		if(booze) player.StatBase[ ST_VAR2 ] = 1;
		else {ProccessDoctorSkill(player, targetCr, true); return;}
    }
    if( answerI == 1 )
    {
		if (_CritCountItem( player, PID_ANTISEPTIC )>0) player.StatBase[ ST_VAR2 ] = 2;
		else {ProccessDoctorSkill(player, targetCr, true); return;}
	}
    if( answerI == 2 )
    {
		player.StatBase[ ST_VAR2 ] = 3;
    }


	player.ShowScreen( SCREEN_DIALOGBOX, 3, "answer_DOCTOR_BULLET_3" );
    player.Say( SAY_DIALOGBOX_TEXT, "Применяем анестезию:");

	if (anest) 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "исп. Анестетик" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "нет Анестетика" );

	if (booze) 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "исп. Самогон" );
	else 
		player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "нет Самогона" );

	player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "без анестезии" );
}

void answer_DOCTOR_BULLET_3( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
    if( targetCr is null )
        return;

	bool booze = (_CritCountItem( player, PID_BOOZE )>0);
	bool anti = (_CritCountItem( player, PID_ANTISEPTIC )>0);
	bool anest = (_CritCountItem( player, PID_ANESTETIC )>0);

    if( answerI == 0 )
    {
		if( anest ) 
		{
			player.StatBase[ ST_VAR3 ] = 1;
			player.DeleteItem( PID_ANESTETIC, 1 );
			player.AddItem(PID_BOTTLE_EMPTY, 1 ); //возвращаем спасенную пластиковую тару
		}
		else 
		{
			ProccessDoctorSkill( player, targetCr, true ); 
			return;
		}
    }
	
    if( answerI == 1 )
    {
		if( booze )
		{
			player.StatBase[ ST_VAR3 ] = 2;
			player.DeleteItem( PID_BOOZE, 1 );
			player.AddItem( PID_BOTTLE_GLASS, 1 );
		}
		else
		{
			ProccessDoctorSkill( player, targetCr, true ); 
			return;
		}
    }
	
    if( answerI == 2 )
    {
		player.StatBase[ ST_VAR3 ] = 3;
    }

	int damage = 0;
	uint16 chance = 15;
	uint16 sk = player.Skill[ SK_DOCTOR ] + 30*(3-player.StatBase[ ST_VAR1 ]);
	
	damage += Random( 1, 5 ) * player.StatBase[ ST_VAR1 ];
	damage += Random( 1, 5 ) * ( player.StatBase[ ST_VAR3 ] - 1 );

	int safeDirt = 5;
	
	if( player.StatBase[ ST_VAR2 ] == 1 )
	{
		safeDirt += 10;
		player.DeleteItem( PID_BOOZE, 1 );
		player.AddItem( PID_BOTTLE_GLASS, 1 );
	}
	if( player.StatBase[ ST_VAR2 ] == 2 )
	{
		safeDirt += 20;
		player.DeleteItem( PID_ANTISEPTIC, 1 );
		player.AddItem( PID_BOTTLE_EMPTY, 1 );//возвращаем спасенную пластиковую тару
	}
	
	int dirt = player.ParamBase[ CR_DIRTINESS ];
	if( targetCr.Id != player.Id )
		dirt += targetCr.ParamBase[ CR_DIRTINESS ]; //Грязь доктора учитывается, своя дважды не стакается.
	
	//Бонусы и штрафы от удачи.
	//safeDirt += 2 * ( 5 - targetCr.Stat[ST_LUCK] ); //Временно отключил, что бы не ныли.
	// if( dirt >= Random( safeDirt, 100 ) ) 
	// {
		// player.Say( SAY_NETMSG, "Вы занесли грязь в раны." );
		// ChangeStatus( targetCr, CR_STATUS_BLOOD_TOXIC, 0, true );
	// }
	
	targetCr.StatBase[ ST_CURRENT_HP ] -= damage;

	if( HealingProcessSucceed( sk, player.Stat[ST_LUCK] ) )
	{
		ChangeStatus( targetCr, CR_STATUS_BULLET_OVER, 0, false );
		player.Say( SAY_NETMSG, "Вы вытащили пулю из раны." );
	}
	else 
		player.Say( SAY_NETMSG, "У вас не вышло извлечь пулю." );
    
	ProccessFirstAidSkill(player, targetCr, true);
	return;
}

bool ItemStimpackUse( Critter& cr, Item& item )
{
	if( !valid( item ) ) 
		return false;
	
	_SubItem( item, 1 );
	cr.AddItem( PID_HYPODERMIC_NEEDLE, 1 );
	
    int16  hpCurrent = cr.Stat[ ST_CURRENT_HP ];
    int16 hpMax = ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_STRENGTH ] * 4 + cr.Stat[ ST_ENDURANCE ] * 8 );
    int8  hpHealRate = cr.Stat[ ST_HEALING_RATE ];

    uint8 overdose = cr.GetTimeEvents (CTE_STIMOVERDOSE, null, null, null) + cr.GetTimeEvents (CTE_SSTIMOVERDOSE, null, null, null) * 3; // overdose

    int16 healAdd = ( hpHealRate * (5-overdose));
    healAdd = CLAMP( healAdd, 1, (cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ])*3);
    hpCurrent + healAdd > hpMax ? cr.StatBase[ ST_CURRENT_HP ] = hpMax : cr.StatBase[ ST_CURRENT_HP ] += healAdd;
    
    cr.Say (SAY_NETMSG, "Ваша боль отступает, а раны начинают затягиваться.");
	Map@ map = cr.GetMap();
	map.PlaySound( "Stimpack.ogg", cr.HexX, cr.HexY, 1 );
    cr.AddTimeEvent ("cte_stimoverdose", 3600, CTE_STIMOVERDOSE, 0);

    // bleed
    if( hpCurrent >= ( hpMax * 0.75 ) )
    {
        ChangeStatus( cr, CR_STATUS_BLEED, healAdd * 0.5, false );
    }

    if (cr.IsNpc()) 
		return true;

    if( overdose <= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) / 2.5 )
    {
        overdose++;
        overdose = CLAMP( overdose, 0, 7 );
        cr.StatBase[ ST_OVERDOSE ] |= overdose;
    }
    else
    {
        if( Random( 0, 95 ) > cr.Stat[ ST_LUCK ] * 10 )
        {
            cr.ToDead( Random( 0, 1 ) > 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );
            cr.Say( SAY_NETMSG, "Вы умерли от передозировки." );
            return true;
        }
        else
        {
            cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 200 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
            cr.Say( SAY_NETMSG, "У Вас передозировка." );
        }
    }

    // cr.Say(SAY_NETMSG, "after "+cr.StatBase[ST_OVERDOSE]);

    ChangeCritterSpeed( cr );   // pm added

    //cr.Say( SAY_NETMSG, "Вы восстановили " + healAdd + " жизней." );
    return true;
}

bool ItemPowderUse( Critter& cr, Item& item )
{
    if( cr.IsNpc() ) return true;
    if( !valid(item) ) return false;

    uint8 overdose = ( ( cr.Stat[ ST_OVERDOSE ] >> 4 ) & 0x4 );

    int16 hpCurrent = cr.Stat[ ST_CURRENT_HP ];
    int16 hpMax = ( cr.Stat[ ST_MAX_LIFE ] + cr.Stat[ ST_STRENGTH ] * 4 + cr.Stat[ ST_ENDURANCE ] * 8 );
    uint8 hpHealRate = cr.Stat[ ST_HEALING_RATE ];

    int16 healAdd = hpHealRate * ( 3 - overdose );
    healAdd = CLAMP( healAdd, 1, cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] );
    if( hpCurrent + healAdd > hpMax )
		cr.StatBase[ ST_CURRENT_HP ] = hpMax;
	else
		cr.StatBase[ ST_CURRENT_HP ] += healAdd;
	
    cr.Say( SAY_NETMSG, "Ваша боль отступает." );
    
    if( overdose <= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) * 2 / 5 )
    {
        overdose = CLAMP( overdose++, 0, 7 );
    }
    else
    {
		cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 200 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
		cr.Say( SAY_NETMSG, "У вас передозировка." );
    }

	_SubItem( item, 1 );

    return true;
}

bool __Bandage( Critter& cr, Critter@ targetCr )
{
	ProccessFirstAidSkill(cr, targetCr, false);
    return true;
}

void Prolonged_heal ( Critter& targetCr, uint16 sk )   // Export
{
    targetCr.AddTimeEvent( "cte_Heal", 1500, CTE_HEAL, sk );
}

bool UseBandage( Critter& cr, Critter& targetCr, uint16 sk )
{
	uint rate = 0;
	
	Map@ map = cr.GetMap();
	map.PlaySound( "bandage.ogg", cr.HexX, cr.HexY, 2 );
	
	rate = 1.0f + targetCr.Stat[ST_MAX_LIFE] * sk / 750.0f;
    targetCr.AddTimeEvent( "cte_Heal", 0, CTE_HEAL, rate );

    ChangeStatus( targetCr, CR_STATUS_BLEED, sk * 0.5, false );

    if( targetCr.Id != cr.Id )
		targetCr.Say( SAY_NETMSG, "Вам наложили повязки.");
	
	targetCr.ParamBase[ CR_DIRTINESS ] += targetCr.StatBase[ ST_BLEED ];
	targetCr.StatBase[ ST_BLEED ] /= 8.0f;
	
	if ( valid (cr) )
	{
		if( cr.IsPlayer() )
		{
			cr.Say( SAY_NETMSG, "Вы наложили повязку." );	
			cr.TimeoutBase[ TO_SK_FIRST_AID ] = FIRST_AID_TIMEOUT( cr );
			cr.AddScore( SCORE_DOCTOR, 1 );
		}
	}
    return true;
}

uint cte_Heal( Critter& cr, int identifier, uint& rate )
{
    int heal = cr.Stat[ST_HEALING_RATE];
    if( heal < 1 ) heal = 3;
    if( heal > int(rate) ) heal = rate;
	if( heal <= 0 ) return 0;
    
	cr.StatBase[ST_CURRENT_HP] += heal;
    
	cr.Say( SAY_NETMSG, "Вы восстановили " + heal + " жизней." );

	testInfo( cr, "Healed " + heal + " , rate = " + rate );
	
    int result = int(rate) - heal;
	if( result < 0 || cr.Stat[ ST_CURRENT_HP ] >= cr.Stat[ ST_MAX_LIFE ] )
	{
		cr.Say( SAY_NETMSG, "Кажется, от повязки больше нет проку." );
		return 0;
    }
		
	rate = uint(result);

    ChangeCritterSpeed( cr );
	
    return REAL_SECOND( 60 );
}

void ItemHypoUse (Critter& cr, Item& item) {	// Гипо
	cr.AddTimeEvent ("cte_quickheal", 0, CTE_QUICKHEAL, cr.Stat [ST_MAX_LIFE]);
	cr.Say (SAY_NETMSG, "Вы начинаете быстро регенерировать.");
	cr.Say (SAY_EMOTE, "Раны срастаются");
	cr.ParamBase[ BP_BLOOD_LOSS ] -= 30;
	cr.StatBase [ST_CURRENT_HP] += 100;
}

uint cte_quickheal (Critter& cr, int identifier, uint& rate) {

	int heal = 10;
	if( heal > int( rate ) ) heal = rate;
	bool isHealed = true;
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		if (cr.ParamBase [i] > 0) isHealed = false;
		cr.ParamBase [i] -= heal;
		if (cr.ParamBase [i] < 0) cr.ParamBase [i] = 0;
		i ++;
	}
	*/
	cr.StatBase [ST_CURRENT_HP] += heal;
	int16 aidTime = 2;
	
	rate -= heal;

	ChangeCritterSpeed (cr);
	
	bool repeat = true;
	if (rate <= 0) 
	{
		repeat = false;
	}
	return repeat ? aidTime : 0;
}

void ItemSupUse (Critter& cr, Item& item) 
{ // Суперстимулятор / СС
	uint8 overdose = cr.GetTimeEvents (CTE_STIMOVERDOSE, null, null, null) + cr.GetTimeEvents (CTE_SSTIMOVERDOSE, null, null, null) * 3;
	Critter@ targetCr = GetCritter( cr.Stat[ ST_VAR0 ] );
	
	_SubItem( item, 1 );
	cr.AddItem( PID_HYPODERMIC_NEEDLE, 1 );
	
	ChangeStatus( targetCr, CR_STATUS_HEAVY_DMG, 0, false );
	cr.AddTimeEvent ("cte_quickheal", 0, CTE_QUICKHEAL, cr.Stat[ST_MAX_LIFE]/3);
	Map@ map = cr.GetMap();
	map.PlaySound( "Stimpack.ogg", cr.HexX, cr.HexY, 1 );
	cr.Say (SAY_NETMSG, "Ваше сердце бьется учащенно. Вы чувствуете себя легче.");
	cr.Say (SAY_EMOTE, "Быстро дышит");
	cr.AddTimeEvent ("cte_sstimoverdose", 3600, CTE_SSTIMOVERDOSE, 0);
	
	if( overdose <= ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_STRENGTH ] ) / 2.5 )
    {
        //overdose++;
        overdose = CLAMP( overdose, 0, 7 );
        //cr.StatBase[ ST_OVERDOSE ] |= overdose;
    }
    else
    {
        if( Random( 0, 95 ) > cr.Stat[ ST_ENDURANCE ] * 10 ) //Допилить
        {
            /*cr.ToDead( Random( 0, 1 ) > 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );*/
            cr.Say( SAY_NETMSG, "У вас передозировка" );
			map.PlaySound( "head_damage1.ogg", cr.HexX, cr.HexY, 1 );
			cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 300 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
        }
        else
        {
            cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 150 - ( cr.Stat[ ST_ENDURANCE ] * cr.Stat[ ST_HEALING_RATE ] * 2 ), cr.HexX, cr.HexY );
            cr.Say( SAY_NETMSG, "Вам становится плохо.." );
			map.PlaySound( "head_damage2.ogg", cr.HexX, cr.HexY, 1 );
        }
    }
}


uint cte_stimoverdose (Critter& cr, int identifier, uint& rate) {
	return 0;
}

uint cte_sstimoverdose (Critter& cr, int identifier, uint& rate) {
	cr.StatBase[ ST_CURRENT_HP ] -= cr.Stat [ST_MAX_LIFE] / 12;
	/*
	int i = BP_LIMBS_BEGIN;
	while (i <= BP_LIMBS_END) {
		cr.ParamBase [i] += damage;
		i ++;
	}
	*/
	return 0;
}
